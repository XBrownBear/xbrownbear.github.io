<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只不掉毛的程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiongchang.vip/"/>
  <updated>2019-10-20T11:46:06.276Z</updated>
  <id>http://blog.xiongchang.vip/</id>
  
  <author>
    <name>Mr.xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令（一）</title>
    <link href="http://blog.xiongchang.vip/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://blog.xiongchang.vip/Linux常用命令（一）.html</id>
    <published>2019-10-20T11:32:22.000Z</published>
    <updated>2019-10-20T11:46:06.276Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --><h1 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h1><h2 id="命令基本格式"><a href="#命令基本格式" class="headerlink" title="命令基本格式"></a>命令基本格式</h2><ul><li><code>ls [选项] [文件/目录]</code><br>选项：<br><kbd>-a</kbd>：显示所有文件，包括隐藏文件；<br><kbd>-l</kbd>：显示详细信息；<br><kbd>-d</kbd>：查看目录属性；<br><kbd>-h</kbd>：人性化显示文件大小；<br><kbd>-i</kbd>：显示inode；<br><kbd>-lh</kbd>：人性化显示详细信息；<br><kbd>-ld</kbd>：查看目录属性详细信息。</li><li>附：权限默认10位（eg：<code>-rw-r--r--</code>）<br>第一位：表示文件类型，<kbd>-</kbd>：表示文件；<kbd>d</kbd>：表示目录；<kbd>l</kbd>：表示软连接文件。特殊文件还有四种：块设备文件、字符设备文件、套接字文件、管道文件。<br>后面九位按照每三位为一组：<code>前三位</code>是所有者权限；<code>中间三位</code>是所有组权限；<code>后三位</code>是其他人权限。其中用<kbd>r</kbd>：表示读；<kbd>w</kbd>：表示写；<kbd>x</kbd>：表示执行。</li></ul><h2 id="目录处理命令-1"><a href="#目录处理命令-1" class="headerlink" title="目录处理命令"></a>目录处理命令</h2><ul><li><code>mkdir [-p] [目录名]</code> 创建目录，<kbd>-p</kbd>：表示递归创建。</li><li><code>cd [目录]</code> 切换所在目录。<kbd>cd ~</kbd>和<kbd>cd</kbd>：表示进入当前用户的家目录；<kbd>cd -</kbd>：表示进入上次目录；<kbd>cd ..</kbd>：表示进入上一级目录；<kbd>cd .</kbd>：表示进入当前目录。</li><li><code>pwd</code> 查看当前所在目录位置。</li><li><code>rmdir [目录名]</code> 删除<kbd>空</kbd>目录。</li><li><code>rm -rf [文件/目录]</code> 删除目录或文件。<kbd>-r</kbd>：表示删除目录；<kbd>-f</kbd>：表示强制执行。慎用<code>rm -rf /</code>，在Linux中万物皆文件，什么都可以删除，包括系统核心文件。</li><li><code>cp [选项] [原文件或目录] [目标目录]</code> 复制文件<br>选项：<br><kbd>-r</kbd>：复制目录；<br><kbd>-p</kbd>：连带文件属性复制；<br><kbd>-d</kbd>：若是链接文件，则复制链接属性；<br><kbd>-a</kbd>：相当于<kbd>-rpd</kbd></li><li><code>mv [原文件或目录] [目标目录]</code> 剪切和重命名。</li></ul><h2 id="常见目录的作用"><a href="#常见目录的作用" class="headerlink" title="常见目录的作用"></a>常见目录的作用</h2><p>用跟目录下的<code>bin</code>和<code>sbin</code>和usr目录下的<code>bin</code>和<code>sbin</code>来保存系统命令。</p><p><code>boot</code>：启动目录；<code>dev</code>：特殊文件目录（设备文件）；<br><code>etc</code>：配置文件目录；<code>home</code>：普通用户家目录；<br><code>root</code>：特殊用户家目录；<code>lib</code>：Linux下的函数库；<br><code>media、mnt、misc</code>：默认是空目录，分别用来外接光盘、U盘、磁盘。<code>tmp</code>：临时目录；<br><code>proc、sys</code>：两个目录不能直接操作，保存的是内存过载点，直接写入内存的；<br><code>usr</code>：系统软件资源目录；<code>var</code>：系统相关可见文档目录。</p><p>在<code>root、home、tmp</code>目录下可以随便放内容，其他目录尽可能不需改动。</p><h2 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h2><ul><li><code>ln -s [原文件] [目标文件]</code> 生成链接文件。原文件需要写绝对路径，<kbd>-s</kbd>：表示创建软连接。</li><li>硬链接特征：<ol><li>拥有相同的<code>i</code>节点和存储block块，可看作是同一个文件；</li><li>可通过i节点识别；</li><li>不能跨分区；</li><li>不能针对目录使用；</li><li>删除原文件，不影响硬链接的使用；</li><li>不推荐使用。</li></ol></li><li>软链接特征：<ol><li>类似于Windows里面的快捷方式；</li><li>软链接拥有自己的i节点和block块，但数据块中只保存原文件的文件名和i节点名，并没有实际的文件数据；</li><li>软链接的权限都是<code>lrwxrwxrwx</code>;</li><li>修改任意一文件，另一个文件随之变化；</li><li>删除原文件，软链接也不能使用。</li></ol></li></ul><h1 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h1><ol><li>文件搜索命令<kbd>locate</kbd>；</li><li>命令搜索命令<kbd>whereis</kbd>和<kbd>which</kbd>；</li><li>文件搜索命令<kbd>find</kbd>；</li><li>字符串搜索命令<kbd>grep</kbd>；</li></ol><p>其中locate的搜索速度比find。</p><h2 id="文件搜索命令locate"><a href="#文件搜索命令locate" class="headerlink" title="文件搜索命令locate"></a>文件搜索命令locate</h2><ul><li><code>locate 文件名</code> 在后台数据库（目录为：/var/lib/mlocate）中按文件名搜索，速度快。</li><li><code>updatedb</code> 更新数据库。<br>更新后依然有可能搜索不到，比如在tmp目录下创建的文件，搜索不到是因为遵循了<code>/etc/updatedb.conf</code> 配置文件的规则：<kbd>PRUNE_BIND_MOUNTS=”yes“</kbd>开启搜索限制；<kbd>PRUNENAMES=</kbd>不搜索的文件类型；<kbd>PRUNEFS=</kbd>不搜索的文件系统；<kbd>PRUNEPATHS=</kbd>不搜索的路径。</li></ul><h2 id="命令搜索命令whereis和which"><a href="#命令搜索命令whereis和which" class="headerlink" title="命令搜索命令whereis和which"></a>命令搜索命令whereis和which</h2><ul><li><code>whereis [选项] 命令名</code> 搜索命令所在路径及帮助文档所在位置。<kbd>-b</kbd>表示只查找可执行文件；<kbd>-m</kbd>表示只查找帮助文件。</li><li><code>which 命令名</code> 搜索命令所在路径及别名。</li><li><code>echo $PATH</code> 查看环境变量。</li></ul><h2 id="文件搜索命令find"><a href="#文件搜索命令find" class="headerlink" title="文件搜索命令find"></a>文件搜索命令find</h2><ul><li><code>find [搜索范围] [搜索条件]</code> 搜索文件。</li><li><code>find / -name install.log</code> 在跟目录下搜索名为install.log的文件。（绝对查询）<ol><li>避免大范围搜索，非常的耗费系统资源；</li><li>find是在系统中搜索符合条件的文件名。如需要匹配，得通过<kbd>通配符</kbd>来完成，通配符是完全匹配。</li><li>通配符：<br><kbd>*</kbd>：表示匹配任意内容；<br><kbd>?</kbd>：表示匹配任意一个字符；<br><kbd>[]</kbd>表示匹配任意一个[ ]内的字符。</li></ol></li><li><code>find /root -iname install.log</code> 不区分大小写在/root下搜索install.log文件。</li><li><code>find /root -user root</code> 按照所有者搜索。</li><li><code>find /root -nouser</code> 查找没有所有者的文件。<ul><li>没有所有者的文件为垃圾文件，可手动删除。</li><li>但有两种情况除外：</li></ul><ol><li>内核文件。在proc和sys目录下有可能存在没有所有者文件；</li><li>外来文件。光盘、U盘等。</li></ol></li><li><code>find /var/log/ -mtime +10</code> 查找十天前修改的文件。<ul><li><kbd>+10</kbd>表示10天内；<kbd>10</kbd>表示第10天；<kbd>-10</kbd>表示10天后；</li><li><kbd>-atime</kbd>文件访问时间；<kbd>-ctime</kbd>改变文件属性时间；<kbd>-mtime</kbd>修修改文件内容时间。</li></ul></li><li><code>find . -size 25k</code> 查找当前目录文件大小为25k的文件。<ul><li><kbd>.</kbd>表示当前目录；</li><li><kbd>+25k</kbd>表示大于25k；</li><li><kbd>25k</kbd>表示等于25k；</li><li><kbd>-25k</kbd>表示小于25k。</li></ul></li><li><code>find . -inum 262422</code> 查找当前目录i节点是<code>262422</code>的文件。</li><li><code>find /etc -size +20k -a -size -50k</code> 查找/etc目录下，大于20k小于50k的文件。<ul><li><kbd>-a</kbd>：表示逻辑与（and）；</li><li><kbd>-o</kbd>：表示逻辑或（or）。</li></ul></li><li><code>find /etc -size +20k -a -size -50k -exec ls -lh {} \</code> 查找/etc目录下，大于20k小于50k的文件，并显示详细信息。<ul><li><code>-exec/-ok 命令 {} \</code> 对搜索结果执行操作。</li><li><code>命令A -exec 命令B {} \</code> 将命令A的结果交给命令B进行处理。</li></ul></li></ul><h2 id="字符串搜索命令grep"><a href="#字符串搜索命令grep" class="headerlink" title="字符串搜索命令grep"></a>字符串搜索命令grep</h2><ul><li><code>grep [选项] 字符串 文件名</code> 在文件中查找符合条件的字符串。<ul><li><kbd>-i</kbd>：表示忽略大小写；</li><li><kbd>-v</kbd>：表示取反，排除指定字符串。</li></ul></li></ul><h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><h2 id="帮助命令man"><a href="#帮助命令man" class="headerlink" title="帮助命令man"></a>帮助命令man</h2><ul><li><code>man 命令</code> 获取指定命令的帮助；<br>例如<code>man ls</code> 查看ls命令的帮助。</li><li>man的级别（<code>man man</code>）<ol><li>查看命令的帮助；</li><li>查看和被内核调用的函数的帮助；</li><li>查看函数和函数库的帮助；</li><li>查看特殊文件的帮助（主要是<kbd>/dev</kbd>目录下的文件）；</li><li>查看配置文件的帮助；</li><li>查看游戏帮助；</li><li>查看其他杂项的帮助；</li><li>查看系统管理员可用命令的帮助；</li><li>查看和内核相关文件的帮助。</li></ol></li><li><code>man -f 命令</code> 查看命令拥有哪个级别的帮助。<ul><li>相当于<code>whatis 命令</code> 。</li></ul></li><li><code>man -k 命令</code> 查看和命令相关的所有帮助（相当于模糊查找命令）<ul><li>相当于<code>apropos 命令</code></li><li>例如：<code>apropos passwd = man -k passwd</code> .</li></ul></li></ul><h2 id="其他帮助命令"><a href="#其他帮助命令" class="headerlink" title="其他帮助命令"></a>其他帮助命令</h2><ul><li><code>命令 --help</code> 获取命令选项的帮助；</li><li><code>help shell内部命令</code> 只能获取shell内部命令的帮助；<ul><li>判断是否是shell内部命令<code>whereis 命令</code> ：<br>若存在该命令目录，则不是shell内部命令；<br>若不存在该命令目录，则是shell内部命令。</li></ul></li><li><code>info 命令</code> 详细命令帮助。<ul><li><kbd>回车</kbd>：进入子帮助页面（带有<kbd>*</kbd>号标记）；</li><li><kbd>u</kbd>：进入上层页面；</li><li><kbd>n</kbd>：进入下一个帮助小节；</li><li><kbd>p</kbd>：进入上一个帮助小节；</li><li><kbd>q</kbd>：退出。</li></ul></li></ul><h1 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h1><p>常用的压缩格式有：.zip、.gz、.bz2、.tar.gz、.tar.bz2 …</p><h2 id="zip格式压缩"><a href="#zip格式压缩" class="headerlink" title=".zip格式压缩"></a>.zip格式压缩</h2><ul><li><code>zip 压缩文件名 源文件</code> 压缩文件；</li><li><code>zip -r 压缩文件名 源文件</code> 压缩目录；</li><li><code>unzip 压缩文件名</code> 解压缩.zip文件；</li></ul><h2 id="gz格式压缩"><a href="#gz格式压缩" class="headerlink" title=".gz格式压缩"></a>.gz格式压缩</h2><ul><li><code>gzip 源文件</code> 压缩为.gz格式的压缩文件，原文件会消失；</li><li><code>gzip -c 源文件 &gt; 压缩文件</code> 压缩为.gz格式，原文件保留；</li><li><code>gzip -d 压缩文件名</code>和<code>gunzip 压缩文件名</code> 解压缩，不保留原文件；</li><li><code>gzip -r 目录</code> 压缩目录下所有的子文件，但是不能压缩目录；</li><li><code>gunzip -r 压缩文件名</code> 解压缩目录。</li></ul><h2 id="bz2格式压缩"><a href="#bz2格式压缩" class="headerlink" title=".bz2格式压缩"></a>.bz2格式压缩</h2><ul><li><code>bzip2 源文件</code> 压缩为.bz2 格式的压缩文件，原文件会消失；</li><li><code>bzip2 -k 源文件</code> 压缩为.bz2格式，原文件保留；</li><li><code>bzip2 -d 压缩文件名</code> 和 <code>bunzip2 压缩文件名</code> 解压缩，<kbd>-k</kbd>保留原文件；</li></ul><h2 id="文件打包及压缩成-tar-gz和-tar-bz2格式"><a href="#文件打包及压缩成-tar-gz和-tar-bz2格式" class="headerlink" title="文件打包及压缩成.tar.gz和.tar.bz2格式"></a>文件打包及压缩成.tar.gz和.tar.bz2格式</h2><p>由于<kbd>gzip</kbd>和<kbd>bzip</kbd>不能直接压缩目录，则可以先打包，然后压缩。</p><ul><li><code>tar -cvf 打包文件名 源文件</code> 文件打包<br>选项：<br><kbd>-c</kbd>：打包；<br><kbd>-v</kbd>：显示过程；<br><kbd>-f</kbd>：指定打包后的文件名；<br><kbd>-t</kbd>：查看压缩包但不解压。</li><li><code>tar -xvf 打包文件名</code> 解打包。<kbd>-x</kbd>：表示解打包。</li><li><code>tar -zcvf 压缩包名.tar.gz 源文件</code> 压缩为.tar.gz格式。<kbd>-z</kbd>：表示压缩成.tar.gz格式。</li><li><code>tar -zxvf 压缩包名.tar.gz</code> 解压缩.tar.gz格式。</li><li><code>tar -jcvf 压缩包名.tar.bz2 源文件</code> 压缩为.tar.bz2格式。<kbd>-j</kbd>：表示压缩成.tar.bz2格式。</li><li><code>tar -jxvf 压缩包名.tar.bz2</code> 解压缩.tar.bz2格式。</li><li><code>tar -jxvf 压缩包名.tar.bz2 -C 路径A</code> 解压到路径A；（.tar.gz格式同理）</li><li><code>tar -jcvf 路径B/压缩包名.tar.bz2 源文件</code> 压缩到路径B；（.tar.gz格式同理）</li><li><code>tar -jtvf 压缩包名.tar.bz2</code> 查看压缩文件。（.tar.gz格式同理）</li></ul><h1 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机/重启命令"></a>关机/重启命令</h1><ul><li><code>shutdown [选项] 时间</code><br>选项：<br><kbd>-c</kbd>：取消前一个关机命令；<br><kbd>-h</kbd>：关机；<br><kbd>-r</kbd>：重启。</li><li>其他关机命令还有：<kbd>halt</kbd>、<kbd>poweroff</kbd>、<kbd>init 0</kbd>但是不推荐使用。</li><li>其他重启命令还有：<kbd>reboot</kbd>、<kbd>init 6</kbd>不推荐使用。</li><li>系统运行级别（init X）：</li></ul><table><thead><tr><th>编号 X</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>0</td><td style="text-align:left">关机</td></tr><tr><td>1</td><td style="text-align:left">单用户（进行系统修复）</td></tr><tr><td>2</td><td style="text-align:left">不完全多用户，不含NFS服务</td></tr><tr><td>3</td><td style="text-align:left">完全多用户</td></tr><tr><td>4</td><td style="text-align:left">未分配</td></tr><tr><td>5</td><td style="text-align:left">图形界面</td></tr><tr><td>6</td><td style="text-align:left">重启</td></tr></tbody></table><ul><li><code>cat /etc/inittab</code> 该文件可以修改系统默认运行级别；</li><li><code>runlevel</code> 查询系统运行级别；</li><li><code>logout</code> 退出当前用户登录。</li></ul><h1 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h1><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><ul><li><code>mount</code> 查询系统中已经挂在的设备；</li><li><code>mount -a</code> 依据配置文件<code>/etc/fstab</code> 的内容自动挂载；</li><li><code>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</code> 挂载命令格式；<ul><li><code>-t 文件系统</code> 加入文件系统类型来指定挂载的类型，可以<kbd>ext3</kbd>、<kbd>ext4</kbd>、<kbd>iso9660</kbd>等文件系统</li><li><code>-o 特殊选项</code> 可以指定挂载的额外选项：<br><img src="http://pzkcmqawt.bkt.clouddn.com/img_1.png" width="100%"><br>尽量不用做修改，若修改了，记得改回来。</li><li>手动挂载不具有永久性，重启后会失效，可以配置<code>/etc/fstab</code> 文件自动挂载。但是光盘、U盘等外接设备不推荐自动挂载。</li></ul></li><li><code>umount 设备文件名或挂载点</code> 卸载挂载点</li></ul><h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><ol><li><code>mkdir /mnt/cdrom/</code> 建立挂载点</li><li><code>mount -t iso9660 /dev/sr0 /mnt/cdrom</code> 挂载光盘。其中<kbd>-t iso9660</kbd> 可以省略，因为默认就是<kbd>-t iso9660</kbd>。</li><li><code>umount /mnt/sr0</code> 卸载光盘</li></ol><h2 id="挂载U盘（不常见）"><a href="#挂载U盘（不常见）" class="headerlink" title="挂载U盘（不常见）"></a>挂载U盘（不常见）</h2><ol><li><code>fdisk -l</code> 查看U盘设备文件名</li><li><code>mount -t vfat /dev/sdb1 /mnt/usb/</code> 挂载U盘。其中<code>/dev/sdb1</code> 视情况而定。</li><li>Linux默认是不支持NTFS文件系统的。</li></ol><h2 id="用户登录查看命令"><a href="#用户登录查看命令" class="headerlink" title="用户登录查看命令"></a>用户登录查看命令</h2><ul><li><code>w</code> 查看登录用户信息<br><img src="http://pzkcmqawt.bkt.clouddn.com/img_2.png" width="70%"></li><li><p><code>who</code> 查看登录用户信息</p><ul><li>命令输出显示：用户名、登录终端、登录时间（登录来源ip地址）<hr></li></ul></li><li><p><code>last</code> 查询当前登录和过去登录的用户信息</p><ul><li><kbd>last</kbd>命令默认是读取<code>/var/log/wtmp</code> 文件数据</li><li>命令输出：用户名、登录终端、登录IP、登录时间、退出时间（在线时间）</li></ul></li><li><code>lastlog</code> 查看所有用户的最后一次登录时间<ul><li><kbd>lastlog</kbd>命令默认是读取<code>/var/log/lastlog</code> 文件内容</li><li>命令输出：用户名、登录终端、登录IP、最后一次登录时间</li></ul></li></ul><h1 id="脚本执行命令"><a href="#脚本执行命令" class="headerlink" title="脚本执行命令"></a>脚本执行命令</h1><h2 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h2><ul><li><code>echo [选项] [输出的内容]</code> 输出指定内容<ul><li>选项：<kbd>-e</kbd>：反斜杠控制转换。<br><img src="http://pzkcmqawt.bkt.clouddn.com/img_3.png" width="80%"></li><li>例如：<code>echo -e &quot;\e[1;31m 输出的内容 \e[0m&quot;</code> 其中<kbd>\e[1;31m</kbd>表示开启颜色显示；<kbd>\e[0m</kbd>表示取消颜色。<kbd>\e[1;31m</kbd>和<kbd>\e[0m</kbd>必须成对出现。<ul><li><kbd>30m</kbd>：黑色；<kbd>31m</kbd>：红色；<kbd>32m</kbd>：绿色；<kbd>33m</kbd>：黄色；</li><li><kbd>34m</kbd>：蓝色；<kbd>35m</kbd>：洋红；<kbd>36m</kbd>：青色；<kbd>37m</kbd>：白色。</li></ul></li></ul></li></ul><h3 id="写一个简单的脚本"><a href="#写一个简单的脚本" class="headerlink" title="写一个简单的脚本"></a>写一个简单的脚本</h3><blockquote><ol><li><code>vim xiong.sh</code> # 创建并进入xiong.sh文件</li><li><code>#!/bin/bash</code> # 这一行不能删除<br><code>echo -e &quot;\e[1;31m 输出的内容 \e[0m&quot;</code> # 脚本代码</li><li><code>:wq</code> # 写入并退出</li><li><code>chmod 755 xiong.sh</code> # 赋予执行权限</li><li><code>./xiong.sh</code> # 执行，还可以通过<code>bash xiong.sh</code> 直接调用脚本</li></ol></blockquote><h2 id="别名与快捷键"><a href="#别名与快捷键" class="headerlink" title="别名与快捷键"></a>别名与快捷键</h2><ul><li><code>alias</code> 查看系统中所有的命名别名</li><li><code>alias 别名=‘原命令’</code> 设定命令别名，在该用户下临时生效</li><li>在<code>~/.bashrc</code> 环境变量配置文件中写入<code>alias 别名=‘原命令’</code> 方可永久生效。注意：需要调用一遍<code>source .bashrc</code> ，否则需要重新登录才会生效。</li><li><code>unalias 别名</code> 删除别名（临时生效的别名）</li><li><p>命令生效的顺序：</p><ol><li>执行用绝对路径或相对路径执行的命令；</li><li>执行别名；</li><li>执行bash的内部命令；</li><li>执行按照<code>$PATH</code>环境变量定义的目录查找顺序找到的第一个命令。</li></ol></li><li><p>常用快捷键：</p><ol><li><kbd>ctrl</kbd>+<kbd>C</kbd>：强制终止当前命令；</li><li><kbd>ctrl</kbd>+<kbd>L</kbd>：清屏；</li><li><kbd>ctrl</kbd>+<kbd>A</kbd>：光标移动到命令行首；</li><li><kbd>ctrl</kbd>+<kbd>E</kbd>：光标移动到命令行尾；</li><li><kbd>ctrl</kbd>+<kbd>U</kbd>：从光标所在位置删除到行首；</li><li><kbd>ctrl</kbd>+<kbd>Z</kbd>： 把命令放入后台；</li><li><kbd>ctrl</kbd>+<kbd>R</kbd>：在历史命令中搜索。</li></ol></li></ul><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><ul><li><code>history [选项] [历史命令保存文件]</code> 查看历史命令<br>选项：<br><kbd>-c</kbd>：清空历史命令<br><kbd>-w</kbd>：把缓存中的历史命令写入</li><li>历史命令保存在<code>~/.bash_history</code> 文件中。默认会保存1000条，可以在环境变量配置文件<code>/etc/profile</code> 中进行修改<code>HISTSIZE=1000</code> 的值。</li><li>历史命令的调用：<br><kbd>上下键</kbd>：调用以前的历史命令；<br><kbd>!n</kbd>：重读执行第n条历史命令<br><kbd>!!</kbd>：重复执行上一条历史命令<br><kbd>!字符串</kbd>：重复执行最后一条以该字串开头的命令。</li></ul><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p><img src="http://pzkcmqawt.bkt.clouddn.com/img_4.png" width="80%"></p><p>注意<kbd>标准输出重定向</kbd>中<kbd>&gt;</kbd>和<kbd>&gt;&gt;</kbd>后面有空格，<kbd>标准错误输出重定向</kbd>中<kbd>2&gt;</kbd>和<kbd>2&gt;&gt;</kbd>后面没有空格。</p><hr><p><img src="http://pzkcmqawt.bkt.clouddn.com/img_7.png" width="80%"></p><p>同样注意是否存在空格。</p><hr><ul><li>输入重定向：<br><code>wc [选项] [文件名]</code> 输出行数，单词数，字节数<br><kbd>-c</kbd>：统计字节数；<br><kbd>-w</kbd>：统计单词数；<br><kbd>-l</kbd>：统计行数。</li></ul><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><ul><li><p>多命令顺序执行：<br><img src="http://pzkcmqawt.bkt.clouddn.com/img_5.png" width="80%"><br>例如：<code>ls &amp;&amp; echo yes || echo no</code> 判断输入ls是否正确。</p></li><li><p>管道符：<br><code>命令1 | 命令2</code> 命令1的正确输出作为命令2的操作对象，输出最终命令2结果。<br>注意与<kbd>;</kbd>区分开，<kbd>;</kbd>会输出每条命令。</p></li></ul><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p><img src="http://pzkcmqawt.bkt.clouddn.com/img_6.png" width="80%"><br><img src="http://pzkcmqawt.bkt.clouddn.com/img_8.png" width="80%"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;目录处理命令&quot;&gt;&lt;a href=&quot;#目录处理命令&quot; class=&quot;headerlink&quot; title=&quot;目录处理命令&quot;&gt;&lt;/a&gt;目录处
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/tags/Linux/"/>
    
      <category term="常用命令" scheme="http://blog.xiongchang.vip/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数据定义语言DDL</title>
    <link href="http://blog.xiongchang.vip/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL.html"/>
    <id>http://blog.xiongchang.vip/数据定义语言DDL.html</id>
    <published>2019-10-16T12:33:19.000Z</published>
    <updated>2019-10-17T08:15:54.313Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><code>create table 表名()</code></p><h3 id="创建表中字段的属性"><a href="#创建表中字段的属性" class="headerlink" title="创建表中字段的属性"></a>创建表中字段的属性</h3><p>（都是写在 <code>&quot;字段名 类型 是否空&quot;</code>后面）：<a id="more"></a></p><ul><li>引用其他表字段：<code>references 引用的表名（字段）</code></li><li>设置字段中默认值：<code>defauct ‘’</code></li><li>自增列：<code>auto_increment</code></li><li>约束字段（域）：<code>check()</code></li><li>主键：<code>primart key</code></li></ul><h3 id="查看表的基本结构"><a href="#查看表的基本结构" class="headerlink" title="查看表的基本结构"></a>查看表的基本结构</h3><ul><li>语法：<code>desc 表名</code></li><li>结果：</li></ul><p><code>Field</code>：字段名</p><p><code>Type</code>：字段类型</p><p><code>NULL</code>：是否可以为空</p><p><code>Key</code>：是否编制索引</p><p><code>Default</code>：默认值</p><p><code>Extra</code>：附加信息，如自增列（自动增长列一般为主键）</p><h3 id="查看表的详细结构"><a href="#查看表的详细结构" class="headerlink" title="查看表的详细结构"></a>查看表的详细结构</h3><ul><li>查看：<code>show create table 表名</code></li><li>格式化：<code>show create table 表名\G</code></li></ul><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p><code>alter table 旧表名 rename to 新表名</code></p><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h3><p><code>alter table 表名 change 旧字段名 新字段名 新类型</code></p><h3 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h3><p><code>alter table 表名 modify 字段名 新类型</code></p><h3 id="添加和删除字段"><a href="#添加和删除字段" class="headerlink" title="添加和删除字段"></a>添加和删除字段</h3><ul><li>添加： <code>alter table 表名 add 新字段 新类型</code></li><li>删除： <code>alter table 表名 drop 字段</code></li></ul><h3 id="增补约束"><a href="#增补约束" class="headerlink" title="增补约束"></a>增补约束</h3><ul><li>添加主键：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称             //约束名称一般为，PK_表名_主键字段</div><div class="line">primary key(主键目标列)</div></pre></td></tr></table></figure><ul><li>添加外键约束：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称//约束名称一般为，FK_引用表_被引用表</div><div class="line">foreign key(列) references 被引用表（列）</div></pre></td></tr></table></figure><ul><li>添加检查约束：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称//约束名称一般为，CK_表名</div><div class="line">check(约束条件)</div></pre></td></tr></table></figure><ul><li>添加默认值语法：<br><code>alter table 表名 alter 目标列 set default 默认值</code></li><li>添加自动增长语法：<br><code>alter table 表名 modify column 自增列 类型 是否为空 auto_increment</code></li></ul><h3 id="删除无关联数据表"><a href="#删除无关联数据表" class="headerlink" title="删除无关联数据表"></a>删除无关联数据表</h3><p><code>drop table 表1，表2</code>；（可删多个，注意：无关联）</p><h3 id="删除有关联数据表"><a href="#删除有关联数据表" class="headerlink" title="删除有关联数据表"></a>删除有关联数据表</h3><p>先解除关联关系（删除外键约束）：<code>alter table 从表名称 drop 外键约束 名称</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h3&gt;&lt;p&gt;&lt;code&gt;create table 表名()&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;创建表中字段的属性&quot;&gt;&lt;a href=&quot;#创建表中字段的属性&quot; class=&quot;headerlink&quot; title=&quot;创建表中字段的属性&quot;&gt;&lt;/a&gt;创建表中字段的属性&lt;/h3&gt;&lt;p&gt;（都是写在 &lt;code&gt;&amp;quot;字段名 类型 是否空&amp;quot;&lt;/code&gt;后面）：
    
    </summary>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>数据库常用函数</title>
    <link href="http://blog.xiongchang.vip/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://blog.xiongchang.vip/数据库常用函数.html</id>
    <published>2019-10-16T12:31:42.000Z</published>
    <updated>2019-10-17T08:08:59.614Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --><h1 id="前序："><a href="#前序：" class="headerlink" title="前序："></a>前序：</h1><p>增删改查简称CRUD<br>数据定义语言（DDL）：create、drop、alter、show<br>数据操纵语言（DML）：insert、delete、update<br>数据查询语言（DQL）：select<a id="more"></a><br>数据控制语言（DCL）：grant（分配）、revoke（回收）、deny（拒绝）等。</p><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><ul><li>整数：tingint（1字节）、smallint（2字节）、int（4字节）、bigint（8字节）</li><li>定点数：decimal（p,s）（字节数为 p+2）</li><li>文本： char（固定长度文本）、varchar（字符串，类似于String）、Text</li></ul><h2 id="数据库概述："><a href="#数据库概述：" class="headerlink" title="数据库概述："></a>数据库概述：</h2><h3 id="数据库特点："><a href="#数据库特点：" class="headerlink" title="数据库特点："></a>数据库特点：</h3><ul><li>数据结构化；</li><li>数据共享性高，冗余度低，易扩充</li><li>数据的独立性高</li><li>数据由DBMS统一管理和控制</li></ul><h3 id="DBMS必须提供以下数据控制功能："><a href="#DBMS必须提供以下数据控制功能：" class="headerlink" title="DBMS必须提供以下数据控制功能："></a>DBMS必须提供以下数据控制功能：</h3><ul><li>数据的安全性（Security）保护</li><li>数据的完整性（Integrity）检查</li><li>并发（Concurrency）控制</li><li>数据库恢复（Recovery）</li></ul><h1 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h1><ul><li>函数的概念：按指定格式输入参数，返回正确结果的运算单元</li><li>返回当前日期：<br><code>curdate()</code>、<code>current_date()</code> //两种函数返回是完全一样的<br><code>curdate()+0</code> //可以将当前日期值转换为数值型</li><li>返回当前时间：<br><code>curtime()</code>、<code>current_time()</code> //两种函数返回是完全一样的<br><code>curtime()+0</code> //可以将当前时间值转换为数值型</li><li>返回当前日期和时间：<br><code>current_timestamp()</code>、<code>localtime()</code>、<code>now()</code>、<code>sysdate()</code> //四个函数结果相同</li><li>获取月份：<br><code>month(date)</code> //指定时间参数，获取数字<br><code>monthname(date)</code> //返回月份英文</li><li>获取星期：<br><code>dayname(date)</code> //返回星期英文<br><code>dayofweek(date)</code> //将星期天作为一周第1天（1–7）<br><code>weekday(date)</code> //将星期一作为一周第0天（0–6）<br><code>week(date)</code> //一年第几个星期（以0为起始）<br><code>weekofyear(date)</code> //一年第几个星期（以1为起始）</li><li>获取天数：<br><code>dayofyear(date)</code> //该天是该年的第几天<br><code>dayofmonth(date)</code> //该天是该月的第几天</li><li>获取年份、季度、小时、分钟、秒：<br><code>year(date)</code>、<code>quarter(date)</code>、<code>hour(time)</code>、<code>minute(time)</code>、<code>second(time)</code></li></ul><h1 id="数学函数："><a href="#数学函数：" class="headerlink" title="数学函数："></a>数学函数：</h1><ul><li>绝对值函数：<code>abs(x)</code></li><li>符号函数：<code>sign(x)</code> //判断数字是正数（返回1）还是负数（返回-1）还是0（返回0）</li><li>获取随机数函数：<br><code>rand()</code> //生成小于1的随机数<br><code>rand(x)</code> //生成固定数</li><li>获取整数的函数：<br><code>ceil(x)</code>或<code>ceiling(x)</code> //大于x的最小整数<br><code>floor(x)</code> //小于x的最大整数</li><li>四舍五入：<br><code>round(x)</code> //四舍五入<br><code>round(x，y)</code> //四舍五入,x为目标数，y为保留位数<br><code>truncate(x，y)</code> //截取，x为目标数，y为截取位数</li><li>求模（余数）函数：<code>mod(x，y)</code> //x为被除数，y为除数</li><li>幂运算函数：<br><code>pow(x，y)</code>或<code>power(x，y)</code> //求x的y次幂<br><code>exp(x)</code> //e的x次幂（e=2.7…）<br><code>sqrt(x)</code> //x的平方根</li><li>角度弧度互换函数：<br><code>radians(x)</code> //角度转换成弧度<br><code>degrees(x)</code> //弧度转换成角度</li><li>圆周率函数：<code>pi()</code></li><li>三角函数：<code>sin(x)</code>、<code>asin(x)</code>、<code>cos(x)</code>、<code>acos(x)</code>、<code>tan(x)</code>、<code>atan(x)</code>、<code>cot(x)</code></li></ul><h1 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h1><ul><li>计算字符数和字符串长度的函数：<br><code>char_length(s)</code> //字符串有多少个字符<br><code>length(s)</code> //字符串占用多少个字节（utf-8中一个汉字3字节）</li><li>合并字符串函数：<br><code>concat(s1，s2，...)</code><br><code>concat_ws(连接符，s1，s2，...)</code> //连接符出现在字符串之间进行连接</li><li>替换字符串函数：<br><code>insert(s1，X，len，s2)</code> //从s1字符串第X位置len长度替换成s2（从1开始数）<br><code>repla(S，S1，S2)</code> //将原字符串S中的子字符串S1替换成S2</li><li>截取字符串函数：<br><code>left(S，N)</code> //从字符串S左边截取N个字符<br><code>right(S，N)</code> //从字符串S右边截取N个字符</li><li>重复生成字符串函数：<code>repeat(S，N)</code> //将字符串S重复显示N遍</li><li>大小写转换函数：<br><code>lower(x)或</code>lcase(x) //全部变成小写<br><code>upper(x)</code>或<code>ucase(x)</code> //全部变成大写</li><li>填充字符串函数：<br><code>lpad(S1，len，S2)</code> //从字符串S1左边开始填充长度为len的S2<br><code>rpad(S1，len，S2)</code> //从字符串S1右边开始填充长度为len的S2</li><li>删除空格函数：<br><code>ltrim(s)</code>或<code>rtrim(s)</code> //删除左/右边的空格<br><code>trim</code> //只能去掉两边的空格，中间空格删不掉</li><li>删除指定字符串：<br><code>trim(S1 from S)</code> //删除字符串S中靠边的字符串S1</li><li>获取子字符串：<br><code>substring(S，N，len)</code> //从字符串S中从第N个位置截取len长度的字符串（从1开始数）<br><code>mid(S，N，len)</code> //同上，效果相同</li><li>返回指定位置字符串函数：<br><code>elt(N，S1，S2，...)</code> //找到并返回S1，S2，… 中的第N个字符串（从1开始数）</li><li>返回指定字符串位置：<br><code>field(S，S1，S2，...)</code> //在S1，S2，…中找到与字符串S相同的字符串，返回首次出现该字符串位置</li></ul><h1 id="系统函数："><a href="#系统函数：" class="headerlink" title="系统函数："></a>系统函数：</h1><ul><li>获取mySQL版本号的函数：<code>version()</code></li><li>查看当前用户的连接数：<code>connection_id()</code></li><li>查看当前所用数据库函数：<br><code>database()</code> //返回当前数据库名<br><code>schema()</code> //两个函数返回相同</li><li>获取用户名函数：<code>user()</code>、<code>current_user()</code>、<code>system_user()</code>、<code>session_user()</code></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;前序：&quot;&gt;&lt;a href=&quot;#前序：&quot; class=&quot;headerlink&quot; title=&quot;前序：&quot;&gt;&lt;/a&gt;前序：&lt;/h1&gt;&lt;p&gt;增删改查简称CRUD&lt;br&gt;数据定义语言（DDL）：create、drop、alter、show&lt;br&gt;数据操纵语言（DML）：insert、delete、update&lt;br&gt;数据查询语言（DQL）：select
    
    </summary>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Git教程及常用命令</title>
    <link href="http://blog.xiongchang.vip/Git%E6%95%99%E7%A8%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://blog.xiongchang.vip/Git教程及常用命令.html</id>
    <published>2019-10-15T14:34:58.000Z</published>
    <updated>2019-10-17T08:09:11.980Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --><h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><h2 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h2><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git </div><div class="line">The program <span class="string">'git'</span> is currently not installed. You can install it</div><div class="line">by typing: sudo apt-get install git</div></pre></td></tr></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><h2 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h2><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODY5MTc0MzEzNi8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><h2 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h2><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODcxODM2MzQyNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h1 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h1><h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><p>配置使用者身份<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --golbal user.name <span class="string">'yourname'</span></div><div class="line">$ git config --golbal user.email <span class="string">'email@example.com'</span></div></pre></td></tr></table></figure><p></p><p>查看当前身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name</div><div class="line">git config user.email</div></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>1、新建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir newFiles<span class="comment"># 创建文件夹</span></div><div class="line">$ <span class="built_in">cd</span> newFiles<span class="comment"># 进入newFiles目录</span></div><div class="line">$ <span class="built_in">pwd</span><span class="comment"># 显示当前目录</span></div></pre></td></tr></table></figure><p>2、初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure><h2 id="添加文件到git仓库"><a href="#添加文件到git仓库" class="headerlink" title="添加文件到git仓库"></a>添加文件到git仓库</h2><p>向git仓库添加文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div></pre></td></tr></table></figure><p></p><p>可以用<code>*.txt</code>表示添加<code>txt</code>一类的文件；<code>.</code>表示添加所有文件；添加多个文件时用<code>空格</code>隔开。</p><h2 id="查看添加状态"><a href="#查看添加状态" class="headerlink" title="查看添加状态"></a>查看添加状态</h2><p>查看仓库的状态：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure><p></p><p>有时文件较多，并且有些文件是不需要显示时，可以用以下方法将其忽略：<br>1.创建<code>.gitignore</code>文件<br>2.在<code>.gitignore</code>文件中添加需要忽略的文件或路径（相对路径）</p><h2 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'里面是注释的内容'</span></div></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure><p>使用此命令仅仅是删除文件管理器的文件，在git中并没有删除掉，若误删可以使用<code>$ git checkout -- test.txt</code> 恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div></pre></td></tr></table></figure><p>此时会将文件管理器和git中同时删除，不可恢复。</p><h2 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>1、查看所有提交历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span><span class="comment"># 列出日志详细信息</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=online<span class="comment"># 列出日志简述</span></div></pre></td></tr></table></figure><p>2、版本回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard head^<span class="comment"># 回退到上一个版本</span></div><div class="line">$ git reset --hard head~100<span class="comment"># 回退到上一百个版本</span></div></pre></td></tr></table></figure><p>3、撤回回退版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 56ea1f<span class="comment"># 需要知道版本号，且窗口没有关闭</span></div></pre></td></tr></table></figure><p>若不幸将窗口关闭，找不到版本号，可以使用<code>$ git reflog</code>来查找版本历史记录，从而找到版本号。</p><p>总而言之：<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，<code>git reset --hard head^</code>，不过前提是没有推送到远程库。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><ul><li>创建SSH key<br>在用户主目录下，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有i<code>d_rsa和id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ul><li><p>将公钥添加到GitHub<br>首先登录GitHub，然后点击右上角头像中的<code>setting</code>，选择<code>SSH and GPG keys</code>。接着选择<code>New SSH key</code>，分别输入<code>Title</code>和<code>id_rsa.pub</code><br>这样添加公钥就成功了。</p></li><li><p>添加远程库<br>依次选择右上角的<code>+</code> -&gt; <code>New repository</code> -&gt; <code>Repository name</code> -&gt; 确定<br>在本地仓库目录下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:michaelliao/learngit.git<span class="comment">#注意将地址改成自己的</span></div></pre></td></tr></table></figure><p>记得把地址改成自己的哦！<br>接着可以将本地仓库推送的GitHub中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure><p>第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (xx.xx.xx.xx)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) to the list of known hosts.</div></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/en/articles/githubs-ssh-key-fingerprints" target="_blank" rel="external">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><p>点击<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="external">这里</a>可以了解更详细。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>创建并切换到dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branck dev<span class="comment">#创建</span></div><div class="line">$ git checkout dev<span class="comment">#切换</span></div></pre></td></tr></table></figure><p>可以将以上两条命令合并为<code>$git checkout -b dev</code>.</p><ol><li>查看当前分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure><ol><li>合并dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev<span class="comment"># 合并dev分支到当前分支</span></div></pre></td></tr></table></figure><ol><li>删除dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branck <span class="_">-d</span> dev</div></pre></td></tr></table></figure><ol><li>switch<br>创建并切换：<code>$ git switch -c dev</code><br>切换已有分支：<code>$ git switch dev</code><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2>当使用<code>$ git merge dev</code>和<code>$ git status</code>发现是否有冲突<br>若存在冲突则：1、查看文件；2、写改成统一文件保存，解决冲突；3、<code>add</code>并<code>commit</code>到git仓库。<br>使用<code>$ git log --graph --pretty=oneline --abbrev-commit</code>可看到分支的合并情况。<br>使用<code>$ git log --graph</code>可看到分支合并图。<br><code>Fast forward模式</code><br>有冲突时：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAwMDQyMzA0MC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>解决冲突后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAzMTgzMTEwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2>合并：<code>$ git merge --no-ff -m &quot;描述信息&quot; dev</code><br>合并后可以看到历史分支，而<code>Fast forward模式</code>合并看不出曾做过合并。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzIyNTE0MjMwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2>在修复bug时，在bug的分支上再创建分支，进行修复，然后合并，最后修复bug。</li></ol><p>当工作没有完成时，先<code>$ git stash</code>保存现场，然后修复bug，修复之后接着<code>$ git stash pop</code>恢复没有完成的工作，同时删除之前保存的现场。<br><code>$ git stash pop</code>命令也可拆解为恢复<code>$ git stash apply</code>和删除<code>$ git stash deop</code><br><code>$ git stash list</code>可查看保存现场。</p><p>若正在工作的分支上存在之前修复的同样的bug，可以用<code>$ git cherry -pick 4c80502</code>来避免重复劳动。<code>4c80502</code>是在其他分支提交修复bug后的提交<code>id</code></p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>开发一个新功能时，最好新建一个分支，在该分支上开发，合并，最后删除。</p><p>若开发完成，在合并前，因某些原因要求销毁，使用<code>$ git branch -D feature</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li><p>查看远程库<code>$ git remote</code>或<code>$ git remote -v</code>(看详细内容)；<br>添加远程库<code>$ git remote add &lt;远程库名称&gt; &lt;远程库地址&gt;</code>；<br>删除远程库<code>$ git remote rm &lt;远程库名称&gt;</code>。<br>可以同时添加多个远程库（例如：GitHub、码云等）。</p></li><li><p>推送分支<code>$ git push origin &lt;分支&gt;</code><br>一般<code>master</code>主分支；<code>dev</code>开发分支与远程同步；<code>bug</code>分支用于在本地修复bug，没必要远程同步；<code>feature</code>分支是否推送，取决于合作伙伴。</p></li><li><p>抓取分支<code>$ git checkout -b dev origin/dev</code>(在本地创建和远程分支对应的分支)。</p></li></ul><p>多人协作的工作模式步骤通常：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><p><code>$ git rebase</code>把本地没有push的分叉提交历史整理成直线，使查看历史时更加直观容易。</p><h1 id="标题管理"><a href="#标题管理" class="headerlink" title="标题管理"></a>标题管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li><code>$ git tag v1.0</code>在最新提交上打标签；</li><li><code>$ git tag v0.9 f52c633</code>给指定提交上打标签，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag -a v1.0 -m &#39;注释内容&#39; f52c633</code>给指定提交上打标签并备注信息，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag</code>查看标签；</li><li><code>$ git show v0.9</code>查看指定标签详细信息。<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2></li><li><code>$ git tag -d v1.0</code>删除标签；</li><li><code>$ git push origin v1.0</code>推送v1.0标签到远程；</li><li><code>$ git push origin --tags</code>一次性推送所有未推送到远程的本地标签；</li></ul><p>删除远程标签：<br>1、先从本地删除：<code>$ git tag -d v0.9</code><br>2、然后远程删除：<code>$ git push origin :refs/tags/v0.9</code></p><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><p>参与一个开源项目：</p><ol><li>访问项目主页；</li><li><code>Fork</code>克隆仓库到自己的远程仓库；</li><li>从自己的远程仓库<code>clone</code>到本地；</li><li>工作完成后，<code>push</code>到自己的远程库；</li><li>在GitHub上发起<code>pull request</code>到开源项目上；</li><li>是否接受取决于他人。<h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2></li><li>新建<code>.gitignore</code>文件；</li><li>在<code>.gitignore</code>文件中加入需要忽略的文件和目录；</li><li>提交到git：<code>$ git add -f &lt;文件&gt;</code>，<code>-f</code>表示强制添加到git；<code>$ git check-ignore -v &lt;文件&gt;</code>，可检查是否时<code>.gitignore</code>规则问题。</li></ol><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p><code>$ git config --global alias.st status</code>将<code>status</code>别名改成<code>st</code></p><p><code>--global</code>是全局参数，可以此电脑所有git仓库使用，否则仅对当前仓库起作用。</p><p>每个仓库的git配置文件都放在<code>.git/config</code>文件中，可以使用<code>$ cat .git/config</code>查看（相对路径）。当前用户的git配置文件放在用户主目录下<code>.gitconfig</code>文件中。</p><p>详细可查看<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="external">git教程_廖雪峰</a>.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Oct 20 2019 20:00:19 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h1&gt;&lt;h2 id=&quot;在Linux上安装Git&quot;&gt;&lt;a href=&quot;#在Linux上安装Git&quot; class=&quot;headerlink&quot; title=&quot;在Linux上安装Git&quot;&gt;&lt;/a&gt;在Linux上安装Git&lt;/h2&gt;&lt;p&gt;首先，你可以试着输入&lt;code&gt;git&lt;/code&gt;，看看系统有没有安装Git：
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.xiongchang.vip/categories/Git/"/>
    
    
      <category term="Git" scheme="http://blog.xiongchang.vip/tags/Git/"/>
    
  </entry>
  
</feed>
