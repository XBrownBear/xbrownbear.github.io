<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只不掉毛的程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiongchang.vip/"/>
  <updated>2019-11-20T01:53:40.953Z</updated>
  <id>http://blog.xiongchang.vip/</id>
  
  <author>
    <name>Mr.xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令（二）</title>
    <link href="http://blog.xiongchang.vip/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://blog.xiongchang.vip/Linux常用命令（二）.html</id>
    <published>2019-11-20T01:48:00.000Z</published>
    <updated>2019-11-20T01:53:40.953Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h2 id="VIM文本编辑器"><a href="#VIM文本编辑器" class="headerlink" title="VIM文本编辑器"></a>VIM文本编辑器</h2><ul><li><p>VIM对VI的提升：</p><ul><li>多级撤销；</li><li>跨平台运行；</li><li>语法高亮；</li><li>支持图形界面。<a id="more"></a></li></ul></li><li><p><code>vim [选项] 文件名</code> 打开文件</p><ul><li>选项：<ul><li><kbd>+</kbd>：光标在最后一行</li><li><kbd>+n</kbd>：光标在第n行</li><li><kbd>+/XXX</kbd>：光标定位到XXX第一次出现的行（再输入n定位到下一个出现的位置）</li></ul></li></ul></li><li><p><code>vim 文件A 文件B 文件C</code> 同时创建并打开文件A、B、C。</p><ul><li>使用<kbd>:n</kbd> 切换到下一个文件；</li><li>使用<kbd>:N</kbd> 切换到上一个文件；</li></ul></li><li><p>底行模式常用命令：</p></li></ul><table><thead><tr><th>命令</th><th>解释</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>:w</td><td>保存文件</td><td>/xxx</td><td>从光标位置向后搜索xxx</td></tr><tr><td>:q</td><td>退出</td><td>?xxx</td><td>从光标位置向前搜索xxx</td></tr><tr><td>:!</td><td>强制执行</td><td>:n</td><td>切换到后一个文件</td></tr><tr><td>:ls</td><td>列出打开的所有文件</td><td>:N</td><td>切换到前一个文件</td></tr><tr><td>:set nu</td><td>显示行号</td><td>:15</td><td>将光标快速定位到第15行</td></tr><tr><td>:set nount</td><td>不显示行号</td><td>:n1,n2s/A/B/g</td><td>在n1和n2行之间，将A替换成B</td></tr><tr><td></td><td></td><td>:/,$s/A/B/g</td><td>将文档中所有A替换成B。(不加g会替换每行的第一个A)</td></tr></tbody></table><ul><li>命令模式常用命令：</li></ul><table><thead><tr><th>命令</th><th>解释</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>h</td><td>光标左移</td><td>ctrl+f</td><td>向下翻页</td></tr><tr><td>j</td><td>光标下移</td><td>ctrl+b</td><td>向上翻页</td></tr><tr><td>k</td><td>光标上移</td><td>ctrl+d</td><td>向下翻半页</td></tr><tr><td>l</td><td>光标右移</td><td>ctrl+u</td><td>向上翻半页</td></tr></tbody></table><table><thead><tr><th>命令</th><th>解释</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>dd</td><td>删除光标所在行</td><td>p</td><td>在光标所在行的下方粘贴</td></tr><tr><td>o</td><td>在光标所在行向下插入一行</td><td>P</td><td>在光标所在行的上方粘贴</td></tr><tr><td>yy</td><td>复制光标所在行</td><td>u</td><td>还原上步操作</td></tr><tr><td>nyy</td><td>向下复制n行</td><td>v</td><td>按v后移动光标选中指定字符</td></tr><tr><td>gg</td><td>光标移动到首行</td><td>shift+4</td><td>移动到本行行尾</td></tr><tr><td>G</td><td>光标移动到尾行</td><td>shift+6</td><td>移动到本行行首</td></tr><tr><td>nG</td><td>光标移动到第n行</td><td></td></tr></tbody></table><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="查看磁盘分区使用情况"><a href="#查看磁盘分区使用情况" class="headerlink" title="查看磁盘分区使用情况"></a>查看磁盘分区使用情况</h3><ul><li><code>df [选项]</code><ul><li><kbd>-l</kbd>：仅显示本地磁盘（默认）</li><li><kbd>-a</kbd>：显示所有文件系统的磁盘使用情况</li><li><kbd>-h</kbd>：以1024进制计算最合适的单位显示磁盘容量</li><li><kbd>-H</kbd>：以1000进制计算最合适的单位显示磁盘容量</li><li><kbd>-T</kbd>：显示磁盘分区类型</li><li><kbd>-t</kbd>：显示指定类型文件系统的磁盘分区</li><li><kbd>-x</kbd>：不显示指定类型文件系统的磁盘分区</li></ul></li><li><code>du [选项]</code><ul><li><kbd>-b</kbd>：以byte为单位统计文件</li><li><kbd>-k</kbd>：以KB为单位统计文件</li><li><kbd>-m</kbd>：以MB为单位统计文件</li><li><kbd>-h</kbd>：按照1024进制以最合适的单位统计文件</li><li><kbd>-H</kbd>：按照1000进制以最合适的单位统计文件</li><li><kbd>-s</kbd>：指定统计目标</li></ul></li></ul><h3 id="MBR模式分区"><a href="#MBR模式分区" class="headerlink" title="MBR模式分区"></a>MBR模式分区</h3><p>此分区模式比较老旧，主分区不能超过4个，单个分区容量最大为2TB。</p><ol><li>关闭虚拟机，添加硬盘后开机登陆；</li><li><code>fdisk</code> 查看fdisk帮助文档；</li><li><code>fdisk -l</code> 查看fdisk分区表参数，可看到未被分区的磁盘路径；</li><li><code>fdisk /dev/sdb</code> 进入磁盘待分区状态；</li><li><code>m</code> 查看帮助；</li><li><code>n</code> 添加分区；</li><li>根据提示一次输入相关信息；</li><li><code>w</code> 最后写入分区，完成分区。</li></ol><h3 id="GPT模式分区"><a href="#GPT模式分区" class="headerlink" title="GPT模式分区"></a>GPT模式分区</h3><ul><li>主分区个数几乎没有限制（128个），单个分区容量几乎没有限制（18EB=18 x $$2^{10}$$ TB）。</li><li>缺点是不适合 x86 系统。</li></ul><ol><li><p>关闭虚拟机，添加硬盘后开机登陆；</p></li><li><p><code>parted</code> parted分区工具既可做GPT分区，也可以做MBR分区；</p></li><li><p><code>help</code> 查看帮助文档；</p></li><li><p><code>select /dev/sdc</code> 切换到/dev/sdc硬盘；</p></li><li><p><code>mklabel msdos</code> 采用MBR分区；</p><p><code>mklabel gpt</code> 采用GPT分区；（二选一）</p></li><li><p><code>print</code> 查看当前硬盘分区详情；</p><p><code>print all</code> 查看所有硬盘分区详情；</p></li><li><p>此时有两种模式完成分区：</p><ul><li><p>交互模式：</p><ul><li><code>mkpart</code></li><li>输入分区名称</li><li>分区类型</li><li>开始位置（MB）</li><li>结束位置（MB）</li><li><code>quit</code> 完成分区</li></ul></li><li><p>命令模式：</p><ul><li><p><code>mkpart 分区名称 开始位置 结束位置</code></p><p>eg：<code>mkpart test 1 2000</code></p></li><li><p><code>quit</code> 完成分区</p></li></ul></li></ul></li><li><p><code>rm 分区编号</code> 删除分区</p></li></ol><h3 id="分区格式化"><a href="#分区格式化" class="headerlink" title="分区格式化"></a>分区格式化</h3><ul><li><code>mkfs.ext3 /dev/sdb1</code> 将sdb1格式化成ext3文件系统；</li><li><code>mkfs -t ext4 /dev/sdb2</code> 将sdb2格式化成ext4文件系统；</li><li>注意：扩展分区不可以格式化。</li></ul><h3 id="给硬盘添加swap分区"><a href="#给硬盘添加swap分区" class="headerlink" title="给硬盘添加swap分区"></a>给硬盘添加swap分区</h3><ul><li>建立一个普通的Linux分区；</li><li>修改分区类型的16进制编码；</li><li>格式化分区；</li><li>启用交换分区。</li><li>步骤：<ol><li>建立一个普通分区（步骤参上MBR/GPT模式分区）</li><li><code>fdisk /dev/sdb</code> 进入磁盘sdb；</li><li><code>p</code> 查看分区；</li><li><code>t</code> 修改类型分区编号；</li><li><code>分区编号</code> 选择分区编号；</li><li><code>L</code> 查看编码列表；</li><li><code>82</code> Linux swap 交换分区编号；</li><li><code>w</code> 保存；</li><li><code>mkswap /dev/sdb1</code> 格式化交换分区；</li><li><code>swapon /dev/sdb1</code> 启用交换分区；</li><li><code>free</code> 查看加载状况；</li><li><code>swapoff /dev/sdb1</code> 关闭交换分区。</li></ol></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><code>/etc/passwd</code>文件和<code>/etc/shadow</code>文件分别存储当前系统中所有用户的信息和所有用户的密码信息</li><li><code>/etc/group</code>文件和<code>/etc/gshadow</code>文件分别存储当前系统中所有用户组的信息和所有用户组的密码信息</li></ul><h3 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li><p><code>useradd -g 组名称 用户名称</code> 在组内添加用户；</p></li><li><p><code>useradd -d /home/xxx 用户名称</code> 在指定目录添加组及用户；</p></li><li><p><code>usermod -c 注释信息 用户名称</code> 给该用户注释信息；</p></li><li><p><code>usermod -l 新用户名 旧用户名</code> 修改用户名称；</p></li><li><p><code>usermod -d /home/xxx 用户名称</code> 修改用户个人文件夹路径；</p></li><li><p><code>usermod -g 组名称 用户名称</code> 切换用户的用户组；</p></li><li><p><code>userdel 用户名称</code> 删除用户（不会删除个人文件夹）；</p></li><li><p><code>userdel -r 用户名称</code> 删除用户（包括个人文件夹）；</p><hr></li><li><p><code>touch /etc/nologin</code> 禁止root帐户以外的帐户进入（在/root下创建）；</p></li><li><p><code>passwd -l 用户名</code> 锁定帐户（使之不能使用）；</p></li><li><p><code>passwd -u 用户名</code> 解锁；</p></li><li><p><code>passwd -d 用户名</code> 无密码登录；</p></li><li><p><code>su 用户名称</code> 切换用户；</p></li><li><p><code>whoami</code> 显示当前登录用户；</p></li><li><p><code>id 用户名称</code> 显示指定用户名的用户信息；</p></li><li><p><code>groups 用户名称</code> 显示用户所在所有组；</p></li><li><p><code>chfn 用户名称</code> 设置用户资料；</p></li><li><p><code>finger 用户名称</code> 显示用户详细资料。</p></li></ul><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><ul><li><p><code>groupadd 用户组名称</code> 创建用户组；</p></li><li><p><code>groupadd -g 组编号 组名称</code> 创建用户组及编号；</p></li><li><p><code>groupmod -g 新组编号 组名称</code> 更改组编号；</p></li><li><p><code>groupmod -n 新组名称 旧组名称</code> 更改用户组名称；</p></li><li><p><code>groupdel 组名称</code> 删除用户组（注意：首先得删除组用户成员）；</p><hr></li><li><p><code>gpasswd -a 用户名 附属组1,附属组2</code> 将用户添加到附属组；</p></li><li><p><code>newgrp 附属组</code> 切换到附属组‘</p></li><li><p><code>gpasswd -d 用户名 附属组</code> 移出附属组；</p></li><li><p><code>useradd -g 主要组 -G 附属组1,附属组2</code> 添加到主要组同时添加到附属组；</p></li><li><p><code>gpasswd 组名称</code> 给用户组设置组密码。</p></li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="文件基本权限"><a href="#文件基本权限" class="headerlink" title="文件基本权限"></a>文件基本权限</h3><ul><li><p><code>chmod [选项] 模式 文件名</code> 修改权限</p><ul><li>选项：<kbd>-R</kbd>：表示递归</li><li>模式：<kbd>[ugoa] [+-=] [rwx]</kbd>：表示给指定身份分配权限；或者使用<kbd>[mode=421]</kbd>：来指定权限（推荐）</li></ul></li><li><p>权限对文件的作用：</p><ul><li><kbd>r</kbd>：读取文件内容（cat、more、head、tail）</li><li><kbd>w</kbd>：编辑、新增、修改文件内容（vi、vim、echo）【不包含删除文件！！！】</li><li><kbd>x</kbd>：可执行（最高权限）</li></ul></li><li><p>权限对目录的作用：</p><ul><li><kbd>r</kbd>：可以查询目录下的文件名（ls）</li><li><kbd>w</kbd>：具有修改目录结构的权限（最高权限）。新建、删除、重命名、剪切（touch、rm、mv、cp）</li><li><kbd>x</kbd>：可以进入目录（cd）</li><li>对目录来讲，一般赋予<kbd>0</kbd>：没有权限；<kbd>5</kbd>：r-x权限；<kbd>7</kbd>：rwx任何权限。</li></ul></li><li><p><code>chown [-R] 用户名 文件名</code> ：修改文件所有者。<kbd>-R</kbd> 表示联级。</p></li><li><p><code>chown [-R] 用户名:组名 文件名</code> ：同时修改文件所有者和所属组。</p></li><li><p><code>umask</code> ：查看默认权限。（配置文件目录：<code>/etc/profile</code> ）</p><p>默认是<kbd>0022</kbd> ，其中第一位0：表示文件特殊权限；剩余三位：表示文件默认权限。对于文件默认权限是<kbd>644</kbd>，最大权限是<kbd>666</kbd>；对于目录默认权限是<kbd>755</kbd>，最大权限是<kbd>777</kbd>.</p><p>计算方式：最大权限 - umask = 最终默认权限 （eg：666 - 022 = 644 ）</p></li></ul><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><h4 id="ACL权限"><a href="#ACL权限" class="headerlink" title="ACL权限"></a>ACL权限</h4><ul><li><p><code>dumpe2fs -h /dev/sda5</code> ：dumpe2fs命令是查询指定分区详细文件系统信息。<kbd>-h</kbd> 仅显示超级快中的信息，而不显示磁盘块组的详细信息。</p></li><li><p><code>mount -o remount,acl /</code>： <strong>临时开启</strong>分区ACL权限（根分区）</p></li><li><p><strong>永久开启</strong>分区ACL权限：</p><p>编辑<code>vi /etc/fstab</code> 文件，在磁盘格式名后加上<code>defaults,acl</code> （磁盘在<kbd>ext4</kbd> 格式下默认有ACL权限，在<kbd>xfs</kbd> 下没有），最后重新挂载文件系统或重启系统，使修改生效。</p></li><li><p><code>getfacl 文件名</code> ：查看ACL权限。</p><p><code>setfacl 选项 文件名</code> ：设定ACL权限。</p><p>选项：<kbd>-m</kbd>：设定acl权限；<kbd>-x</kbd>：删除指定的acl权限；<kbd>-b</kbd>：删除所有的acl权限；<kbd>-d</kbd>：设定默认acl权限；<kbd>-k</kbd>：删除默认acl权限；<kbd>-R</kbd>：递归设定acl权限。</p></li><li><p><code>setfacl -m u:用户名:权限 文件</code> ：给用户赋予权限；</p><p><code>setfacl -m g:组名:权限 文件</code> ：给组赋予权限；</p><p>注意：mask是最大有效权限。给用户赋予ACL权限后和mask相与后，才是真正权限。</p><p><code>setfacl -m m:权限 文件</code> ：设定mask权限值；</p><p><code>setfacl -x u:用户名 文件</code> ：删除指定用户的ACL权限；</p><p><code>setfacl -x g:组名 文件</code> ：删除指定组的ACL权限；</p><p><code>setfacl -b 文件</code> ：删除所有用户的ACL权限。</p></li><li><p>递归ACL权限：</p><p>父目录设定递归ACL权限时，所有子目录也有同样的ACL权限。</p><p><code>setfacl -m u:用户名:权限 -R 目录</code></p></li><li><p>默认ACL权限：</p><p>父目录设定默认ACL权限时，父目录中所有新建子文件都继承父目录权限。</p><p><code>setfacl -m d:u:用户名:权限 目录</code></p></li></ul><h4 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h4><ul><li><p>root把本来只能超级用户执行的命令赋予普通用户执行，sudo的操作对象是系统命令。</p></li><li><p>给普通用户赋予超级用户权限：</p><ol><li><p><code>vi sodu</code> ：编辑文件，实际修改的是<code>/etc/sudoers</code> 文件；</p></li><li><p>在文件中添加赋予命令的对象及命令：</p><p><code>user1 ALL=(ALL) /sbin/shutdown -r now</code> ：（用户名 被管理主机的IP = (可使用的身份) 授权命令[绝对路径]）</p><p><code>%wheel ALL=(ALL) ALL</code> ：给组赋予超级用户权限。</p></li></ol></li><li><p>赋予普通用户可以添加其他用户：</p><ol><li><code>vi sodu</code> ：编辑文件；</li><li><code>user1 ALL=/usr/sbin/useradd</code> ：赋予添加用户权限；</li><li><code>user1 ALL=/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd &quot;&quot;, !/usr/bin/passwd root</code> ：使普通用户无法查看和修改root密码。</li></ol></li></ul><h4 id="不可改变位权限（chattr）"><a href="#不可改变位权限（chattr）" class="headerlink" title="不可改变位权限（chattr）"></a>不可改变位权限（chattr）</h4><ul><li><p><code>chattr [+-=] [ai] 文件或目录</code>： <kbd>+</kbd>：增加权限；<kbd>-</kbd>：删除权限；<kbd>=</kbd>：等于某权限；</p><p><kbd>i</kbd>：如果对文件设置<kbd>i</kbd>属性，那么不允许对<strong>文件</strong>进行删除、改名、也不能添加和修改数据；如果对<strong>目录</strong>设置<kbd>i</kbd>属性，那么<em>只能修改</em>目录下文件的数据，但不允许建立和删除文件。</p><p><kbd>a</kbd>：如果对文件设置<kbd>a</kbd>属性，那么只能在<strong>文件</strong>中<em>添加数据</em>，但是不能删除也不能修改数据；如果对<strong>目录</strong>设置a属性，那么<em>只允许在目录中建立和修改文件</em>，但不允许删除。</p></li><li><p><code>lsattr [ad] 文件名</code> 查看文件系统属性。</p><p><kbd>a</kbd>：显示所有文件和目录；</p><p><kbd>d</kbd>：若目标是目录，仅列出目录本身的属性，而不是子文件的。</p></li></ul><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="常用网络协议端口号"><a href="#常用网络协议端口号" class="headerlink" title="常用网络协议端口号"></a>常用网络协议端口号</h3><table><thead><tr><th>协议</th><th>端口号</th></tr></thead><tbody><tr><td>FTP（文件传输协议）</td><td>20/21</td></tr><tr><td>SSH（安全shell协议）</td><td>22</td></tr><tr><td>DNS（域名系统）</td><td>53</td></tr><tr><td>http（超文本传输协议）</td><td>80</td></tr><tr><td>SMTP（简单邮件传输协议）</td><td>25</td></tr><tr><td>POP3（邮件协议3代）</td><td>110</td></tr></tbody></table><ul><li><code>netstat -an</code> ：查看本机启用的端口。<kbd>a</kbd>：查看所有连接和监听端口；<kbd>n</kbd>：显示IP地址和端口号，不显示域名和服务器。</li></ul><h3 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h3><ol><li><p><kbd>ifconfig命令</kbd>：查看与配置网络状态命令（<strong>临时配置</strong>）</p><p><code>ifconfig etho 192.128.0.200 netmask 255.255.255.0</code> ：<strong>临时设置</strong>etho网卡的IP地址与子网掩码。</p></li><li><p>修改网络配置文件：</p><ul><li><code>vi /etc/sysconfig/network-scripts/ifcfg-etho</code> ：编辑配置etho网卡的IP；</li></ul><p><img src="http://imgs.xiongchang.vip/img_20.jpg" alt="http://imgs.xiongchang.vip/img_20.jpg" style="zoom:80%"></p><ul><li><p><code>vi /tec/sysconfig/network</code> ：主机名文件。</p><p><kbd>NETWORKING=yes</kbd>：网络打开</p><p><kbd>HOSTNAME=localhost.localdomain</kbd>：主机名</p><p><code>hostname [主机名]</code> ：查看与临时设置主机名命令。</p></li><li><p><code>vi /etc/resolv.conf</code> ：DNS配置文件</p><p><kbd>name server 119.29.29.29</kbd>：DNS</p><p><kbd>search localhost</kbd></p></li></ul></li></ol><h3 id="网络环境查看命令"><a href="#网络环境查看命令" class="headerlink" title="网络环境查看命令"></a>网络环境查看命令</h3><ul><li><p><code>ifconfig</code> ：查看与配置网络状态命令（IP、子网掩码）</p></li><li><p><code>ifdown 网卡设备名</code> ：禁用该网卡设备</p><p><code>ifup 网卡设备名</code> ：启用该网卡设备</p></li><li><p><code>netstat [-tunla]</code> ：查询网络状态</p><p><kbd>t</kbd>：列出TCP协议端口；<kbd>u</kbd>：列出UDP协议端口；<kbd>n</kbd>：不使用域名与服务名，而使用IP地址和端口号；<kbd>l</kbd>：仅列出在监听状态的网络服务；<kbd>a</kbd>：列出所有的网络连接。</p></li><li><p><code>route -n</code> ：查看路由列表（可看到网关）≈ <code>netstat -rn</code></p><p><code>route add/del default gw 192.18.1.1</code> ：<strong>临时</strong>设定/删除网关</p></li><li><p><code>nslookup [主机名或IP]</code> ：进行域名与IP地址解析</p><p><code>nslookup 回车 server</code> ：查看默认DNS（使用 <code>exit</code> 退出）</p></li></ul><h3 id="网络测试命令"><a href="#网络测试命令" class="headerlink" title="网络测试命令"></a>网络测试命令</h3><ul><li><code>ping [-c 次数] IP或域名</code> ：探测指定IP或域名的网络状况。使用<kbd>-c 次数</kbd> 表示指定ping包的次数。</li><li><code>telnet [域名或IP] [端口]</code> ：远程管理与端口探测命令</li><li><code>traceroute [-n] IP或域名</code> ：路由跟踪命令。使用<kbd>-n</kbd> 表示使用IP，不使用域名，速度会更快。</li><li><code>wget 下载文件的链接</code> ：下载文件命令</li></ul><h2 id="软件安装管理"><a href="#软件安装管理" class="headerlink" title="软件安装管理"></a>软件安装管理</h2><h3 id="RPM命令安装"><a href="#RPM命令安装" class="headerlink" title="RPM命令安装"></a>RPM命令安装</h3><ul><li><p>RPM 包在系统光盘中。RPM包的依赖性有：树型依赖、环形依赖、模块依赖。</p></li><li><p>操作没有安装的包需要使用包全名（安装、升级）</p><p>操作已经安装了的包用包名即可（卸载、查询）</p></li><li><p><code>rpm [-ivh/-- nodeps] 包全名</code> 安装rpm包（需要在<code>/mnt/cdrom/packages</code> 下进行）。<kbd>-i</kbd>：安装；<kbd>-v</kbd>：显示详细信息；<kbd>-h</kbd>：显示进度；<kbd>– nodeps</kbd>：不检测依赖性；</p></li><li><p>使用rpm命令安装Apache时，<kbd>httpd-</kbd> 下的包全部需要安装，并且解决依赖，其他软件同理。</p></li><li><p><code>rpm -Uvh 包全名</code> ：rpm包升级。<kbd>-U</kbd>：升级</p></li><li><p><code>rpm -e 包名</code> ：卸载rpm包。<kbd>-e</kbd>：卸载</p></li><li><p><code>rpm -q 包名</code> ：查询包是否安装。<kbd>-q</kbd>：查询</p><p><code>rpm -qa</code> ：查询所有已经安装的rpm包。<kbd>-a</kbd>：所有</p><p><code>rpm -qa | grep httpd</code> 查询所有已安装包中含有 httpd 字段的包</p><p><code>rpm -q[i/p] 包名</code> 查询包的详细信息。<kbd>i</kbd>：查询软件包信息；<kbd>p</kbd>：查询未安装包信息</p><p><code>rpm -q[l/p] 包名</code> 查询包中文件安装的位置。<kbd>l</kbd>：列表；<kbd>p</kbd>：查询未安装包信息</p><p><code>rpm -qf 系统文件名</code> 查询系统文件属于哪个包。<kbd>f</kbd>：查询文件属于哪个包</p><p><code>rpm -q[R/p] 包名</code> 查询rpm包依赖性。<kbd>R</kbd>：查询包依赖性；<kbd>p</kbd>：查询未安装包信息</p></li><li><p><code>rpm -V 已安装的包名</code> rpm包检验。<kbd>-V</kbd>：校验指定rpm包。</p><p><img src="http://imgs.xiongchang.vip/img_21.jpg" alt="http://imgs.xiongchang.vip/img_21.jpg"></p><ul><li><p>验证内容中的前八个信息（S.5….T.）的具体内容如下：</p><p><kbd>S</kbd>：文件大小是否改变；</p><p><kbd>M</kbd>：文件的类型或文件的权限（rwx）是否被改变；</p><p><kbd>5</kbd>：文件MD5校验和是否改变（可以看成文件的内容是否改变）；</p><p><kbd>D</kbd>：设备的主从代码是否改变；</p><p><kbd>L</kbd>：文件路径是否改变；</p><p><kbd>U</kbd>：文件的属主（所有者）是否改变；</p><p><kbd>G</kbd>：文件的属组是否改变；</p><p><kbd>T</kbd>：文件的修改时间是否改变；</p></li><li><p>文件类型（c）：</p><p><kbd>c</kbd>：配置文件；</p><p><kbd>d</kbd>：普通文档；</p><p><kbd>g</kbd>：“鬼”文件，很少见，就是该文件不应该被这个rpm包包含；</p><p><kbd>L</kbd>：授权文件；</p><p><kbd>r</kbd>：描述文件；</p></li></ul></li><li><p><code>cpio [-idv] &lt; [文件/设备]</code> 提取文件。<kbd>i</kbd>：copy-in 模式，还原；<kbd>d</kbd>：还原时自动新建目录；<kbd>v</kbd>：显示还原过程；</p></li><li><p><code>rpm2cpio 包全名 | cpio -idv .文件绝对路径</code> 在rpm包中提取文件。<kbd>-rpm2cpio</kbd>：将rpm包转换为cpio格式命令；<kbd>cpio</kbd>：一个标准工具，用于创建软件档案文件，和从档案文件中提取文件；</p></li></ul><h3 id="Yum在线安装"><a href="#Yum在线安装" class="headerlink" title="Yum在线安装"></a>Yum在线安装</h3><ul><li><p>搭建本地yum源</p><ol><li><p>加载光盘；</p></li><li><p><code>mv CentOS-Base.repo CentOS-Base.repo.bak</code> 使 CentOS-Base.repo 失效；</p></li><li><p><code>vi CentOS-Media.repo</code> 编辑光盘yum源；</p><p><img src="http://imgs.xiongchang.vip/img_22.png" alt="http://imgs.xiongchang.vip/img_22.png" style="zoom:80%"></p></li><li><p><code>yum list</code> 查看yum源的安装包。（验证是否搭建成功）</p></li></ol></li><li><p>查询：</p><p><code>yum list</code> 查看yum源的安装包。（验证是否搭建成功）</p><p><code>yum search 关键字</code> 搜索所有和关键字相关的包</p></li><li><p>安装：</p><p><code>yum -y install 包名</code> 安装对应包。<kbd>install</kbd>：安装；<kbd>-y</kbd>：自动回答 yes</p></li><li><p>升级：</p><p><code>yum -y update 包名</code> 升级对应包</p></li><li><p>卸载：</p><p><code>yum -y remove 包名</code> 卸载对应包（最好不要用yum卸载）。推荐最小化安装，用什么安装什么，尽量不卸载。</p></li><li><p>yum软件组管理命令：</p><p><code>yum grouplist</code> 列出所有可用的软件组列表；</p><p><code>yum groupinstall 软件组名</code> 安装指定软件组（组名是英文）；</p><p><code>yum groupremove 软件组名</code> 卸载软件组；</p></li></ul><h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><ul><li><p>安装在指定目录：一般是<code>/usr/local/软件名/</code></p></li><li><p>安装步骤（安装Apache为例）：</p><ol><li>安装<kbd>gcc</kbd>，下载Apache源码包（可以在Windows系统下载后，通过WinSCP发送到Linux）</li><li>解压到<code>/usr/local/src/</code>目录下；</li><li>进入解压目录；</li><li><code>./configure -prefix=/usr/local/apache2</code> 软件配置与检查，并指定安装命令；</li><li><code>make</code> 编译源码包。（若报错，执行<code>make clean</code> ，用来还原，并删除缓存）；</li><li><code>make install</code></li></ol></li><li><p>防火墙：</p><p><code>service firewalld start/stop/status</code> 临时开启/关闭/查看防火墙。</p><p>关闭防火墙后，可在Windows系统浏览器上输入Linux系统的IP可测试是否安装成功（当然得同时启动httpd）</p></li></ul><h3 id="脚本安装包"><a href="#脚本安装包" class="headerlink" title="脚本安装包"></a>脚本安装包</h3><ol><li>准备工作：关闭RPM包安装的httpd和MySQL，保证yum源正常使用，关闭SELinux和防火墙。</li><li>下载脚本安装包：<a href="http://lnmp.org/install.html" target="_blank" rel="external">下载地址</a></li><li>用WinSCP工具发送到Linux</li><li>解压，并进入目录。</li><li><code>./cenos.sh</code> 安装（不同版本，运行安装文件可能不同）</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;VIM文本编辑器&quot;&gt;&lt;a href=&quot;#VIM文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;VIM文本编辑器&quot;&gt;&lt;/a&gt;VIM文本编辑器&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;VIM对VI的提升：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;多级撤销；&lt;/li&gt;&lt;li&gt;跨平台运行；&lt;/li&gt;&lt;li&gt;语法高亮；&lt;/li&gt;&lt;li&gt;支持图形界面。
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/tags/Linux/"/>
    
      <category term="常用命令" scheme="http://blog.xiongchang.vip/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>CSS3常用属性</title>
    <link href="http://blog.xiongchang.vip/CSS3%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.html"/>
    <id>http://blog.xiongchang.vip/CSS3常用属性.html</id>
    <published>2019-11-14T09:23:18.000Z</published>
    <updated>2019-11-16T08:39:15.227Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --><h2 id="CSS3-常用属性"><a href="#CSS3-常用属性" class="headerlink" title="CSS3 常用属性"></a>CSS3 常用属性</h2><ul><li>不同的浏览器可能需要在属性前面添加前缀：<ul><li><kbd>-ms-</kbd>：IE 9</li><li><kbd>-moz-</kbd>：Firefox</li><li><kbd>-webkit-</kbd>：Safari and Chrome</li><li><kbd>-o-：</kbd>：Opera<a id="more"></a></li></ul></li></ul><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-image</td><td>设置所有 <code>border-image-*</code> 属性的简写属性</td></tr><tr><td>border-radius</td><td>设置所有四个 <code>border-*-radius</code>属性的简写属性</td></tr><tr><td>box-shadow</td><td>向方框添加一个或多个阴影</td></tr></tbody></table><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>background-clip</td><td>规定背景的绘制区域(<code>border-box/padding-box/content-box</code>)</td></tr><tr><td>background-origin</td><td>规定背景图片的定位区域(<code>border-box/padding-box/content-box</code>)</td></tr><tr><td>background-size</td><td>规定背景图片的尺寸</td></tr><tr><td>opacity</td><td>配置元素的不透明度</td></tr></tbody></table><h3 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>text-overflow</td><td>规定当文本溢出包含元素时发生的事情(<code>clip/ellipsis/string</code>)</td></tr><tr><td>text-shadow</td><td>向文本添加阴影</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则(<code>normal/break-all/keep-all</code>)</td></tr><tr><td>work-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行(<code>normal/break-word</code>)</td></tr><tr><td>opacity</td><td>配置元素的不透明度</td></tr></tbody></table><h3 id="2D-Transform-方法"><a href="#2D-Transform-方法" class="headerlink" title="2D Transform 方法"></a>2D Transform 方法</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transform:translate(<em>x</em>,<em>y</em>)</td><td>定义 2D 转换，沿着 X 和 Y 轴移动元素</td></tr><tr><td>transform:scale(<em>x</em>,<em>y</em>)</td><td>定义 2D 缩放转换，改变元素的宽度和高度</td></tr><tr><td>transform:rotate(<em>angle</em>)</td><td>定义 2D 旋转，在参数中规定角度</td></tr><tr><td>transform:skew(<em>x-angle</em>,<em>y-angle</em>)</td><td>定义 2D 倾斜转换，沿着 X 和 Y 轴</td></tr><tr><td>transform:matrix(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>定义 2D 转换，使用六个值的矩阵</td></tr></tbody></table><ul><li><code>Internet Explorer 10</code>、<code>Firefox</code>以及 <code>Opera</code> 支持 transform 属性。</li><li><code>Chrome</code> 和 <code>Safari</code> 需要前缀 <kbd>-webkit-</kbd>。</li><li><code>Internet Explorer 9</code> 需要前缀 <kbd>-ms-</kbd>。</li></ul><h3 id="3D-Transform-方法"><a href="#3D-Transform-方法" class="headerlink" title="3D Transform 方法"></a>3D Transform 方法</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transform</td><td>向元素应用 2D 或 3D 转换</td></tr><tr><td>transform-origin</td><td>允许你改变被转换元素的位置</td></tr><tr><td>backface-visibility</td><td>定义元素在不面对屏幕时是否可见(<code>visible/hidden</code>)</td></tr><tr><td>matrix3d(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>定义 3D 转换，使用 16 个值的 4x4 矩阵</td></tr><tr><td>translate3d(<em>x</em>,<em>y</em>,<em>z</em>)</td><td>定义 3D 转化</td></tr><tr><td>scale3d(<em>x</em>,<em>y</em>,<em>z</em>)</td><td>定义 3D 缩放转换</td></tr><tr><td>rotate3d(<em>x</em>,<em>y</em>,<em>z</em>,<em>angle</em>)</td><td>定义 3D 旋转</td></tr><tr><td>perspective(<em>n</em>)</td><td>定义 3D 转换元素的透视视图</td></tr></tbody></table><ul><li><code>Internet Explorer 10</code> 和 <code>Firefox</code> 支持 <strong>3D 转换</strong>。</li><li><code>Chrome</code> 和 <code>Safari</code> 需要前缀 <kbd>-webkit-</kbd>。</li><li><code>Opera</code> 仍然不支持 3D 转换（它只支持 <strong>2D 转换</strong>）。</li></ul><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0</td></tr></tbody></table><ul><li><code>Safari</code> 、 <code>Chrome 25</code> 以及更早的版本，需要前缀<kbd>-webkit-</kbd>。</li><li><code>Internet Explorer 9</code> 以及更早的版本，不支持 transition 属性 。</li></ul><h3 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。(<code>normal/alternate</code>)</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。(<code>running/paused</code>)</td></tr><tr><td>animation-fill-mode</td><td>规定对象动画时间之外的状态</td></tr></tbody></table><ul><li><code>Internet Explorer 10</code>、<code>Firefox</code> 以及<code>Opera</code>支持 <code>@keyframes</code> 规则和 animation 属性。</li><li><code>Chrome</code> 和 <code>Safari</code> 需要前缀<kbd>-webkit-</kbd>。</li></ul><h3 id="多列属性"><a href="#多列属性" class="headerlink" title="多列属性"></a>多列属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column-count</td><td>规定元素应该被分隔的列数</td></tr><tr><td>column-fill</td><td>规定如何填充列</td></tr><tr><td>column-gap</td><td>规定列之间的间隔</td></tr><tr><td>column-rule</td><td>设置所有 column-rule-* 属性的简写属性</td></tr><tr><td>column-rule-color</td><td>规定列之间规则的颜色</td></tr><tr><td>column-rule-style</td><td>规定列之间规则的样式</td></tr><tr><td>column-rule-width</td><td>规定列之间规则的宽度</td></tr><tr><td>column-span</td><td>规定元素应该横跨的列数</td></tr><tr><td>column-width</td><td>规定列的宽度</td></tr><tr><td>columns</td><td>规定设置 <code>column-width</code> 和 <code>column-count</code> 的简写属性</td></tr></tbody></table><ul><li><code>Internet Explorer 10</code> 和<code>Opera</code>支持多列属性。</li><li><code>Firefox</code> 需要前缀 <kbd>-moz-</kbd>。</li><li><code>Chrome</code> 和 <code>Safari</code> 需要前缀<kbd> -webkit-</kbd>。</li></ul><h3 id="用户界面属性"><a href="#用户界面属性" class="headerlink" title="用户界面属性"></a>用户界面属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>box-sizing</td><td>允许您以确切的方式定义适应某个区域的具体内容</td></tr><tr><td>outline-offset</td><td>对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</td></tr><tr><td>resize</td><td>规定是否可由用户对元素的尺寸进行调整</td></tr></tbody></table><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><ul><li>线性渐变：<code>background-image:linear-gradient(to bottom,#FFFFFF,#00FF00);</code></li><li>辐射渐变：<code>background-image:radial-gradient(#FFFFFF,#00FF00);</code></li></ul><h3 id="移动布局"><a href="#移动布局" class="headerlink" title="移动布局"></a>移动布局</h3><ul><li><p>使用<strong>@media</strong>进行移动布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">1024px</span>) &#123;</div><div class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-id">#wrapper</span>&#123;<span class="attribute">width</span>: auto;&#125;</div><div class="line"><span class="selector-tag">nav</span>&#123;</div><div class="line"><span class="attribute">float</span>: none;</div><div class="line"><span class="attribute">width</span>: auto;</div><div class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">10px</span>;</div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span>&#123;<span class="attribute">display</span>: inline;&#125;</div><div class="line"><span class="selector-tag">main</span>&#123;</div><div class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当页面移动到1024px大小时，运行此样式。</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;CSS3-常用属性&quot;&gt;&lt;a href=&quot;#CSS3-常用属性&quot; class=&quot;headerlink&quot; title=&quot;CSS3 常用属性&quot;&gt;&lt;/a&gt;CSS3 常用属性&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;不同的浏览器可能需要在属性前面添加前缀：&lt;ul&gt;&lt;li&gt;&lt;kbd&gt;-ms-&lt;/kbd&gt;：IE 9&lt;/li&gt;&lt;li&gt;&lt;kbd&gt;-moz-&lt;/kbd&gt;：Firefox&lt;/li&gt;&lt;li&gt;&lt;kbd&gt;-webkit-&lt;/kbd&gt;：Safari and Chrome&lt;/li&gt;&lt;li&gt;&lt;kbd&gt;-o-：&lt;/kbd&gt;：Opera
    
    </summary>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/categories/html/"/>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/tags/html/"/>
    
      <category term="css" scheme="http://blog.xiongchang.vip/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://blog.xiongchang.vip/CSS%E5%9F%BA%E7%A1%80.html"/>
    <id>http://blog.xiongchang.vip/CSS基础.html</id>
    <published>2019-11-14T09:17:23.000Z</published>
    <updated>2019-11-16T00:07:18.251Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --><h2 id="CSS-基础"><a href="#CSS-基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h2><ul><li><code>&lt;link rel=&quot;icon&quot; href=&quot;../../img/favicon.ico&quot; type=&quot;image/ico&quot; /&gt;</code> 用来设置网页图标。</li></ul><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性<a id="more"></a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>background</td><td>简写属性，作用是将背景属性设置在一个声明中</td></tr><tr><td>background-attachment</td><td>背景图像是否固定或者随着页面的其余部分滚动（<code>scroll/fixed/inherit</code>）</td></tr><tr><td>background-color</td><td>设置元素的背景颜色</td></tr><tr><td>background-image</td><td>把图像设置为背景</td></tr><tr><td>background-position</td><td>设置背景图像的起始位置(<code>top/bottom/left/right/center/百分比/像素</code>)</td></tr><tr><td>background-repeat</td><td>设置背景图像是否及如何重复(<code>no-repeat/repeat/repeat-x/repeat-y</code>)</td></tr></tbody></table><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td></tr><tr><td>direction</td><td>文本方向（<code>ltr/rtl/inherit</code>）</td></tr><tr><td>line-height</td><td>行高</td></tr><tr><td>letter-spacing</td><td>字符间距</td></tr><tr><td>word-spacing</td><td>字间距</td></tr><tr><td>white-space</td><td>元素中空白的处理方式(<code>normal/nowrap/pre-line/pre/pre-wrap</code>)</td></tr><tr><td>text-align</td><td>文本对齐方式(<code>left/right/center/justify/inherit</code>)</td></tr><tr><td>text-indent</td><td>缩进元素中文本的首行</td></tr><tr><td>text-decoration</td><td>向文本添加修饰(<code>none/underline/overline/line-through/blink/inherit</code>)</td></tr><tr><td>text-transform</td><td>控制元素中的字母(<code>none/capitalize/uppercase/lowercase/inherit</code>)</td></tr></tbody></table><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>font</td><td>简写属性。作用是把所有针对字体的属性设置在一个声明中。</td></tr><tr><td>font-family</td><td>字体系列</td></tr><tr><td>font-size</td><td>字体的尺寸</td></tr><tr><td>font-style</td><td>字体风格(<code>normal/italic/oblique/inherit</code>)</td></tr><tr><td>font-variant</td><td>以小型大写字体或者正常字体显示文本</td></tr><tr><td>font-weight</td><td>字体的粗细</td></tr></tbody></table><h3 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>a:link</td><td>普通的、未被访问的链接</td></tr><tr><td>a:visited</td><td>用户已访问的链接</td></tr><tr><td>a:hover</td><td>鼠标指针位于链接的上方</td></tr><tr><td>a:active</td><td>链接被点击的时刻</td></tr></tbody></table><ul><li><code>a:hover</code>必须位于 <code>a:link</code> 和 <code>a:visited</code> 之后 ;</li><li><code>a:active</code>必须位于 <code>a:hover</code>之后 。</li></ul><h3 id="列表属性-list"><a href="#列表属性-list" class="headerlink" title="列表属性(list)"></a>列表属性(list)</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>list-style</td><td>简写属性。用于把所有用于列表的属性设置于一个声明中。</td></tr><tr><td>list-style-image</td><td>将图象设置为列表项标志</td></tr><tr><td>list-style-position</td><td>设置列表中列表项标志的位置(<code>inside/outside/inherit</code>)</td></tr><tr><td>list-style-type</td><td>设置列表项标志的类型</td></tr></tbody></table><h3 id="表格属性-table"><a href="#表格属性-table" class="headerlink" title="表格属性(table)"></a>表格属性(table)</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-collapse</td><td>设置是否把表格边框合并为单一的边框（<code>separate/collapse</code>）</td></tr><tr><td>border-spacing</td><td>设置分隔单元格边框的距离</td></tr><tr><td>caption-side</td><td>设置表格标题的位置（<code>top/bottom</code>）</td></tr><tr><td>empty-cells</td><td>设置是否显示表格中的空单元格（<code>hide/show</code>）</td></tr><tr><td>table-layout</td><td>设置显示单元、行和列的算法（<code>automatic/fixed/inherit</code>）</td></tr><tr><td>text-align</td><td>设置水平对齐方式</td></tr><tr><td>vertical-align</td><td>设置垂直对齐方式</td></tr></tbody></table><h3 id="轮廓属性"><a href="#轮廓属性" class="headerlink" title="轮廓属性"></a>轮廓属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>outline</td><td>在一个声明中设置所有的轮廓属性</td></tr><tr><td>outline-color</td><td>轮廓的颜色</td></tr><tr><td>outline-style</td><td>轮廓的样式</td></tr><tr><td>outline-width</td><td>轮廓的宽度</td></tr></tbody></table><h3 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>把元素放置到一个静态的、相对的、绝对的、或固定的位置中</td></tr><tr><td>top</td><td>上外边距的偏移量</td></tr><tr><td>right</td><td>右外边距的偏移量</td></tr><tr><td>bottom</td><td>下外边距的偏移量</td></tr><tr><td>left</td><td>左外边距的偏移量</td></tr><tr><td>overflow</td><td>设置当元素的内容溢出其区域时发生的事情(<code>visible/hidden/scroll/auto</code>)</td></tr><tr><td>vertical-align</td><td>设置元素的垂直对齐方式</td></tr><tr><td>z-index</td><td>设置元素的堆叠顺序</td></tr><tr><td>clip</td><td>设置元素的形状（<code>shape</code>）</td></tr></tbody></table><p><kbd>position</kbd> 属性值:</p><table><thead><tr><th>position 属性值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>绝对定位，相对于父元素</td></tr><tr><td>relative</td><td>相对定位，相对于该元素移动前的位置</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口本身</td></tr></tbody></table><h3 id="浮动属性"><a href="#浮动属性" class="headerlink" title="浮动属性"></a>浮动属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>float</td><td>定义元素在哪个方向浮动（<code>right/left/none</code>）</td></tr><tr><td>clear</td><td>规定元素的哪一侧不允许其他浮动元素(<code>right/left/both/none</code>)</td></tr></tbody></table><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>:first-letter</td><td>向文本的第一个字母添加特殊样式</td></tr><tr><td>:first-line</td><td>向文本的首行添加特殊样式</td></tr><tr><td>:before</td><td>在元素之前添加内容</td></tr><tr><td>:after</td><td>在元素之后添加内容</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;CSS-基础&quot;&gt;&lt;a href=&quot;#CSS-基础&quot; class=&quot;headerlink&quot; title=&quot;CSS 基础&quot;&gt;&lt;/a&gt;CSS 基础&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;icon&amp;quot; href=&amp;quot;../../img/favicon.ico&amp;quot; type=&amp;quot;image/ico&amp;quot; /&amp;gt;&lt;/code&gt; 用来设置网页图标。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;背景属性&quot;&gt;&lt;a href=&quot;#背景属性&quot; class=&quot;headerlink&quot; title=&quot;背景属性&quot;&gt;&lt;/a&gt;背景属性
    
    </summary>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/categories/html/"/>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/tags/html/"/>
    
      <category term="css" scheme="http://blog.xiongchang.vip/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>《SpringBoot实战》</title>
    <link href="http://blog.xiongchang.vip/%E3%80%8ASpringBoot%E5%AE%9E%E6%88%98%E3%80%8B.html"/>
    <id>http://blog.xiongchang.vip/《SpringBoot实战》.html</id>
    <published>2019-11-11T12:38:59.000Z</published>
    <updated>2019-11-19T01:12:21.508Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h1 id="Spring-4-x"><a href="#Spring-4-x" class="headerlink" title="Spring 4.x"></a>Spring 4.x</h1><h2 id="Spring-基础"><a href="#Spring-基础" class="headerlink" title="Spring 基础"></a>Spring 基础</h2><h3 id="Spring框架本身有四大原则："><a href="#Spring框架本身有四大原则：" class="headerlink" title="Spring框架本身有四大原则："></a>Spring框架本身有<strong>四大原则</strong>：</h3><ol><li>使用POJO进行轻量级和最小侵入式开发；</li><li>通过依赖注入和通过接口编程实现解耦；</li><li>通过AOP和默认习惯进行声明式编程；<a id="more"></a></li><li>使用AOP和模板减少模式化编程。</li></ol><h3 id="声明Bean-的注解："><a href="#声明Bean-的注解：" class="headerlink" title="声明Bean 的注解："></a>声明Bean 的注解：</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>没有明确的角色</td></tr><tr><td>@Repository</td><td>在数据访问层（DAO层）使用</td></tr><tr><td>@Service</td><td>在业务逻辑层（Service层）使用</td></tr><tr><td>@Controller</td><td>在展现层（Controller层）使用</td></tr></tbody></table><ul><li>@Component、@Repository、@Service、@Controller四个注解是等效的，可根据需要使用。</li></ul><h3 id="注入Bean-的注解："><a href="#注入Bean-的注解：" class="headerlink" title="注入Bean 的注解："></a>注入Bean 的注解：</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Autowired</td><td>Spring提供的注解</td></tr><tr><td>@Inject</td><td>JSR-330 提供的注解</td></tr><tr><td>@Resource</td><td>JSR-250 提供的注解</td></tr></tbody></table><ul><li>@Autowired、@Inject、@Resource 可注解在<strong>set方法</strong>或者属性上，且三个注解等效。</li></ul><h3 id="Java-配置"><a href="#Java-配置" class="headerlink" title="Java 配置"></a>Java 配置</h3><ul><li><p>Java配置是Spring 4.x 和Spring Boot 推荐的配置方式，可以完全代替xml配置。</p></li><li><p>Java配置通过@Configuration和@Bean来实现：</p></li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>声明当前是个配置类，相当于Spring配置的xml文件</td></tr><tr><td>@Bean</td><td>注解在方法上，声明当前方法的返回值是一个Bean</td></tr></tbody></table><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li><p>AOP：面向切面编程。目的是为了解耦。AOP可以让一组类共享相同的行为。在OOP中只能通过继承类和实现接口来使代码的耦合度增强，且类的继承是单继承，阻碍了更多行为添加到一组类上，AOP弥补了OOP的不足。</p></li><li><p>Spring支持AspectJ的注解式切面编程：</p></li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Aspect</td><td>声明是一个切面</td></tr><tr><td>@After</td><td>声明一个建言</td></tr><tr><td>@Before</td><td>声明一个建言</td></tr><tr><td>@Around</td><td>声明一个建言</td></tr><tr><td>@PointCut</td><td>声明切点</td></tr><tr><td>@EnableAspectJAutoProxy</td><td>开启Spring对AspectJ代理的支持</td></tr></tbody></table><ul><li>@After、@Before、@Around 定义建言（advice），可直接将拦截规则（切点）作为参数。为使切点复用，可以使用@PointCut 专门定义拦截规则，然后在@After、@Before、@Around 的参数中调用。</li></ul><h2 id="Spring-常用配置"><a href="#Spring-常用配置" class="headerlink" title="Spring 常用配置"></a>Spring 常用配置</h2><h3 id="Bean-的-Scope"><a href="#Bean-的-Scope" class="headerlink" title="Bean 的 Scope"></a>Bean 的 Scope</h3><ul><li><p>Scope描述的是Spring容器如何新建Bean的实例的。</p></li><li><p>@Scope注解属性：</p></li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Singleton (默认)</td><td>一个Spring容器只有一个Bean的实例，全容器共享一个实例</td></tr><tr><td>Prototype</td><td>每次调用新建一个实例</td></tr><tr><td>Request</td><td>Web项目中，给每个http request 新建一个Bean实例</td></tr><tr><td>Session</td><td>Web项目中，给每个http session 新建一个Bean实例</td></tr><tr><td>GlobalSession</td><td>只有在portal应用中有用，给每个global http session 新建一个Bean实例</td></tr></tbody></table><h3 id="Spring-EL-和资源调用"><a href="#Spring-EL-和资源调用" class="headerlink" title="Spring EL 和资源调用"></a>Spring EL 和资源调用</h3><ul><li><p>Spring EL-Spring 表达式语言，支持在xml和注解中使用表达式，类似于JSP的EL表达式语言。</p></li><li><p>可以使用Spring EL表达式语言实现资源的注入（包含普通文件、网址、配置文件、系统环境变量、属性等）。</p></li><li><p>主要是在<strong>@Value</strong>的参数中进行注解：</p></li></ul><table><thead><tr><th>注入的资源</th><th>举例</th></tr></thead><tbody><tr><td>注入普通字符</td><td>@Value(“ 字符 “)</td></tr><tr><td>注入操作系统属性</td><td>@Value(“#{ systemProperties [ ‘os.name’ ] }”)</td></tr><tr><td>注入表达式运算结果</td><td>@Value(“#{ T(java.lang.Math).random * 100.0 }”)</td></tr><tr><td>注入其他Bean的属性值</td><td>@Value(“#{ demoService.another }”)</td></tr><tr><td>注入文件的内容</td><td>@Value(“classpath:com/spring4/test.txt”)</td></tr><tr><td>注入网址的内容</td><td>@Value(“<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“)</td></tr><tr><td>注入配置文件</td><td>@Value(“${ book.name }”)</td></tr></tbody></table><p>注意：注入配置文件时，需要首先在配置类上面使用@PropertySource 注解指明配置文件路径，还需要配置一个PropertySourcesPlaceholderConfigurer 的Bean。</p><h3 id="Bean-的初始化和销毁"><a href="#Bean-的初始化和销毁" class="headerlink" title="Bean 的初始化和销毁"></a>Bean 的初始化和销毁</h3><ol><li><p>Java配置方式</p><p>在配置类中使用@Bean的 <strong>initMethod</strong> 和 <strong>destoryMethod</strong> 属性。</p><p>例如：<code>@Bean(initMethod=&quot;init&quot;,destoryMethod=&quot;destory&quot;)</code> 其中<code>init</code> 和<code>destory</code> 是对应的方法名。</p></li><li><p>注解配置方式</p><p>在初始化和销毁的方法上使用JSR-250的@PostConstruce和@PreDestory注解。</p><p>注意：需要添加JSR-250支持，即在pom.xml中添加<code>jsr250-api</code> 依赖包。</p></li></ol><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><ul><li><p>Profile 为在不同环境下使用不同配置提供支持。通过设定Environment的ActiveProfile来设定当前context需要使用的配置环境。在开发中使用@Profile注解类或者方法，达到在不同情况下选择实例化不同的Bean。</p></li><li><p>示例：</p><ul><li><p>Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBean</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String content;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DemoBean</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.content = content;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> content;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.content = content;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Profile配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</div><div class="line"><span class="meta">@Value</span>(<span class="string">"dev"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DemoBean <span class="title">devDemoBean</span><span class="params">(String text)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> DemoBean(text);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"pro"</span>)</div><div class="line"><span class="meta">@Value</span>(<span class="string">"pro"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DemoBean <span class="title">proDemoBean</span><span class="params">(String text)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> DemoBean(text);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 1. 创建对象</span></div><div class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</div><div class="line"><span class="comment">// 2. 选择环境</span></div><div class="line">context.getEnvironment().setActiveProfiles(<span class="string">"dev"</span>);</div><div class="line"><span class="comment">// 3. 注册配置文件</span></div><div class="line">context.register(ProfileConfig.class);</div><div class="line"><span class="comment">// 4. 刷新</span></div><div class="line">context.refresh();</div><div class="line"><span class="comment">// 5. 得到DemoBean对象</span></div><div class="line">DemoBean demoBean = context.getBean(DemoBean.class);</div><div class="line"><span class="comment">// 6. 打印输出</span></div><div class="line">System.out.println(demoBean.getContent());</div><div class="line"><span class="comment">// 7. 关闭AnnotationConfigApplicationContext对象</span></div><div class="line">context.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="事件（Application-Event）"><a href="#事件（Application-Event）" class="headerlink" title="事件（Application Event）"></a>事件（Application Event）</h3><ul><li>Spring 的事件需遵循以下流程：<ol><li>自定义事件：<ul><li>继承<strong>ApplicationEvent</strong>；</li></ul></li><li>定义事件监听器：<ul><li>实现<strong>ApplicationListener</strong>，并指定监听事件类型（泛型接口）；</li><li>使用<strong>onApplicationEvent</strong>方法对消息进行接收处理；</li></ul></li><li>使用容器发布事件：<ul><li>使用<strong>@Autowired</strong>注解来注入<strong>ApplicationContext</strong>用来发布事件；</li><li>使用<strong>ApplicationContext</strong>的<strong>publishEvent</strong>方法来发布。</li></ul></li></ol></li></ul><h2 id="Spring-高级话题"><a href="#Spring-高级话题" class="headerlink" title="Spring 高级话题"></a>Spring 高级话题</h2><h3 id="Spring-Aware"><a href="#Spring-Aware" class="headerlink" title="Spring Aware"></a>Spring Aware</h3><ul><li>Spring Aware 本是Spring设计用来框架内部使用的，但在实际开发过程中不可避免的使用到Spring容器本身的功能资源。若使用了Spring Aware，你的Bean将会和Spring框架耦合。</li></ul><table><thead><tr><th>Aware 接口</th><th>说明</th></tr></thead><tbody><tr><td>BeanNameAware</td><td>获得到容器中Bean名称</td></tr><tr><td>BeanFactoryAware</td><td>获得当前bean factory，这样可以调用容器的服务</td></tr><tr><td>ApplicationContextAware*</td><td>获得当前的application context，这样可以调用容器的服务</td></tr><tr><td>MessageSourceAware</td><td>获得message source，这样可以获得文本信息</td></tr><tr><td>ApplicationEventPublisherAware</td><td>应用事件发布器，可以发布事件</td></tr><tr><td>ResourceLoaderAware</td><td>获得资源加载器，可以获得外部资源文件</td></tr></tbody></table><p>ApplicationContext接口集成了MessageSource接口、ApplicationEventPublisher接口、ResourceLoader接口</p><ul><li>Spring Aware 的目的是为了让Bean 获得Spring容器的服务。</li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><p>Spring 通过任务执行器（TaskExecutor）来实现多线程和并发编程。</p></li><li><p>使用<strong>ThreadPoolTaskExecutor</strong>可实现一个基于线程池的TaskExecutor。</p></li><li><p>实际开发中一般是异步的，所以需要在<u>配置类</u>中通过<strong>@EnableAsync</strong> 开启对异步任务的支持，并通过在实际执行的<u>Bean 的方法</u>中使用<strong>@Async</strong> 注解来声明其是一个异步任务。</p></li><li><p>示例：</p><ul><li><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAsync</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.spring4.taskExecutor"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span></span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">ThreadPoolTaskExecutor taskExecutor=<span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">taskExecutor.setCorePoolSize(<span class="number">5</span>);</div><div class="line">taskExecutor.setMaxPoolSize(<span class="number">10</span>);</div><div class="line">taskExecutor.setQueueCapacity(<span class="number">25</span>);</div><div class="line">taskExecutor.initialize();</div><div class="line"><span class="keyword">return</span> taskExecutor;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Bean（任务执行类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskService</span> </span>&#123;</div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTask</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"执行异步任务A："</span>+i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTaskPlus</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"执行异步任务B："</span>+i);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(TaskExecutorConfig.class);</div><div class="line">  </div><div class="line">  AsyncTaskService taskService=context.getBean(AsyncTaskService.class);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</div><div class="line">  taskService.executeAsyncTask(i);</div><div class="line">  taskService.executeAsyncTaskPlus(i);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  context.close();</div><div class="line">  &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></li></ul><h3 id="计划（定时）任务"><a href="#计划（定时）任务" class="headerlink" title="计划（定时）任务"></a>计划（定时）任务</h3><ul><li><p>步骤：</p><ol><li>在配置类注解<strong>@EnableScheduling</strong> 来开启对计划任务的支持；</li><li>在要执行计划任务的方法上注解<strong>@Scheduled</strong>，声明这是一个计划任务。</li></ol></li><li><p><strong>@Scheduled</strong> 注解支持多种类型的计划任务，包含<strong>cron</strong>、<strong>fixDelay</strong>、<strong>fixRate</strong>等。</p></li></ul><table><thead><tr><th>属性</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>fixedRate</td><td>每隔固定时间执行</td><td>@Scheduled(fixedRate = 5000)</td></tr><tr><td>cron</td><td>按照指定时间执行（Linux定时写法格式）</td><td>@Scheduled(cron = “0 28 11 ? <em></em> “)</td></tr></tbody></table><h3 id="条件注解-Conditional"><a href="#条件注解-Conditional" class="headerlink" title="条件注解@Conditional"></a>条件注解@Conditional</h3><ul><li><p>基于条件的Bean的创建和之前的@Profile类似。但@Conditional更通用。</p></li><li><p>示例：</p><ol><li><p>判断条件定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsConditional</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> context.getEnvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Windows"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxConditional</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> context.getEnvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Linux"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>不同系统下的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListService</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsService</span> <span class="keyword">implements</span> <span class="title">ListService</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"dir"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxService</span> <span class="keyword">implements</span> <span class="title">ListService</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"ls"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.spring4.conditional"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalConfig</span> </span>&#123;</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Conditional</span>(WindowsConditional.class)</div><div class="line"><span class="function"><span class="keyword">public</span> ListService <span class="title">windowsService</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> WindowsService();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Conditional</span>(LinuxConditional.class)</div><div class="line"><span class="function"><span class="keyword">public</span> ListService <span class="title">linuxService</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> LinuxService();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过<strong>@Conditional</strong>注解，满足条件则实例化Bean。</p></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(ConditionalConfig.class);</div><div class="line">ListService listService=context.getBean(ListService.class);</div><div class="line"></div><div class="line">System.out.println(context.getEnvironment().getProperty(<span class="string">"os.name"</span>)+<span class="string">"系统下的列表命令是："</span>+listService.showListCmd());</div><div class="line"></div><div class="line">context.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Enable-注解"><a href="#Enable-注解" class="headerlink" title="@Enable* 注解"></a>@Enable* 注解</h3><ul><li>通过@Enable* 来开启一项功能的支持，从而避免配置大量的代码，降低使用难度。</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@EnableAspectJAutoProxy</td><td>开启对AspectJ自动代理的支持。(Spring)</td></tr><tr><td>@EnableAsync</td><td>开启异步方法的支持。(Spring)</td></tr><tr><td>@EnableScheduling</td><td>开启任务定时的支持。(Spring)</td></tr><tr><td>@EnableWebMvc</td><td>开启Web MVC的支持。(Spring MVC)</td></tr><tr><td>@EnableConfigurationProperties</td><td>开启对@ConfigurationProperties 注解配置Bean的支持。(Spring Boot)</td></tr><tr><td>@EnableJpaRepositories</td><td>开启对Spring Data JPA Repository 的支持。(Spring Boot)</td></tr><tr><td>@EnableTransactionManagement</td><td>开启注解式事务的支持。(Spring Boot)</td></tr><tr><td>@EnableCaching</td><td>开启注解式的缓存支持。(Spring Boot)</td></tr></tbody></table><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><strong>单元测试</strong>：只针对当前开发的类和方法进行测试，可以简单通过模拟依赖来实现，对运行环境没有依赖。</li><li><strong>集成测试</strong>：一般需要不同层的不同对象的交互，如数据库、网络连接、IoC容器等。集成测试提供了一种无需部署和运行程序来验证各个部分是否能正常协同的工作。</li><li>Spring 通过 <strong>Spring TextContext Framework</strong> 对集成测试提供顶级支持。不依赖于特定的测试框架，如JUnit、TestNG。</li><li>Spring提供一个<strong>SpringJUnit4ClassRunner 类</strong>，它提供了Spring TextContext Framework的功能。</li><li>通过<strong>@ContextConfiguration</strong>来配置Application Context（加载配置类），通过<strong>@ActiveProfiles</strong>来确定活动的profile（针对Profile的案例）。</li><li>Spring Boot 内置了测试依赖，用@SpringBootTest注解测试类即可，@Test注解测试类中的测试方法。测试方法类在<code>org.junit.jupiter.api</code> 包中。</li></ul><h1 id="Spring-MVC-4-x"><a href="#Spring-MVC-4-x" class="headerlink" title="Spring MVC 4.x"></a>Spring MVC 4.x</h1><h2 id="Spring-MVC-基础"><a href="#Spring-MVC-基础" class="headerlink" title="Spring MVC 基础"></a>Spring MVC 基础</h2><ul><li>什么是MVC，它和三层架构有什么关系？<ol><li>MVC：Model + View + Controller（数据模型 + 视图 + 控制器）。</li><li>三层架构：Presentation tier + Application tier + Data tier（展现层 + 应用层 + 数据访问层）。</li><li>MVC只存在三层架构的展现层。</li></ol></li></ul><h2 id="Spring-MVC-的常用注解"><a href="#Spring-MVC-的常用注解" class="headerlink" title="Spring MVC 的常用注解"></a>Spring MVC 的常用注解</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Controller</td><td>表明是Spring MVC里的Controller类，声明为Bean</td></tr><tr><td>@RequestMapping</td><td>用来映射Web请求（访问路径和参数）、处理类和方法。支持Servlet的request和response作为参数，也支持对request和response的媒体类型进行配置。放在类或方法上。</td></tr><tr><td>@ResponseBody</td><td>支持将返回值放在response体内，而不是返回一个页面。放在返回值前或方法上。</td></tr><tr><td>@RequestBody</td><td>允许request的参数在request体中，而不是直接链接在地址后面。放置在参数前。</td></tr><tr><td>@PathVariable</td><td>用来接收路径参数。放置在参数前。</td></tr><tr><td>@RestController</td><td>组合了@Controller和@ResponseBody</td></tr></tbody></table><p>@RequestMapping 中有produce属性可以定制返回的response的媒体类型和字符集，或需返回值是json对象，则设置<code>produces=&quot;application/json;charset=UTF-8&quot;</code></p><h2 id="Spring-MVC-基本配置"><a href="#Spring-MVC-基本配置" class="headerlink" title="Spring MVC 基本配置"></a>Spring MVC 基本配置</h2><ul><li>Spring MVC的定制配置需要在配置类<strong>继承WebMvcConfigurationSupport类</strong>，并使用<strong>@EnableWebMvc</strong> 注解，<strong>重写</strong>继承类的方法来完成常用配置。</li></ul><h3 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h3><ul><li><p>程序中的静态资源文件（js、css、图片）等需要直接访问，这时可以在配置类重写继承类的addResourceHandlers方法来实现。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line"><span class="comment">//addResourceHandler指的是对外暴露的路径</span></div><div class="line"><span class="comment">//addResourceLocations指的是文件放置目录</span></div><div class="line">registry.addResourceHandler(<span class="string">"/assets/**"</span>).addResourceLocations(<span class="string">"classpath:/assets/"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><ul><li><p>拦截器（Interceptor）实现对每一个请求处理前后进行相关的业务处理，类似于Servlet的Filter。</p></li><li><p>步骤：</p><ol><li>创建普通的Bean实现<strong>HanlderInterceptor接口</strong>或者继承<strong>HandlerInterceptorAdapter类</strong>来实现自定义拦截器。</li><li>重写WebMvcConfigurationSupport的addInterceptors方法来注册自定义拦截器。</li></ol></li></ul><h3 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h3><ul><li>通过@ControllerAdvice，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller 的类的方法可以使用@ExceptionHandler、@InitBinder 和@ModelAttribute注解到方法上，这对所有注解了@RequestMapping 的控制器内的方法有效。</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@ExceptionHandler</td><td>用于全局处理控制器里的异常</td></tr><tr><td>@InitBinder</td><td>用来设置WebDataBinder（用来自动绑定前台请求参数到Model中）</td></tr><tr><td>@ModelAttribute</td><td>@ModelAttribute本来的作用是绑定键值对到Model中。</td></tr></tbody></table><p>示例：</p><p>控制器建言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//声明一个控制器建言，组合了@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerAdvice</span> </span>&#123;</div><div class="line"><span class="meta">@ExceptionHandler</span>(value=Exception.class)<span class="comment">//定义全局处理，value属性可过滤拦截属性，此处拦截所有的Exception</span></div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exception</span><span class="params">(Exception exception , WebRequest request)</span> </span>&#123;</div><div class="line">ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>); <span class="comment">//返回页面</span></div><div class="line">modelAndView.addObject(<span class="string">"errorMassage"</span>, exception.getMessage()); <span class="comment">//使页面通过errorMassage接收到数据</span></div><div class="line"><span class="keyword">return</span> modelAndView;</div><div class="line">&#125;</div><div class="line"><span class="meta">@ModelAttribute</span><span class="comment">//将键值对添加到全局，所有注解的@RequestMapping方法可获得此值</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttributes</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"额外消息"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">@InitBinder</span><span class="comment">//定制WebDataBinder</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder webDataBinder)</span> </span>&#123;</div><div class="line">webDataBinder.setDisallowedFields(<span class="string">"id"</span>);<span class="comment">//忽略request参数的id</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdviceController</span> </span>&#123;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/advice"</span>)</div><div class="line"><span class="comment">//接收@ModelAttribute的值</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSomething</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg,DemoObj demoObj) </span>&#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数有误："</span>+<span class="string">"来子@ModelAttribute/"</span>+msg);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Spring-MVC-高级配置"><a href="#Spring-MVC-高级配置" class="headerlink" title="Spring MVC 高级配置"></a>Spring MVC 高级配置</h2><h3 id="文件上传配置"><a href="#文件上传配置" class="headerlink" title="文件上传配置"></a>文件上传配置</h3><ul><li>Spring MVC通过配置<strong>MultipartyResolver</strong>来上传文件。Spring控制器中，通过<strong>MultipartyFile file</strong>来接收文件，通过<strong>MultipartyFile[ ] files</strong>接收多个文件上传。</li></ul><h3 id="服务器端推送技术"><a href="#服务器端推送技术" class="headerlink" title="服务器端推送技术"></a>服务器端推送技术</h3><ul><li>&lt; 待实现 &gt;</li></ul><h1 id="Spring-Boot-基础"><a href="#Spring-Boot-基础" class="headerlink" title="Spring Boot 基础"></a>Spring Boot 基础</h1><h2 id="Spring-Boot-概述"><a href="#Spring-Boot-概述" class="headerlink" title="Spring Boot 概述"></a>Spring Boot 概述</h2><ul><li>核心功能：<ol><li>独立运行的Spring 项目：可以以jar包的形式独立运行。</li><li>内嵌Servlet 容器：可选择内嵌Tomcat、Jetty、Undertow，无需以war包形式部署项目。</li><li>提供starter简化Maven配置：Spring提供了一系列的starter pom来简化Maven的依赖加载。</li><li>自动配置Spring：Spring Boot会根据在类路径中的jar包、类，为jar包里的类自动配置Bean。</li><li>准生产的应用监控：Spring Boot 提供基于http、ssh、telnet 对运行时的项目进行监控。</li><li>无代码生成和xml配置：提倡使用Java配置和注解配置组合，不需要任何xml配置即可实现Spring的所有配置。</li></ol></li><li>Spring Boot 的优点<ol><li>快速构建项目；</li><li>对主流框架的无配置集成；</li><li>项目可独立运行，无需外部依赖Servlet容器；</li><li>提供运行时的应用监控；</li><li>极大的提高了开发、部署效率；</li><li>与云计算的天然集成。</li></ol></li></ul><h1 id="Spring-Boot-核心"><a href="#Spring-Boot-核心" class="headerlink" title="Spring Boot 核心"></a>Spring Boot 核心</h1><h2 id="配置基础"><a href="#配置基础" class="headerlink" title="配置基础"></a>配置基础</h2><ul><li><p>定制Banner</p><ol><li><p>在<code>src/main/resources</code> 下新建banner.txt 文件；</p></li><li><p>在 <code>http://patorjk.com/software/taag/</code> 网站生成字符图案，并复制到banner.txt 文件中；</p></li><li><p>重新启动即可。</p></li><li><p>关闭Banner</p><p>将入口类的main方法内容修改成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication app=<span class="keyword">new</span> SpringApplication(SpringBootDemo3Application.class);</div><div class="line">app.setBannerMode(Banner.Mode.OFF);</div><div class="line">app.run(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol></li><li><p>有时需要会因为某些特殊要求需要配置xml文件，这时可以使用Spring提供的<strong>@ImportResource</strong> 注解来加载xml文件</p><p>示例：<code>@ImportResource ({&quot;classpath:sonme-config.xml&quot;, &quot;classpath:another-config.xml&quot;})</code></p></li></ul><h2 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a>外部配置</h2><ul><li>Spring允许使用<strong>properties</strong>文件、<strong>yaml</strong>文件或者<strong>命令行参数</strong>作为外部配置。</li><li>@Value 注解可以将properties配置文件的属性值注入到指定属性。如：<code>@Value(&quot;${book.name}&quot;)</code></li><li>@ConfigurationProperties 注解使用<code>profix=&quot;book&quot;</code> 属性获取前缀，写在getter/setter方法类的上面。<code>locations={&quot;classpath:config/book.properties&quot;}</code> 来指定配置文件。</li></ul><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul><li>默认是Logback作为日志框架（properties文件中配置）</li><li>配置日志保存路径：<code>logging.file=H:/java/Spring_Boot_Demo3/log.log</code></li><li>配置日志级别：<code>logging.level.org.springframework.web=DEBUG</code></li></ul><h2 id="Profile-配置"><a href="#Profile-配置" class="headerlink" title="Profile 配置"></a>Profile 配置</h2><ul><li>Profile 是Spring用来针对不同环境对不同的配置提供支持的。全局Profile配置使用<strong>application-{profile}.properties</strong> （如：<strong>application-prod.properties</strong> ）。然后通过application.properties中设置<strong>spring.profiles.active={profile}</strong>（如：<strong>spring.profiles.active=prod</strong>）来指定活动的Profile。</li></ul><h2 id="Spring-Boot-运行原理"><a href="#Spring-Boot-运行原理" class="headerlink" title="Spring Boot 运行原理"></a>Spring Boot 运行原理</h2><ul><li>Spring Boot关于自动配置的源码在<code>spring-boot-autoconfigure-x.x.x.x.jar</code> 中。可在application.properties 中配置<code>debug=true</code> 查看此项目中已开启和未开启的自动配置的报告。</li></ul><h1 id="Spring-Boot-的Web开发"><a href="#Spring-Boot-的Web开发" class="headerlink" title="Spring Boot 的Web开发"></a>Spring Boot 的Web开发</h1><h2 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h2><ul><li>Spring Boot 中推荐使用Thymeleaf 作为模板引擎。</li><li>Spring Boot 为Thymeleaf 提供的stater pom是<strong>spring-boot-starter-thymeleaf</strong>。（创建项目时可以直接添加Thymeleaf ）</li></ul><h3 id="Thymeleaf-基础知识"><a href="#Thymeleaf-基础知识" class="headerlink" title="Thymeleaf 基础知识"></a>Thymeleaf 基础知识</h3><ul><li><p>Thymeleaf 是一个Java类库，是xml/xhtml/html 5 的模板引擎，可作为MVC的Web应用的View层。还提供了额外的模块与SpringMVC集成，可以完全替代JSP。</p></li><li><p>在<strong>application.properties</strong> 配置文件中以<strong>spring.thymeleaf</strong> 开头来配置相关属性。</p></li><li><p>引入thymeleaf ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div></pre></td></tr></table></figure><p>引入thymeleaf ，并将进行动态处理的元素将使用<kbd>th:</kbd>为前缀。</p></li><li><p>引用Web静态资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/css/bootstrap.min.css&#125;"</span></span></div><div class="line"><span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/css/bootstrap-theme.min.css&#125;"</span></span></div><div class="line"><span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;jquery-3.2.1.min.js&#125;"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>@{}</kbd>：引用Web资源。</p></li><li><p>访问model中的数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;singlePerson.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>${}</kbd>：引用属性数据；注意<kbd>th:</kbd>：前缀。</p></li><li><p>model中的数据迭代：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">th:each</span>=<span class="string">"person:$&#123;people&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;person.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;person.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:each</kbd>：来做循环。</p></li><li><p>数据判断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #lists.isEmpty(people)&#125;"</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:if=”${not #lists.isEmpty(people)}”</kbd>：判断people是否为空。Thymeleaf 支持<kbd>&gt;</kbd>、<kbd>&lt;</kbd>、<kbd>&gt;=</kbd>、<kbd>&lt;=</kbd>、<kbd>==</kbd>、<kbd>!=</kbd>作为比较条件。</p></li><li><p>在JavaScript中访问model：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">var single=[[$&#123;singlePerson&#125;]];</div><div class="line">console.log(single.name+"/"+single.age);</div><div class="line">function getName(name)&#123;</div><div class="line">console.log(name);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:inline=”javascript”</kbd>：添加到script标签，这样JavaScript代码即可访问model中的属性；</p><p>通过<kbd>[[${}]]</kbd>：格式获得实际的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:onclick</span>=<span class="string">"getName([[$&#123;person.name&#125;]])"</span>&gt;</span>获得名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>注意格式：<kbd>th:onclick=”getName([[${person.name}]])”</kbd>。</p><p>更多thymeleaf 常用标签见<a href="https://www.imooc.com/video/16722" target="_blank" rel="external">慕课网spring boot 6-3</a><br><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax" target="_blank" rel="external">完整见thymeleaf 官方文档</a></p></li></ul><h2 id="其他模板引擎"><a href="#其他模板引擎" class="headerlink" title="其他模板引擎"></a>其他模板引擎</h2><ul><li>freemarker、Groovy、Mustache、Velocity（1.4版本之后弃用，Spring Framework 4.3之后弃用）</li><li>jsp 模板引擎尽量避免使用：<ol><li>jsp只能打包为<kbd>war</kbd> 格式，不支持<kbd>jar</kbd> 格式，只能在标准的容器里跑（tomcat、jetty都可以）；</li><li>内嵌的Jetty目前并不支持JSP；</li><li>Undertow 不支持jsp；</li><li>jsp自定义错误页面不能覆盖spring boot 默认的错误页面。</li></ol></li></ul><h2 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h2><ul><li><p>tomcat 配置实际上是servlet配置，因为SpringBoot默认内嵌的Tomcat是servlet容器。</p></li><li><p>Tomcat 的所有属性在<code>org.springframework.boot.autoconfigure.web.ServerProperties</code> 配置类中做了定义，只需要在application.properties中做配置即可。通用的Servlet容器配置都以<kbd>server</kbd>作为前缀；Tomcat特有配置都以<kbd>server.tomcat</kbd>作为前缀。</p></li><li><p>SSL 配置</p><ul><li><p>SSL 协议分为两层：</p><ol><li>SSL 记录协议：建立在TCP之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</li><li>SSL 握手协议：建立在SSL 记录协议之上，用于在实际数据传输开始前，通信双方进行身份认证、协商加密算法、交换加密密钥等。</li><li>在基于B/S的Web应用中，是通过HTTPS来实现SSL的。是HTTP的安全版。</li></ol></li><li><p>配置过程：</p><ol><li><p><strong>jdk中bin目录</strong>下有个证书管理工具<strong>keytool</strong>，用来生成自签名的证书。cdm打开窗口，执行命令<code>keytool -genkey -alias tomcat -keyalg RSA -keystore ./server.keystore</code> 生成<strong>server.keystore</strong>；</p></li><li><p>将server.keystore文件复制到<strong>项目跟目录</strong>下；</p></li><li><p>配置<strong>application.properties</strong>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server.port=8443</div><div class="line">server.ssl.key-store=server.keystore</div><div class="line">server.ssl.key-store-password=xiongchang</div><div class="line">server.ssl.key-store-type=JKS</div><div class="line">server.ssl.key-alias=tomcat</div><div class="line">server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA, SSL_RSA_WITH_RC4_128_SHA</div></pre></td></tr></table></figure></li><li><p>创建一个静态首页index.html;</p><p>在<code>classpath:/META-INF/resources/inde.html</code> 、<code>classpath:/resources/inde.html</code> 、<code>classpath:/static/inde.html</code> 、<code>classpath:/public/inde.html</code> 下均会直接映射到跟目录<code>http://localhost:8080/</code></p></li><li><p>配置入口类，启动即可。</p></li></ol></li></ul></li></ul><h2 id="Favicon-配置（Title图标）"><a href="#Favicon-配置（Title图标）" class="headerlink" title="Favicon 配置（Title图标）"></a>Favicon 配置（Title图标）</h2><ul><li>设置网页Title 前面的图标</li><li>&lt;没有找到 <strong>spring.mvc.favicon.enabled=false</strong> 属性！！！！！&gt;</li></ul><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><ul><li>WebSocket 为浏览器和服务端提供了双工异步通信的功能。通过一个socket 来实现双工异步通信能力的。但是使用WebSocket协议开发显得繁琐，所以会使用它的子协议STOMP，它是一个更高级别的协议，使用一个基于帧的格式定义消息。</li></ul><h3 id="广播式"><a href="#广播式" class="headerlink" title="广播式"></a>广播式</h3><ul><li><p>配置WebSocket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//开启使用STOMP协议来传输基于代理的消息，这时控制器支持使用@MessageMapping</span></div><div class="line"><span class="meta">@EnableWebSocketMessageBroker</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="comment">//注册STOMP协议的节点（endpoint），并映射的指定URL</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</div><div class="line"><span class="comment">//注册一个STOMP的endpoint，并指定使用SockJS协议。</span></div><div class="line">registry.addEndpoint(<span class="string">"/endpointWisely"</span>).withSockJS();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="comment">//配置消息代理</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</div><div class="line"><span class="comment">//广播式应配置一个/topic消息代理。</span></div><div class="line">registry.enableSimpleBroker(<span class="string">"/topic"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>浏览器向服务端发送的消息用此类接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WiselyMessage</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>服务端向浏览器发送的此类的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WiselyResponse</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String responseMessage;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResponseMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> responseMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseMessage</span><span class="params">(String responseMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.responseMessage = responseMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WiselyResponse</span><span class="params">(String responseMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.responseMessage = responseMessage;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>演示控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsController</span> </span>&#123;</div><div class="line"><span class="comment">//当浏览器向服务器端发送消息时，通过@MessageMapping映射/welcome这个地址。</span></div><div class="line"><span class="meta">@MessageMapping</span>(<span class="string">"/welcome"</span>)</div><div class="line"><span class="comment">//当服务器有消息时，会对订阅了@SendTo中的路径的浏览器发送消息。</span></div><div class="line"><span class="meta">@SendTo</span>(<span class="string">"/topic/getResponse"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> WiselyResponse <span class="title">say</span><span class="params">(WiselyMessage message)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> WiselyResponse(<span class="string">"Welcome, "</span>+ message.getName()+<span class="string">"!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在项目中添加脚本</p><p><code>jquery-3.2.1.min.js</code>、<code>sockjs.min.js</code> 、<code>stomp.min.js</code> 添加到<code>src/main/resources/static</code> 目录下</p></li><li><p>页面（<code>src/main/resources/templates</code> 目录下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot+WebSocket+广播式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"disconnect()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color: #f00"</span>&gt;</span>你的浏览器不支持！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">onclick</span>=<span class="string">"connect();"</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">onclick</span>=<span class="string">"disconnect();"</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conversationDiv"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>输入你的名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendName"</span> <span class="attr">onclick</span>=<span class="string">"sendName();"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"response"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"sockjs.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"stomp.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">var stompClient = null;</div><div class="line"></div><div class="line">function setConnected(connected) &#123;</div><div class="line">document.getElementById('connect').disabled = connected;</div><div class="line">document.getElementById('disconnect').disabled = !connected;</div><div class="line">document.getElementById('conversationDiv').style.visibility = connected ? 'visible'</div><div class="line">: 'hidden';</div><div class="line">$('#response').html();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function connect() &#123;</div><div class="line">var socket = new SockJS('/endpointWisely');//连接SockJS的endpoint名称为“/endpointWisely”</div><div class="line">stompClient = Stomp.over(socket);//使用STOMP子协议的WebSocket客户端</div><div class="line">stompClient.connect(&#123;&#125;, function(frame) &#123;//连接WebSocket 服务端。</div><div class="line">setConnected(true);</div><div class="line">console.log('Connected：' + frame);</div><div class="line">//stompClient.subscribe订阅/topic/getResponse目标发送的消息</div><div class="line">stompClient.subscribe('/topic/getResponse', function(response) &#123;</div><div class="line">showResponse(JSON.parse(response.body).responseMessage);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function disconnect() &#123;</div><div class="line">if (stompClient != null) &#123;</div><div class="line">stompClient.disconnect();</div><div class="line">&#125;</div><div class="line">setConnected(false);</div><div class="line">console.log('Disconnected');</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sendName() &#123;</div><div class="line">var name = $('#name').val();</div><div class="line">//stompClient.send向/welcome目标发送消息</div><div class="line">stompClient.send("/welcome", &#123;&#125;, JSON.stringify(&#123;</div><div class="line">'name' : name</div><div class="line">&#125;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">function showResponse(message) &#123;</div><div class="line">var response = $("#response");</div><div class="line">response.html(message);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>入口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemo4Application</span> </span>&#123;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ws"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toWs</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"ws"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(SpringBootDemo4Application.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Docker-安装及常用命令"><a href="#Docker-安装及常用命令" class="headerlink" title="Docker 安装及常用命令"></a>Docker 安装及常用命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>Docker（win） 下载地址 <a href="https://github.com/boot2docker/windows-installer/releases/tag/v1.8.0" target="_blank" rel="external">https://github.com/boot2docker/windows-installer/releases/tag/v1.8.0</a></p></li><li><p>内置的viryualBox可能与本机系统不兼容，导致无法使用。可卸载后在</p></li></ul><p>进行下载安装。</p><ul><li><p>在win系统下，<kbd>cmd</kbd> 打开命令行窗口，<kbd>boot2docker -v</kbd> 查看是否安装成功。（以下命令都是在本机的<kbd>cmd</kbd> 下进行的）</p></li><li><p>安装成功后，使用<kbd>boot2docker status</kbd> 查看状态，并用<kbd>boot2docker start</kbd> 运行docker。此时打开viryualBox虚拟机，会看到boot2docker -vm 正在运行中。</p></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>检索镜像：<kbd>docker search 镜像名</kbd>，例如：<code>docker search redis</code></li><li>镜像下载：<kbd>docker pull 镜像名</kbd>，例如：<code>docker pull redis</code></li><li>镜像列表：<kbd>docker images</kbd></li></ul><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><ul><li><p>在项目中加入<code>spring-boot-devtools</code> 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>通常会对文件进行过滤并且关闭相应的缓存，即使刷新（如下）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#关闭缓存，即时刷新</div><div class="line">spring.thymeleaf.cache=false</div><div class="line">#热部署生效</div><div class="line">spring.devtools.restart.enabled=true</div><div class="line">#设置重启的目录，添加那个目录的文件需要restart</div><div class="line">spring.devtools.restart.additional-paths=src/main/java</div><div class="line">#排除某个目录文件不需要restart</div><div class="line">spring.devtools.restart.exclude=static/**,public/**</div></pre></td></tr></table></figure></li></ul><h1 id="Json-注解"><a href="#Json-注解" class="headerlink" title="Json 注解"></a>Json 注解</h1><ul><li>通常是对实体类进行注解；</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@JsonIgnoreProperties</td><td>在类上注解哪些属性不用参与序列化和反序列化</td></tr><tr><td>@JsonIgnore</td><td>属性上忽略不希望输出的属性</td></tr><tr><td>@JsonFormat</td><td>格式化序列化后的字符串</td></tr><tr><td>@JsonSerialize</td><td>序列化的时候通过重写的方法，可以加在get方法上，也可以直接加在属性上</td></tr><tr><td>@JsonDeserialize</td><td>反序列化的时候通过重写的方法，可以加在set方法上，也可以直接加在属性上</td></tr><tr><td>@JsonInclude</td><td><code>Include.Include.{ALWAYS、NON_DEFAULT、NON_EMPTY、NON_NULL}</code> 分别是默认、默认值不序列化、为 空（“”） 或者为 NULL 都不序列化、为NULL 不序列化</td></tr><tr><td>@JsonProperty</td><td>用于表示Json序列化和反序列化时用到的名字，例如一些不符合编程规范的变量命名</td></tr></tbody></table><h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><ul><li><p>当出现异常时，自定义异常返回的页面</p></li><li><p>参考“Spring MVC 基本配置”下的“@ControllerAdvice”小节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerDemo</span> </span>&#123;</div><div class="line">  <span class="meta">@ExceptionHandler</span>(value=Exception.class)</div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">errorHandler</span><span class="params">(HttpServletResponse response,HttpServletRequest request,Exception e)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    </div><div class="line">    ModelAndView mv=<span class="keyword">new</span> ModelAndView();</div><div class="line">    mv.addObject(<span class="string">"exception"</span>, e);</div><div class="line">    mv.addObject(<span class="string">"url"</span>, request.getRequestURL());</div><div class="line">    mv.setViewName(<span class="string">"error"</span>);</div><div class="line">    <span class="keyword">return</span> mv;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="事务-Transactional"><a href="#事务-Transactional" class="headerlink" title="事务@Transactional"></a>事务@Transactional</h1><ul><li>当处理数据出现异常时，可以进行回滚。</li><li>在Spring中，事务属性描述了事务策略如何应用到<strong>方法上</strong>，事务属性包含5个方面：<strong>传播行为</strong>、<strong>隔离级别</strong>、<strong>回滚策略</strong>、<strong>超时时间</strong>、<strong>是否只读</strong>。</li></ul><h2 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h2><ul><li><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如，方法可能继续在现有的事务中允许，也可能开启一个新事务，并在自己的事务中运行。</p></li><li><p>事务的传播行为可以由传播属性指定，Spring定义了7种类型的传播行为。其中最常用的是<kbd>REQUIRED</kbd>、<kbd>REQUIRES_NEW</kbd>和<kbd>SUPPORTS</kbd>。</p></li></ul><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>REQUIRED</strong></td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行。</td></tr><tr><td><strong>REQUIRED_NEW</strong></td><td>当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起。</td></tr><tr><td><strong>SUPPORTS</strong></td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中。</td></tr><tr><td>NOT_SUPPORTED</td><td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起。</td></tr><tr><td>MANDATORY</td><td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常。</td></tr><tr><td>NEVER</td><td>当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常。</td></tr><tr><td>NESTED</td><td>如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行。</td></tr></tbody></table><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ul><li><p>从理论上来说，事务应该彼此完全隔离，以避免并发事务所导致的问题。然而，那样会对性能产生极大的影响，因为事务必须按顺序运行。</p></li><li><p>在实际开发中，为了提升性能，事务会以较低的隔离级别运行。</p></li><li><p>事务的隔离级别可以通过隔离级别事务属性(isolation)指定。</p></li><li><p>Spring支持的事务隔离级别：</p><ul><li><p>事务的隔离级别要得到底层数据库引擎的支持，而不是应用程序或者框架的支持。</p></li><li><p>Oracle 支持的2种事务隔离级别：<kbd>READ_COMMIT</kbd>。</p></li><li><p>MySQL 支持4种事务隔离级别：<kbd>READ-UNCOMMITTED</kbd>、<kbd>READ-COMMITTED</kbd>、<kbd>REPEATABLE-READ</kbd> 和 <kbd>SERIALIZABLE</kbd>。</p></li></ul></li></ul><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td><strong>DEFAULT</strong></td><td>默认隔离级别，大多数默认是READ_COMMITTED</td></tr><tr><td>READ_UNCOMMITTED</td><td>允许事务读取未被其他事务提交的变更、脏读，不可重复读和幻读的问题都会出现。</td></tr><tr><td>READ_COMMITTED</td><td>只允许事务读取已经被其他事务提交的变更，可以重读脏读，但不可重复读和幻读问题仍然可能存在。</td></tr><tr><td>REPEATABLE_READ</td><td>确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题仍然存在。</td></tr><tr><td>SERIALIZABLE</td><td>确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作，所有并发问题都可以避免，但性能十分低下</td></tr></tbody></table><h2 id="事务的回滚策略"><a href="#事务的回滚策略" class="headerlink" title="事务的回滚策略"></a>事务的回滚策略</h2><ul><li>默认情况下只有未检查异常( RuntimeException 和 Error 类型的异常)会导致事务回滚，而检查异常不会。</li><li>事务回滚的规则可以通过 <kbd>@Transactional</kbd>注解的 <code>rollbackFor</code>和 <code>noRollbackFor</code>属性来定义，这两个属性被声明为<strong>Class[] 类型</strong>的，因此可以为这两个属性指定多个异常类。<br>① <kbd>rollbackFor</kbd>：指定遇到哪些异常时必须进行回滚。<br>② <kbd>noRollbackFor</kbd>：指定遇到哪些异常时，必须不回滚。</li></ul><h2 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h2><ul><li>只读事务属性：表示这个事务只读取数据但不更新数，这样可以帮助数据库进行优化事务。</li><li>只读属性可以在 <code>@Transactional</code>注解中<kbd>readOnly</kbd>属性中定义，其取值只有<strong>true</strong>和<strong>false</strong>。</li></ul><h2 id="事务的超时属性"><a href="#事务的超时属性" class="headerlink" title="事务的超时属性"></a>事务的超时属性</h2><ul><li>超时事务属性：事务在强制回滚之前可以保持多久，这样可以防止长期运行的事务占用资源。</li><li>超时属性可以在 <code>@Transactional</code>注解中<kbd>timeout</kbd>属性中定义，其单位为秒。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Spring-4-x&quot;&gt;&lt;a href=&quot;#Spring-4-x&quot; class=&quot;headerlink&quot; title=&quot;Spring 4.x&quot;&gt;&lt;/a&gt;Spring 4.x&lt;/h1&gt;&lt;h2 id=&quot;Spring-基础&quot;&gt;&lt;a href=&quot;#Spring-基础&quot; class=&quot;headerlink&quot; title=&quot;Spring 基础&quot;&gt;&lt;/a&gt;Spring 基础&lt;/h2&gt;&lt;h3 id=&quot;Spring框架本身有四大原则：&quot;&gt;&lt;a href=&quot;#Spring框架本身有四大原则：&quot; class=&quot;headerlink&quot; title=&quot;Spring框架本身有四大原则：&quot;&gt;&lt;/a&gt;Spring框架本身有&lt;strong&gt;四大原则&lt;/strong&gt;：&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;使用POJO进行轻量级和最小侵入式开发；&lt;/li&gt;&lt;li&gt;通过依赖注入和通过接口编程实现解耦；&lt;/li&gt;&lt;li&gt;通过AOP和默认习惯进行声明式编程；
    
    </summary>
    
    
      <category term="spring boot" scheme="http://blog.xiongchang.vip/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://blog.xiongchang.vip/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf模板引擎</title>
    <link href="http://blog.xiongchang.vip/thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.html"/>
    <id>http://blog.xiongchang.vip/thymeleaf模板引擎.html</id>
    <published>2019-11-11T12:00:08.000Z</published>
    <updated>2019-11-11T12:14:41.829Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --><h3 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h3><ul><li>Spring Boot 中推荐使用Thymeleaf 作为模板引擎。</li><li>Spring Boot 为Thymeleaf 提供的stater pom是<strong>spring-boot-starter-thymeleaf</strong>。（创建项目时可以直接添加Thymeleaf ）<a id="more"></a></li></ul><h3 id="Thymeleaf-基础知识"><a href="#Thymeleaf-基础知识" class="headerlink" title="Thymeleaf 基础知识"></a>Thymeleaf 基础知识</h3><ul><li><p>Thymeleaf 是一个Java类库，是xml/xhtml/html 5 的模板引擎，可作为MVC的Web应用的View层。还提供了额外的模块与SpringMVC集成，可以完全替代JSP。</p></li><li><p>在<strong>application.properties</strong> 配置文件中以<strong>spring.thymeleaf</strong> 开头来配置相关属性。</p></li><li><p>引入thymeleaf ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div></pre></td></tr></table></figure><p>引入thymeleaf ，并将进行动态处理的元素将使用<kbd>th:</kbd>为前缀。</p></li><li><p>引用Web静态资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/css/bootstrap.min.css&#125;"</span></span></div><div class="line"><span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/css/bootstrap-theme.min.css&#125;"</span></span></div><div class="line"><span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;jquery-3.2.1.min.js&#125;"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;bootstrap-3.4.1-dist/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>@{}</kbd>：引用Web资源。</p></li><li><p>访问model中的数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;singlePerson.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>${}</kbd>：引用属性数据；注意<kbd>th:</kbd>：前缀。</p></li><li><p>model中的数据迭代：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">th:each</span>=<span class="string">"person:$&#123;people&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;person.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;person.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:each</kbd>：来做循环。</p></li><li><p>数据判断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #lists.isEmpty(people)&#125;"</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:if=”${not #lists.isEmpty(people)}”</kbd>：判断people是否为空。Thymeleaf 支持<kbd>&gt;</kbd>、<kbd>&lt;</kbd>、<kbd>&gt;=</kbd>、<kbd>&lt;=</kbd>、<kbd>==</kbd>、<kbd>!=</kbd>作为比较条件。</p></li><li><p>在JavaScript中访问model：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">var single=[[$&#123;singlePerson&#125;]];</div><div class="line">console.log(single.name+"/"+single.age);</div><div class="line">function getName(name)&#123;</div><div class="line">console.log(name);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>通过<kbd>th:inline=”javascript”</kbd>：添加到script标签，这样JavaScript代码即可访问model中的属性；</p><p>通过<kbd>[[${}]]</kbd>：格式获得实际的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:onclick</span>=<span class="string">"getName([[$&#123;person.name&#125;]])"</span>&gt;</span>获得名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>注意格式：<kbd>th:onclick=”getName([[${person.name}]])”</kbd>。</p><p>更多thymeleaf 常用标签见<a href="https://www.imooc.com/video/16722" target="_blank" rel="external">慕课网spring boot 6-3</a><br><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax" target="_blank" rel="external">完整见thymeleaf 官方文档</a></p></li></ul><h3 id="其他模板引擎"><a href="#其他模板引擎" class="headerlink" title="其他模板引擎"></a>其他模板引擎</h3><ul><li>freemarker、Groovy、Mustache、Velocity（1.4版本之后弃用，Spring Framework 4.3之后弃用）</li><li>jsp 模板引擎尽量避免使用：<ol><li>jsp只能打包为<kbd>war</kbd> 格式，不支持<kbd>jar</kbd> 格式，只能在标准的容器里跑（tomcat、jetty都可以）；</li><li>内嵌的Jetty目前并不支持JSP；</li><li>Undertow 不支持jsp；</li><li>jsp自定义错误页面不能覆盖spring boot 默认的错误页面。</li></ol></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;Thymeleaf-模板引擎&quot;&gt;&lt;a href=&quot;#Thymeleaf-模板引擎&quot; class=&quot;headerlink&quot; title=&quot;Thymeleaf 模板引擎&quot;&gt;&lt;/a&gt;Thymeleaf 模板引擎&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Spring Boot 中推荐使用Thymeleaf 作为模板引擎。&lt;/li&gt;&lt;li&gt;Spring Boot 为Thymeleaf 提供的stater pom是&lt;strong&gt;spring-boot-starter-thymeleaf&lt;/strong&gt;。（创建项目时可以直接添加Thymeleaf ）
    
    </summary>
    
    
      <category term="spring boot" scheme="http://blog.xiongchang.vip/categories/spring-boot/"/>
    
    
      <category term="thymeleaf" scheme="http://blog.xiongchang.vip/tags/thymeleaf/"/>
    
      <category term="spring boot" scheme="http://blog.xiongchang.vip/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>啊哈！算法</title>
    <link href="http://blog.xiongchang.vip/%E5%95%8A%E5%93%88%EF%BC%81%E7%AE%97%E6%B3%95.html"/>
    <id>http://blog.xiongchang.vip/啊哈！算法.html</id>
    <published>2019-11-07T12:52:43.000Z</published>
    <updated>2019-11-20T07:08:15.535Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ul><li><p>图解<a id="more"></a></p><p><img src="http://imgs.xiongchang.vip/img_19.png" style="zoom:90%"></p></li><li><p>代码</p><details><br><summary><strong>展开查看源码</strong></summary><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 桶排序 </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> room[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;room.length;i++) &#123;</div><div class="line">room[i]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">System.out.println(<span class="string">"将会对多少个数据进行排序："</span>);</div><div class="line"><span class="keyword">int</span> n=scanner.nextInt();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line"><span class="keyword">int</span> m=scanner.nextInt();</div><div class="line">room[m]++;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"输入"</span>+n+<span class="string">"个数据："</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;room.length;i++) &#123;</div><div class="line"><span class="keyword">if</span>(room[i]!=<span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=room[i];j++) &#123;</div><div class="line">System.out.print(i+<span class="string">"\t"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">scanner.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br></details></li><li><p>时间复杂度为O(M+N)；会造成空间资源的浪费。</p></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li><p>基本思想：每次比较相邻的元素，如果它们的顺序错误就把它们交换过来。</p></li><li><p>原理：每趟只能确定将一个数字归位。即对n个数字排序，第一趟使第n位数字归位，第二趟使第n-1位数字归位，…</p></li><li><p>代码：</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 冒泡排序 </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.print(<span class="string">"将会对多少个数据进行排序："</span>);</div><div class="line">Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="keyword">int</span> n=scanner.nextInt();</div><div class="line"><span class="keyword">int</span> room[]=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line"><span class="comment">//初始化数组</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;room.length;i++) &#123;</div><div class="line">room[i]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输入数据</span></div><div class="line">System.out.println(<span class="string">"输入"</span>+n+<span class="string">"个数据："</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line"><span class="keyword">int</span> m=scanner.nextInt();</div><div class="line">room[i]=m;</div><div class="line">&#125;</div><div class="line"><span class="comment">//冒泡排序</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-<span class="number">1</span>;i++) &#123;<span class="comment">//n个数需要进行n-1趟</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-<span class="number">1</span>;j++) &#123;</div><div class="line"><span class="keyword">if</span>(room[j]&gt;room[j+<span class="number">1</span>]) &#123;</div><div class="line"><span class="keyword">int</span> temp=room[j];</div><div class="line">room[j]=room[j+<span class="number">1</span>];</div><div class="line">room[j+<span class="number">1</span>]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输入</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;room.length;i++) &#123;</div><div class="line">System.out.print(room[i]+<span class="string">"\t"</span>);</div><div class="line">&#125;</div><div class="line">scanner.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><ul><li>时间复杂度位O( N^2^ )</li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li><p>先选择一个基准数n（一般是数组第一个数），再用变量i指向数列第一个数，变量j指向最后一个数；</p><p><img src="http://imgs.xiongchang.vip/img_17.png" alt="1572675695637" style="zoom:90%"></p><p>j先出发，从右向左找第一个比n小的数，i后出发，从左向右找第一个比n大的数，然后交换；</p><p><img src="http://imgs.xiongchang.vip/img_18.png" alt="1572675876875" style="zoom:90%"></p><p>直到i和j相遇，最后和基准数进行交换，最后找到了基准数的正确位置，然后基准数的左右两侧用同样的方式进行，直到最后排序完成。</p></li><li><p>代码：</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 快速排序 </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> room[];</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.print(<span class="string">"将会对多少个数据进行排序："</span>);</div><div class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="keyword">int</span> n = scanner.nextInt();</div><div class="line">room = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line"><span class="comment">// 初始化数组</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; room.length; i++) &#123;</div><div class="line">room[i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输入数据</span></div><div class="line">System.out.println(<span class="string">"输入"</span> + n + <span class="string">"个数据："</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line"><span class="keyword">int</span> m = scanner.nextInt();</div><div class="line">room[i] = m;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 快速排序</span></div><div class="line">paixu(<span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; room.length; i++) &#123;</div><div class="line"><span class="keyword">if</span>(room[i]!=<span class="number">0</span>) &#123;</div><div class="line">System.out.println(room[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">scanner.close();</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paixu</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> temp = room[left];</div><div class="line"><span class="keyword">int</span> i = left;</div><div class="line"><span class="keyword">int</span> j = right;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (i &gt; j) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="keyword">while</span> (i != j) &#123;</div><div class="line"><span class="keyword">while</span> (room[j] &gt;= temp &amp;&amp; i &lt; j) &#123;</div><div class="line">j--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (room[i] &lt;= temp &amp;&amp; i &lt; j) &#123;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line"><span class="keyword">int</span> save = room[i];</div><div class="line">room[i] = room[j];</div><div class="line">room[j] = save;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">room[left] = room[i];</div><div class="line">room[i] = temp;</div><div class="line"></div><div class="line">paixu(left, i - <span class="number">1</span>);</div><div class="line">paixu(i + <span class="number">1</span>, right);</div><div class="line">  </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h2 id="队列、栈、链表"><a href="#队列、栈、链表" class="headerlink" title="队列、栈、链表"></a>队列、栈、链表</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>一个加密的数串（如：6 3 1 7 5 8 9 2 4）进行解密，删除第一个数，第二个数放在末尾，删除第三个数，第四个数放在末尾…..被删除的数的顺序即解密后的顺序。</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 队列 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line">    System.out.print(<span class="string">"输入密文数串长度："</span>);</div><div class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">    <span class="keyword">int</span> num = scanner.nextInt();</div><div class="line">    <span class="comment">// 输入</span></div><div class="line">    System.out.println(<span class="string">"逐个输入密文："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</div><div class="line">      m[i] = scanner.nextInt();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> head = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> end = num + <span class="number">1</span>;</div><div class="line">    <span class="comment">// 解密</span></div><div class="line">    <span class="keyword">while</span> (head &lt; end) &#123;</div><div class="line">      System.out.print(m[head]+<span class="string">" "</span>);</div><div class="line">      head++;</div><div class="line">      m[end] = m[head];</div><div class="line">      end++;</div><div class="line">      head++;</div><div class="line">    &#125;</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li><p>判断是否是回文</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 栈 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> a[]=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</div><div class="line">    System.out.print(<span class="string">"输入："</span>);</div><div class="line">    Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">    String s=scanner.next();</div><div class="line">    <span class="keyword">char</span> b[]=s.toCharArray();</div><div class="line">        </div><div class="line">    <span class="keyword">int</span> len=b.length;</div><div class="line">    <span class="keyword">int</span> mid=len/<span class="number">2</span>-<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i,next;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=mid;i++) &#123;</div><div class="line">      a[++top]=b[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">      next=mid+<span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      next=mid+<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=next;i&lt;=len-<span class="number">1</span>;i++) &#123;</div><div class="line">      <span class="keyword">if</span>(b[i]!=a[top]) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      top--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(top==<span class="number">0</span>) &#123;</div><div class="line">      System.out.println(<span class="string">"YES"</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      System.out.println(<span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h3 id="模拟链表"><a href="#模拟链表" class="headerlink" title="模拟链表"></a>模拟链表</h3><ul><li><p>即用数组来实现链表。 在一个有序数组中插入一个数，并保持大小顺序不变</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 模拟链表 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> data[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</div><div class="line">    <span class="keyword">int</span> right[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>];</div><div class="line">    </div><div class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">    System.out.println(<span class="string">"读入已有的数字："</span>);</div><div class="line">    <span class="keyword">int</span> n = scanner.nextInt();</div><div class="line">    System.out.println(<span class="string">"初始化，依次输入 "</span> + n + <span class="string">" 个数字："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">      data[i] = scanner.nextInt();</div><div class="line">      <span class="keyword">if</span> (i == <span class="number">9</span>) &#123;</div><div class="line">        right[i] = <span class="number">0</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        right[i] = i + <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> len = n + <span class="number">1</span>;</div><div class="line">    System.out.println(<span class="string">"输入需要插入的数字："</span>);</div><div class="line">    data[len] = scanner.nextInt();</div><div class="line">    right[len] = len;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (data[i] &gt; data[len]) &#123;</div><div class="line">        right[len] = right[i - <span class="number">1</span>];</div><div class="line">        right[i - <span class="number">1</span>] = len;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    System.out.println(<span class="string">"data: "</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</div><div class="line">      System.out.print(data[i] + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"\nright: "</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</div><div class="line">      System.out.print(right[i] + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t!=<span class="number">0</span>) &#123;</div><div class="line">      System.out.print(<span class="string">"\n顺序"</span>+data[t]+<span class="string">" "</span>);</div><div class="line">      t=right[t];</div><div class="line">    &#125;</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h3 id="小猫钓鱼"><a href="#小猫钓鱼" class="headerlink" title="小猫钓鱼"></a>小猫钓鱼</h3><ul><li><p>将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的 第一张扑克牌放在桌上， 然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放到自己手中牌的末尾。当任意一人手中的牌全部出完时，游戏结束，对手获胜。</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 小猫钓鱼 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> q1[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];<span class="comment">//队列1（手牌1）</span></div><div class="line">    <span class="keyword">int</span> q2[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];<span class="comment">//队列2（手牌2）</span></div><div class="line">    <span class="keyword">int</span> s[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//栈（桌子上的牌）</span></div><div class="line">    <span class="keyword">int</span> b[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//记录</span></div><div class="line">    </div><div class="line">    <span class="comment">//初始化q1、q2、b</span></div><div class="line">    <span class="keyword">int</span> head1=<span class="number">1</span>,tail1=<span class="number">1</span>,head2=<span class="number">1</span>,tail2=<span class="number">1</span>,top=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123; <span class="comment">//牌面 0~9</span></div><div class="line">      b[i]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//输入手牌每人6张手牌</span></div><div class="line">    Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">    System.out.println(<span class="string">"输入Q1的牌面："</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) &#123;<span class="comment">//手牌1</span></div><div class="line">      q1[i]=scanner.nextInt();</div><div class="line">      tail1++;</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"输入Q2的牌面："</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) &#123;<span class="comment">//手牌2</span></div><div class="line">      q2[i]=scanner.nextInt();</div><div class="line">      tail2++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//游戏开始</span></div><div class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;  <span class="comment">//定义打出的牌</span></div><div class="line">    <span class="keyword">while</span>(head1&lt;tail1 &amp;&amp; head2&lt;tail2) &#123;</div><div class="line">      t=q1[head1];</div><div class="line">      <span class="keyword">if</span>(b[t]==<span class="number">0</span>) &#123; <span class="comment">//当桌子上没有该牌面时</span></div><div class="line">        b[t]=<span class="number">1</span>;   <span class="comment">//记录桌子上的牌面</span></div><div class="line">        head1++;  <span class="comment">//手牌头指针向后一个</span></div><div class="line">        top++;    <span class="comment">//桌子上以下标为1开头，并且指向下一个位置</span></div><div class="line">        s[top]=t; <span class="comment">//赋值给栈，即桌子上的牌面</span></div><div class="line">      &#125;<span class="keyword">else</span> &#123;     <span class="comment">//当桌子上有该牌面时</span></div><div class="line">        q1[tail1]=t;  <span class="comment">//将打出的牌放回手牌底部</span></div><div class="line">        head1++;    <span class="comment">//手牌头指针向后一个</span></div><div class="line">        tail1++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">        <span class="keyword">while</span>(s[top]!=t) &#123;  <span class="comment">//当栈顶和打出的牌不相等时</span></div><div class="line">          b[s[top]]=<span class="number">0</span>;  <span class="comment">//将栈顶元素的记录值重置为0</span></div><div class="line">          q1[tail1]=s[top];<span class="comment">//栈顶值插入手牌底部</span></div><div class="line">          tail1++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">          top--;      <span class="comment">//栈顶减一</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将匹配的原有牌面回收，放在底部</span></div><div class="line">        b[s[top]]=<span class="number">0</span>;  <span class="comment">//将栈顶元素的记录值重置为0</span></div><div class="line">        q1[tail1]=s[top];<span class="comment">//栈顶值插入手牌底部</span></div><div class="line">        tail1++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">        top--;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      t=q2[head2];</div><div class="line">      <span class="keyword">if</span>(b[t]==<span class="number">0</span>) &#123; <span class="comment">//当桌子上没有该牌面时</span></div><div class="line">        b[t]=<span class="number">1</span>;   <span class="comment">//记录桌子上的牌面</span></div><div class="line">        head2++;  <span class="comment">//手牌头指针向后一个</span></div><div class="line">        top++;    <span class="comment">//桌子上以下标为1开头，并且指向下一个位置</span></div><div class="line">        s[top]=t; <span class="comment">//赋值给栈，即桌子上的牌面</span></div><div class="line">      &#125;<span class="keyword">else</span> &#123;     <span class="comment">//当桌子上有该牌面时</span></div><div class="line">        q2[tail2]=t;  <span class="comment">//将打出的牌放回手牌底部</span></div><div class="line">        head2++;    <span class="comment">//手牌头指针向后一个</span></div><div class="line">        tail2++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">        <span class="keyword">while</span>(s[top]!=t) &#123;  <span class="comment">//当栈顶和打出的牌不相等时</span></div><div class="line">          b[s[top]]=<span class="number">0</span>;  <span class="comment">//将栈顶元素的记录值重置为0</span></div><div class="line">          q2[tail2]=s[top];<span class="comment">//栈顶值插入手牌底部</span></div><div class="line">          tail2++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">          top--;      <span class="comment">//栈顶减一</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将匹配的原有牌面回收，放在底部</span></div><div class="line">        b[s[top]]=<span class="number">0</span>;  <span class="comment">//将栈顶元素的记录值重置为0</span></div><div class="line">        q2[tail2]=s[top];<span class="comment">//栈顶值插入手牌底部</span></div><div class="line">        tail2++;    <span class="comment">//手牌尾指针向后一个</span></div><div class="line">        top--;  </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(head1==tail1) &#123;</div><div class="line">      System.out.println(<span class="string">"Q2获胜！"</span>);</div><div class="line">      System.out.print(<span class="string">"Q2手中的牌是："</span>);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=head2;i&lt;=tail2-<span class="number">1</span>;i++) &#123;</div><div class="line">        System.out.print(q2[i]+<span class="string">"   "</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(top&gt;<span class="number">0</span>) &#123;</div><div class="line">        System.out.print(<span class="string">"\n桌子上的牌是："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) &#123;</div><div class="line">          System.out.print(s[i]+<span class="string">"   "</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"桌子上没有牌了！"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      System.out.println(<span class="string">"Q1获胜！"</span>);</div><div class="line">      System.out.print(<span class="string">"Q1手中的牌是："</span>);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=head1;i&lt;=tail1-<span class="number">1</span>;i++) &#123;</div><div class="line">        System.out.print(q1[i]+<span class="string">"   "</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(top&gt;<span class="number">0</span>) &#123;</div><div class="line">        System.out.print(<span class="string">"\n桌子上的牌是："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) &#123;</div><div class="line">          System.out.print(s[i]+<span class="string">"   "</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"桌子上没有牌了！"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="炸弹人游戏"><a href="#炸弹人游戏" class="headerlink" title="炸弹人游戏"></a>炸弹人游戏</h3><ul><li><p>炸弹人游戏，首先创建一个地图，用“#”表示墙壁，“G”表示敌人，用“.”表示空地， 在空地上可以安放炸弹，墙壁不可炸穿，枚举看那个位置可以消灭最多的敌人。</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 炸弹人 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> map[][] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>][<span class="number">21</span>]; <span class="comment">// 创建一个二维数组来存储地图</span></div><div class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">    System.out.print(<span class="string">"输入地图的长(&lt;20)："</span>);</div><div class="line">    <span class="keyword">int</span> h = scanner.nextInt();<span class="comment">// 地图的长</span></div><div class="line">    System.out.print(<span class="string">"输入地图的宽(&lt;21)："</span>);</div><div class="line">    <span class="keyword">int</span> w = scanner.nextInt();<span class="comment">// 地图的宽</span></div><div class="line">    <span class="comment">// 初始化地图</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * (13x13) </div><div class="line">#############</div><div class="line">#GG.GGG#GGG.#</div><div class="line">###.#G#G#G#G#</div><div class="line">#.......#..G#</div><div class="line">#G#.###.#G#G#</div><div class="line">#GG.GGG.#.GG#</div><div class="line">#G#.#G#.#.###</div><div class="line">##G...G.....#</div><div class="line">#G#.#G###.#G#</div><div class="line">#...G#GGG.GG#</div><div class="line">#G#.#G#G#.#G#</div><div class="line">#GG.GGG#G.GG#</div><div class="line">#############</div><div class="line">     */</div><div class="line">    System.out.println(<span class="string">"逐行输入："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</div><div class="line">      String str = scanner.next();</div><div class="line">      map[i] = str.toCharArray();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; <span class="comment">// 上下左右</span></div><div class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>; <span class="comment">// 存储坐标</span></div><div class="line">    <span class="keyword">int</span> account = <span class="number">0</span>;</div><div class="line">    System.out.println(<span class="string">"地图输出："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</div><div class="line">        System.out.print(map[i][j] + <span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span> (map[i][j] == <span class="string">'.'</span>) &#123;</div><div class="line">          x = i;y = j;</div><div class="line">          <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">          <span class="keyword">while</span> (map[x][y] != <span class="string">'#'</span>) &#123; <span class="comment">// 向上</span></div><div class="line">            <span class="keyword">if</span> (map[x][y] == <span class="string">'G'</span>) &#123;</div><div class="line">              sum++;</div><div class="line">            &#125;</div><div class="line">            x--;</div><div class="line">          &#125;</div><div class="line">          x = i;y = j;<span class="comment">//重置x和y的值</span></div><div class="line">          <span class="keyword">while</span> (map[x][y] != <span class="string">'#'</span>) &#123; <span class="comment">// 向下</span></div><div class="line">            <span class="keyword">if</span> (map[x][y] == <span class="string">'G'</span>) &#123;</div><div class="line">              sum++;</div><div class="line">            &#125;</div><div class="line">            x++;</div><div class="line">          &#125;</div><div class="line">          x = i;y = j;</div><div class="line">          <span class="keyword">while</span> (map[x][y] != <span class="string">'#'</span>) &#123; <span class="comment">// 向左</span></div><div class="line">            <span class="keyword">if</span> (map[x][y] == <span class="string">'G'</span>) &#123;</div><div class="line">              sum++;</div><div class="line">            &#125;</div><div class="line">            y--;</div><div class="line">          &#125;</div><div class="line">          x = i;y = j;</div><div class="line">          <span class="keyword">while</span> (map[x][y] != <span class="string">'#'</span>) &#123; <span class="comment">// 向右</span></div><div class="line">            <span class="keyword">if</span> (map[x][y] == <span class="string">'G'</span>) &#123;</div><div class="line">              sum++;</div><div class="line">            &#125;</div><div class="line">            y++;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (sum &gt; account) &#123;</div><div class="line">            account = sum;</div><div class="line">            p = i;</div><div class="line">            q = j; <span class="comment">// ***</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      System.out.println();</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"共消灭了："</span> + account + <span class="string">" 个敌人，放置的坐标为：（"</span> + p + <span class="string">","</span> + q + <span class="string">"）"</span>);</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h3 id="火柴棍等式"><a href="#火柴棍等式" class="headerlink" title="火柴棍等式"></a>火柴棍等式</h3><ul><li><p>给定火柴数，输出可以摆出的等式，注意“=”和“+”分别占两根火柴</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 火柴棍等式 </span>&#123;</div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 计算数字所需要的火柴数</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a[]= &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</div><div class="line">    <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(num/<span class="number">10</span>!=<span class="number">0</span>) &#123;</div><div class="line">      m=num%<span class="number">10</span>;</div><div class="line">      sum+=a[m];</div><div class="line">      num=num/<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    sum+=a[num];</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    System.out.print(<span class="string">"输入火柴数："</span>);</div><div class="line">    Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">    <span class="keyword">int</span> m=scanner.nextInt();</div><div class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,num=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>((m-<span class="number">4</span>)%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">      a=(m-<span class="number">4</span>)/<span class="number">2</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      a=(m-<span class="number">4</span>+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">      b=a/<span class="number">2</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      b=(a+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) &#123;</div><div class="line">      num=(<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i-<span class="number">1</span>)+num;</div><div class="line">    &#125;</div><div class="line">    System.out.println(num);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=num;i++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=num;j++) &#123;</div><div class="line">        k=i+j;</div><div class="line">        <span class="keyword">if</span>(fun(i)+fun(j)+fun(k)==(m-<span class="number">4</span>)) &#123;</div><div class="line">          System.out.println(i+<span class="string">"+"</span>+j+<span class="string">"="</span>+k);</div><div class="line">          sum++;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    System.out.println(<span class="string">"共有 "</span>+sum+<span class="string">" 个等式符合条件"</span>);</div><div class="line">    scanner.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li></ul><h3 id="数的全排列"><a href="#数的全排列" class="headerlink" title="数的全排列"></a>数的全排列</h3><ul><li><p>例如：123的全排列是123、132、213、231、312、321共6个输出有限个少量数字的全排列，若有9个以上写的就显得臃肿。</p><p></p><details><br><summary><strong>展开查看源码</strong></summary><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 数的全排列 </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=<span class="number">3</span>;c++) &#123;</div><div class="line">          <span class="keyword">if</span>(a!=b &amp;&amp; a!=c &amp;&amp; b!=c) &#123;</div><div class="line">            System.out.println(<span class="string">""</span>+a+b+c);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></details></li><li><p>下一章节会使得简洁。</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;桶排序&quot;&gt;&lt;a href=&quot;#桶排序&quot; class=&quot;headerlink&quot; title=&quot;桶排序&quot;&gt;&lt;/a&gt;桶排序&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;图解
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.xiongchang.vip/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://blog.xiongchang.vip/categories/%E7%AE%97%E6%B3%95/java/"/>
    
    
      <category term="算法" scheme="http://blog.xiongchang.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://blog.xiongchang.vip/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础</title>
    <link href="http://blog.xiongchang.vip/HTML%E5%9F%BA%E7%A1%80.html"/>
    <id>http://blog.xiongchang.vip/HTML基础.html</id>
    <published>2019-11-07T12:31:49.000Z</published>
    <updated>2019-11-15T06:31:37.621Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h2 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h2><h3 id="表单（form）"><a href="#表单（form）" class="headerlink" title="表单（form）"></a>表单（form）</h3><ul><li><kbd>&lt; form ></kbd> 标签元素列表：<a id="more"></a></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table><ul><li>HTML 表单元素：</li></ul><table><thead><tr><th>标签元素</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;input&gt;</code></td><td>根据不同的 type属性，可以变化为多种形态</td></tr><tr><td><code>&lt;select&gt;</code></td><td>下拉列表</td></tr><tr><td><code>&lt;option&gt;</code></td><td>定义待选择的选项</td></tr><tr><td><code>&lt;textarea&gt;</code></td><td>文本域</td></tr><tr><td><code>&lt;button&gt;</code></td><td>定义可点击的按钮</td></tr><tr><td><code>&lt;datalist&gt;</code><img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>为 <code>&lt;input&gt;</code> 元素规定预定义选项列表（IE不支持）</td></tr><tr><td><code>&lt;keygen&gt;</code><img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于表单的密钥对生成器字段（IE不支持）</td></tr><tr><td><code>&lt;output&gt;</code><img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>定义不同类型的输出，比如脚本的输出（IE8以下不支持）</td></tr></tbody></table><ul><li><kbd>&lt; input &gt;</kbd> 中<kbd>type</kbd> 属性：</li></ul><table><thead><tr><th>type 属性值</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>定义供文本输入的单行输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>submit</td><td>提交按钮</td></tr><tr><td>radio</td><td>单选</td></tr><tr><td>checkbox</td><td>多选</td></tr><tr><td>button</td><td>普通按钮</td></tr><tr><td>reset</td><td>重置按钮</td></tr><tr><td>color<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含颜色的输入字段（IE不支持）</td></tr><tr><td>date<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含日期的输入字段（IE不支持）</td></tr><tr><td>datetime<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户选择日期和时间（有时区）（Chrome、Firefox 或 IE不支持）</td></tr><tr><td>datetime-local<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户选择日期和时间（无时区）（Firefox和IE不支持）</td></tr><tr><td>email<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含电子邮件地址的输入字段（IE9以下不支持）</td></tr><tr><td>month<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户选择月份和年份（Firefox或IE11以下不支持）</td></tr><tr><td>number<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含数字值的输入字段，对数字做出限制（IE9以下不支持）</td></tr><tr><td>range<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含一定范围内的值的输入字段（IE9以下不支持）</td></tr><tr><td>search<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于搜索字段</td></tr><tr><td>tel<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含电话号码的输入字段（只有 Safari 8 支持 tel 类型）</td></tr><tr><td>time<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户选择时间（无时区）（Firefox或IE11以下不支持）</td></tr><tr><td>url<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于应该包含 URL 地址的输入字段（IE9以下不支持）</td></tr><tr><td>week<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户选择周和年（IE不支持）</td></tr></tbody></table><ul><li><kbd>&lt; input &gt;</kbd> 其他属性：</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>输入字段的初始值</td></tr><tr><td>readonly</td><td>只读</td></tr><tr><td>disabled</td><td>字段被禁用，不会被提交</td></tr><tr><td>size</td><td>输入字段的尺寸（以字符计）</td></tr><tr><td>maxlength</td><td>输入字段允许的最大长度</td></tr><tr><td>autocomplete<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定表单或输入字段是否应该自动完成（适用于 <code>&lt;form&gt;</code>标签）</td></tr><tr><td>autofocus<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>页面加载时 <code>&lt;input&gt;</code> 元素应该自动获得焦点（IE9以下不支持）</td></tr><tr><td>form<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定 <code>&lt;input&gt;</code> 元素所属的一个或多个表单</td></tr><tr><td>formaction<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>覆盖 <code>&lt;form&gt;</code> 元素的 action 属性，适用于 type=”submit/image”</td></tr><tr><td>formenctype<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>覆盖 <code>&lt;form&gt;</code> 元素的 enctype 属性，适用于 type=”submit/image”</td></tr><tr><td>formmethod<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>覆盖 <code>&lt;form&gt;</code> 元素的 method 属性，适用于 type=”submit/image”</td></tr><tr><td>formnovalidate<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>覆盖 <code>&lt;form&gt;</code> 元素的 novalidate 属性，适用于 type=”submit”</td></tr><tr><td>formtarget<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>覆盖 <code>&lt;form&gt;</code> 元素的 target 属性，适用于 type=”submit/image”</td></tr><tr><td>height 和 width<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定 <code>&lt;input&gt;</code> 元素的高度和宽度，仅用于 <code>&lt;input type=&quot;image&quot;&gt;</code></td></tr><tr><td>list<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>引用的 <code>&lt;datalist&gt;</code> 元素中包含了 <code>&lt;input&gt;</code> 元素的预定义选项</td></tr><tr><td>min 和 max<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定 <code>&lt;input&gt;</code> 元素的最小值和最大值</td></tr><tr><td>multiple<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>允许用户在 <code>&lt;input&gt;</code> 元素中输入一个以上的值</td></tr><tr><td>pattern (regexp)<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用于检查 <code>&lt;input&gt;</code> 元素值的正则表达式</td></tr><tr><td>placeholder<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>用以描述输入字段预期值的提示</td></tr><tr><td>required<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定在提交表单之前<strong>必须</strong>填写输入字段</td></tr><tr><td>step<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>规定 <code>&lt;input&gt;</code> 元素的合法数字间隔</td></tr><tr><td>novalidate<img src="http://imgs.xiongchang.vip/img_16.png" alt="HTML5" style="float:right;border:none"></td><td>属于 <code>&lt;form&gt;</code> 属性。规定在提交表单时不对表单数据进行验证。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;HTML基础&quot;&gt;&lt;a href=&quot;#HTML基础&quot; class=&quot;headerlink&quot; title=&quot;HTML基础&quot;&gt;&lt;/a&gt;HTML基础&lt;/h2&gt;&lt;h3 id=&quot;表单（form）&quot;&gt;&lt;a href=&quot;#表单（form）&quot; class=&quot;headerlink&quot; title=&quot;表单（form）&quot;&gt;&lt;/a&gt;表单（form）&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;kbd&gt;&amp;lt; form &gt;&lt;/kbd&gt; 标签元素列表：
    
    </summary>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/categories/html/"/>
    
    
      <category term="html" scheme="http://blog.xiongchang.vip/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>java基础（二）</title>
    <link href="http://blog.xiongchang.vip/java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://blog.xiongchang.vip/java基础（二）.html</id>
    <published>2019-11-03T11:57:04.000Z</published>
    <updated>2019-11-15T06:31:49.626Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li><p>java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法；这种<strong>动态获取</strong>信息以及<strong>动态调用</strong>对象的方法的功能称为java语言的反射机制。<a id="more"></a></p></li><li><p>简单的说：反射机制是程序在<strong>运行时</strong>能够获取自身的信息。在java中，只要给定类的名字，那么就可以通过反射机制来获得类的所有信息。包括其访问的修饰符、父类、实现的接口、属性和方法的所有信息，并可在运行时创建对象、修改属性（包括私有的）、调用方法（包括私有的）。</p></li><li><p>静态编译：在编译时确定类型，绑定对象，即通过。</p><p><code>Student stu = new Student(&quot;zhangsan&quot;,30);</code></p></li><li><p>动态编译：运行时确定类型，绑定对象。</p><p>动态编译最大限度发挥了java的灵活性，体现了动态的应用，用以降低类之间的耦合性。<code>Class.forName(&quot;com.mysql.jdbc.Driver.class&quot;).newinstance();</code></p></li><li><p>反射机制优缺点：</p><p>优点：可实现动态创建对象和编译，体现出很大的灵活性</p><p>缺点：使用反射基本上是一种解释操作，这类操作总是慢于直接执行的相同操作。</p></li><li><p>提供的主要功能：</p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的方法</li></ol></li><li><p>Class对象的获取：</p><ul><li><code>object.getClass()</code></li><li><code>class.getSuperclass()</code></li><li><code>.class语法</code> 直接获取</li><li><code>Class.forName(类名)</code> 用的较多</li><li><code>Primitive.TYPE</code> 基本数据类型的包装类获取Class的方式</li></ul></li><li><p><code>java.lang.reflect</code>库：</p><ul><li>Class类与java.lang.reflect类库一起对反射的概念进行支持。</li></ul></li><li><p>java.lang包下：</p><ul><li>Class<t>:表示一个正在运行的java应用程序中的类和接口，是Reflection的起源。</t></li><li>java.lang.reflect包下：</li><li>Field类：代表类的成员变量（成员变量也称为类的属性）；<ul><li>Method类：代表类的方法；</li><li>Constructor类：代表类的构造方法；</li><li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。</li></ul></li></ul></li><li><p>通过反射实例化对象：</p><ul><li>有些没办法new时，只能用反射动态生成</li><li>实例化无参构造函数的对象，两种方式：<ul><li><code>Class.newInstance();</code></li><li><code>Class.getConstructor(new Class[]{}).newInstance(new Object[]{})</code></li></ul></li></ul></li><li><p>实例化带参构造函数的对象</p></li><li><p><code>clazz.getConstructor(Class&lt;?&gt;...parameterTypes).newInstance(Object...initargs)</code></p></li><li><p>通过反射获取并调用方法：</p><ul><li><p>获得当前类以及超类的public Method</p><p><code>Method[] arrMethods=classType.getMethods();</code></p></li><li><p>获得当前类申明的所有Method</p><p><code>Method[] arrMethods=classType.getDeclaredMethods();</code></p></li><li><p>获得当前类以及超类指定的public Method</p><p><code>Method method=classType.getMethod(String name,Class&lt;?&gt;...parameterType);</code></p></li><li><p>获得当前类申明的指定的Method</p><p><code>Method method=classType.getDeclaredMethod(String name,Class&lt;?&gt;...parameterTypes);</code></p></li><li><p>通过反射动态运行指定Method</p><p><code>Object obj=method.invoke(Object obj,Object args)</code></p></li></ul></li><li><p>通过反射获取并调用属性：</p><ul><li><p>获得当前类以及超类public Field</p><p><code>Filed[] arrFields=classType.getFields();</code></p></li><li><p>获得当前类申明的所有Filed</p><p><code>Filed[] arrFields=classType.getDeclaredFields();</code></p></li><li><p>获得当前类以及超类指定的public Filed</p><p><code>Field field=classType.getField(String name);</code></p></li><li><p>获得当前类申明的指定的Field</p><p><code>Field field=classType.getDeclaredField(String name);</code></p></li><li><p>通过反射动摇设定Field的值</p><p><code>field.set(Object obj,Object value);</code></p></li><li><p>通过反射动态湖区Field的值</p><p><code>Object obj =field.get(Object obj);</code></p></li></ul></li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>程序：安装在磁盘上的一段指令集合，<strong>静态概念</strong></p></li><li><p>进程：运行中的程序，<strong>动态概念</strong>。每个进程有独立的资源空间。（<strong>分配者</strong>）</p></li><li><p>线程：又称为轻量级进程，线程是进程中的一个<strong>实体</strong>（<strong>工作者</strong>）</p></li><li><p>多线程：在单个程序中可以同时运行多个不同的线程执行不同的任务。</p></li></ul><h3 id="多线程特点"><a href="#多线程特点" class="headerlink" title="多线程特点"></a>多线程特点</h3><ul><li><p>一个进程可以包含一个或多个线程</p></li><li><p>一个程序实现多个代码同时交替运行就需要产生多个线程</p></li><li><p>程序本身不拥有系统资源，与同属一个进程的其他线程共享所在进程所拥有的资源</p></li><li><p>同一进程中的多个线程之间可以并发执行。（由cpu抽时间完成）</p></li></ul><h3 id="多线程目的"><a href="#多线程目的" class="headerlink" title="多线程目的"></a>多线程目的</h3><ul><li>大限度利用cpu，对于多核（单核不会并发执行），利用cpu与和I/O等资源打交道的空隙时间。</li></ul><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><ul><li><p>通过<strong>继承Thread类</strong>创建线程（类）</p><ul><li>普通java类如继承自Thread类，就成为一个线程类，并可以通过该类的start方法类启动线程，执行线程代码</li><li>Thread类的子类可直接实例化，但在子类中必须覆盖<strong>run方法</strong>才能真正运行线程的代码。</li></ul></li><li><p>通过<strong>实现Runnable接口</strong>创建线程（接口）</p><ul><li><p>实现Runnable接口的类必须借助Thread类才能创建线程。</p></li><li><p>通过Runnable接口创建线程分为两步：</p><ul><li><p>创建实现Runnable接口的类的实例；</p></li><li><p>创建一个Thread类对象，将第一步实例化得到的Runnable对象作为参数传入Thread；类的构造方法。</p></li></ul></li><li><p>通过Thread类的<strong>start方法</strong>启动线程。</p></li></ul></li></ul><h3 id="创建并运行线程"><a href="#创建并运行线程" class="headerlink" title="创建并运行线程"></a>创建并运行线程</h3><ul><li><p>新建状态（New Thread）：</p><ul><li><p>在Java中，使用new创建一个线程后，该线程是一个空对象，它具备线程的一些特征，但此时系统没有为其分配空间，此时处于创建状态。</p></li><li><p>线程处于创建状态时，可通过Thread类的方法来设置线程各个属性。</p><p>如：线程的优先级（setPriority）、线程名（setName）和线程的类型（setDaemon）等</p></li></ul></li><li><p>就绪状态（Runnable）：</p></li><li><p>使用<strong>start（）方法</strong>启动一个线程后，系统为该线程分配了除cpu外的所需资源，使该线程处于就绪状态。此外，若某个线程执行了<strong>yield（）</strong>方法，那么该线程会被暂时剥夺cpu资源，重新就绪。（跳出排队，重新开始排队）</p></li><li><p>运行状态（Running）：</p><ul><li>Java运行系统通过调度选中一个处于就绪状态的线程，使其占有cpu并转为运行状态。此时，系统真正执行线程的<strong>run（）</strong>方法。</li><li>可通过Thread类的<strong>isAlive方法</strong>判断是否处于就绪/运行状态：<ul><li>true（就绪/运行） false（阻塞/停止）</li></ul></li></ul></li></ul><h3 id="阻塞和唤醒线程"><a href="#阻塞和唤醒线程" class="headerlink" title="阻塞和唤醒线程"></a>阻塞和唤醒线程</h3><ul><li><p>阻塞状态（Blocked）</p><ul><li>一个正在运行的线程因某些原因不能继续运行时，就进入阻塞状态。</li></ul></li><li><p>阻塞原因：</p><ul><li>当执行了某个线程对象的sleep（）等阻塞类型的方法时，该线程对象会被置入一个阻塞集（Blocked Pool）内，等待超时而自动苏醒。</li><li>当多个线程试图进入某个同步区域（synchronized）时，没能进入该同步区域的线程会被置入锁定集（Lock Pool），直到获得该同步区域的锁，进入就绪状态</li><li>当线程执行了某个对象的<strong>wait（）</strong>方法时，线程会被置入该对象的等待集（Wait Pool）中，直到执行了该对象的<strong>notify（）</strong>方法，<strong>wait（）</strong>/<strong>notify（）</strong>方法的执行要求线程首先获取到该对象的锁。</li></ul></li></ul><h3 id="死亡状态（Dead）"><a href="#死亡状态（Dead）" class="headerlink" title="死亡状态（Dead）"></a>死亡状态（Dead）</h3><ul><li>线程在run（）方法执行结束后进入死亡状态，此外，如果线程执行了<strong>interrupt（）</strong>或<strong>stop（）</strong>方法，那么它也会以异常退出的方式进入死亡状态。</li></ul><h3 id="终止线程的三种方法"><a href="#终止线程的三种方法" class="headerlink" title="终止线程的三种方法"></a>终止线程的三种方法</h3><ul><li><p>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止，推荐使用。</p></li><li><p>使用<strong>stop方法</strong>强行终止线程（<strong>不推荐</strong>使用，因为stop和suspend、resume一样，可能发生不可预料的结果）</p></li><li><p>使用<strong>interrupt方法</strong>中断线程。</p></li></ul><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li><p>目的：</p><ol><li>防止多个线程处理一个数据对象时，对数据造成破坏</li><li>保证多线程安全访问竞争资源的一种手段</li></ol></li><li><p>同步和锁：</p><ul><li>Java中每个对象都有一个内置锁；</li><li>当运行到非静态的<strong>synchroniezd</strong>同步方法上时，自动获得正在执行代码了的当前实例（this实例）有关的锁；</li><li>获得一个对象的锁也称为获取锁、锁定对象、在对象上同步。当程序运行到synchroniezd同步方法或代码块时该对象锁才起作用；</li><li>一个对象一个锁，一个线程获得该锁，其他线程无法获得，直到释放锁，才可以获得。</li></ul></li><li><p>对于同步，一般而言在Java代码中需要完成两个操作：</p><ol><li>把竞争访问的资源表示为<strong>private</strong>；</li><li>同步那些访问资源的代码，使用synchronized关键字来修饰方法或代码块。当synchronized方法执行完或发生异常时，会自动释放锁。</li></ol></li><li><p>线程通信：（生产者-消费者问题）</p><ul><li>Java提供了3个重要方法巧妙解决线程间的通信问题：<ul><li><strong>Wait</strong>()：使调用该方法的线程释放共享资源的锁，然后从运行态退出，进入等待队列，直到被再次唤醒；</li><li><strong>Notify</strong>()：唤醒队列中第一个等待统一共享资源的进程，并使该进程退出等待队列，进入可运行态；</li><li><strong>notifyAll</strong>()：唤醒队列中所有等待统一共享资源的进程，并使该进程退出等待队列，进入可运行态，此时优先级最高的最先执行；</li></ul></li></ul></li></ul><h2 id="I-O框架"><a href="#I-O框架" class="headerlink" title="I/O框架"></a>I/O框架</h2><ul><li><strong>File</strong>类：具体方法参照API文档</li></ul><h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><ul><li><p>程序调用自身的编程技巧称为递归（recursion）</p></li><li><p>在方法里，自身调用自身</p></li><li><p>在使用递归策略时，必须有一个明确的递归约束条件，称为递归出口（否则会死循环）</p></li></ul><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><ul><li><p>流按其流向分为“输入流”和“输出流”（以内存为参照物）</p></li><li><p>流按数据传输单位分为“字节流”和“字符流”</p><ul><li>“字节流”用来读写8位二进制的字节（MP3，MP4，多媒体文件，图片，视频等）</li></ul><ul><li>“字符流”用来读写16位二进制的字符</li></ul></li><li><p>流按功能分为“节点流”和“过滤流”</p><ul><li>“节点流”用于直接操作目标设备的流。（直接跟数据源打交道）例如：磁盘或一块区域。</li><li>“过滤流”对节点流进行封装和链接，不直接跟数据源打交道。</li></ul></li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><ul><li><p><code>inputStream</code> 抽象类：</p><ul><li>字节流类用于向字节流读写8位二进制字节。以inputStream和outputStream为顶层类，它们都是抽象类</li><li>inputStream是定义了字节输入流的抽象类</li></ul></li><li><p><code>outputStream</code>抽象类：</p><ul><li>outputStream是定义了字节输出流的抽象类</li><li>该类所有方法返回void值，在出错情况下抛IOException异常</li></ul></li><li><p><code>FileinputStream</code>类：</p><ul><li>表示能从文件读取字节的inputStream类</li></ul></li><li><p><code>FileoutputStream</code>类：</p><ul><li>表示能从文件写入字节的outputStream类</li></ul></li><li><p><code>ByteArrayInput/OutputStream</code>类：</p><ul><li>ByteArrayInputStream是把字节数组当成源的输入流。</li><li>ByteArrayOutputStream是把字节数组当作目标的输出流。</li></ul></li><li><p>过滤流：</p><ul><li>过滤流仅仅是为底层透明地提供扩展功能的输入/输出流的包装，这些流一般由普通类的方法访问。</li><li>过滤字节流：<code>filterInput/OutputStream</code></li><li>这些类提供的方法和InputStream和OutputStream类的方法相同</li><li>常用的过滤流BufferedInput/OutputStream和DataInput/OutputStream<ul><li><code>BufferedInput/OutputStream</code>：需要使用已经存在的节点流来构造，提供带缓冲区的读写，提高了读写的效率。</li><li><code>DataInput/OutputStream</code>：数据输入输出流允许应用程序读写基本Java数据类型。应用程序可以使用数据输出流写入稍后由数据输入流读取。读写顺序要保持一致。</li></ul></li></ul><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3></li><li><p>字节流提供处理任何类型输入/输出操作的足够功能，但不能直接操作Unicode字符，因而需要字符流。</p></li><li><p>字符流层次结构的顶层是Reader和Writer抽象类。</p></li><li><code>Reader/Writer</code> 抽象类<ul><li>Reader是定义Java的流式字符输出模式的抽象类；</li><li>Writer是定义流式字符输出的抽象类；</li></ul></li><li><code>FileReader/FileWriter</code> 类<ul><li>FileReader 表示可以读取文件内容的Reader类；</li><li>FileWriter 表示可以写文件Writer类；</li></ul></li><li><code>BufferedReader/BufferedWriter</code> 类<ul><li>BufferedReader 通过缓冲输入提高性能；</li><li>BufferedWriter 通过缓冲输出提高性能；</li></ul></li></ul><h3 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h3><ul><li><code>ObjectInputStream/ObjectOutputStream</code> 类<ul><li>ObjectInputStream/ObjectOutputStream分别和FileInputStream/FileOutputStream一起使用时，可以为应用程序提供对对象的持久存储。</li><li>把对象以某种特定的编码格式输出称为<kbd>序列化</kbd>；把写入的编码格式内容还原成对象称为<kbd>反序列化</kbd>。</li><li>被序列化的对象必须实现<kbd>Serializable</kbd>接口。</li></ul></li><li><code>InputStreamReader/OutputStreamWriter</code> 类<ul><li>InputStreamReader/OutputStreamWriter 是转换流，是指将字节流与字符流之间的转换。</li><li>字符流底层还是字节流。</li><li>字节流中的数据都是字符时，转成字符流操作更加有效。</li><li>如果使用非默认编码保存文件或者读取文件时，需要用到转换流，因为字节流的重载构造方法中有指定编码格式参数，而FileReader和FileWriter是默认编码的文本文件。</li></ul></li><li><code>RandomAccessFile</code> 类<ul><li>支持对随机访问文件的读取和写入。</li><li>随机访问文件的行为类似存储在文件系统中的一个大型的byte数组，存在指向该隐含数组的光标或索引，称为文件指针。</li><li>输入操作从文件指针开始读取字节，随着对字节的读取而前移此文件的指针。</li><li>该文件指针可以通过<code>getFilePointer</code> 方法读取，通过<code>seek</code> 方法设置。</li></ul></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="OSI-七层参考模型"><a href="#OSI-七层参考模型" class="headerlink" title="OSI 七层参考模型"></a>OSI 七层参考模型</h3><p><img src="http://imgs.xiongchang.vip/img_14.png"></p><ul><li><p>数据封装过程：</p><p><img src="http://imgs.xiongchang.vip/img_13.jpg"></p></li></ul><h3 id="TCP-IP-模型"><a href="#TCP-IP-模型" class="headerlink" title="TCP/IP 模型"></a>TCP/IP 模型</h3><p><img src="http://imgs.xiongchang.vip/img_12.jpg"></p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li>网络中每台主机都必须有一个唯一的IP地址；</li><li>因特网上的IP地址具有全球唯一性；</li><li>对应的类是：InetAddress类</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul><li>端口号用来标识该计算机上的应用程序，代表此应用程序逻辑地址；</li><li>端口号使用一个16位的数字来表示，范围是在0 ~ 65535，推荐1024以下的端口号保留给预定义的服务。</li></ul><h3 id="常见传输协议"><a href="#常见传输协议" class="headerlink" title="常见传输协议"></a>常见传输协议</h3><ul><li>TCP是一种面向连接的保证可靠传输的协议，通过TCP协议传输，得到的是一个顺序的无差错的数据。</li><li>UDP是一种无连接的协议，灭个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能保证的。</li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li>常用的网络编程模型是<kbd>C/S</kbd>通信模式；</li><li>使用Socket进行网络通信的过程：<ul><li>服务器程序将一个套接字绑定到一个特定的端口，并通过此套接字等待和监听客户的连接请求；</li><li>客户程序通过服务器程序所在的主机名和端口号发出连接请求；</li><li>如果一切正常，服务器接受连接请求。并获得一个新的绑定到不同端口地址的套接字；</li><li>客户、服务器通过读、写套接字进行通讯。</li></ul></li></ul><h3 id="基于TCP协议的Socket编程"><a href="#基于TCP协议的Socket编程" class="headerlink" title="基于TCP协议的Socket编程"></a>基于TCP协议的Socket编程</h3><ul><li>创建TCP<strong>服务端</strong>步骤：<ol><li>创建一个<code>ServerSocket</code>对象；</li><li>调用<code>accept()</code>方法接受客户请求；</li><li>从<code>Socket</code>中获取 <code>I/O 流</code>；</li><li>对 <code>I/O 流</code>进行读写操作，完成与<em>客户端</em>的交互；</li><li>关闭 I/O 流和Socket。</li></ol></li><li>创建TCP<strong>客户端</strong>步骤：<ol><li>创建一个<code>Socket</code>对象；</li><li>从<code>Socket</code>中获取<code>I/O 流</code>；</li><li>对 <code>I/O 流</code>进行读写操作，完成与<em>服务端</em>的交互；</li><li>关闭 I/O 流和Socket。</li></ol></li><li>强调：客户端和服务端进行数据传输时，<u>客户端的输入流</u>对应<u>服务端的输出流</u>，<u>客户端的输出流</u>对应<u>服务端的输入流</u>。</li></ul><h3 id="基于UDP协议的Socket编程"><a href="#基于UDP协议的Socket编程" class="headerlink" title="基于UDP协议的Socket编程"></a>基于UDP协议的Socket编程</h3><ul><li>创建发送端<ol><li>建立<code>DatagramSocket</code>对象。该端点建立，系统会随机分配一个端口。如果不想随机可以手动配置；</li><li>将数据进行<code>packet包</code>的封装，必须要指定目的地地址和端口；</li><li>通过<code>socket</code>服务的<code>send方法</code>将该包发出；</li><li>将socket关闭。</li></ol></li><li>创建接收端<ol><li>建立<code>DatagramSocket</code>对象。要监听一个端口；</li><li>通过<code>socket</code>的<code>receive方法</code>将数据存入数据包中；</li><li>通过数据包<code>dp</code>的方法<code>getData()</code>、<code>getAddress()</code>、<code>getPort()</code>等方法获取包中的指定信息。</li><li>将socket关闭。</li></ol></li></ul><h2 id="Annotation-注解"><a href="#Annotation-注解" class="headerlink" title="Annotation 注解"></a>Annotation 注解</h2><h3 id="Annotation-的原理"><a href="#Annotation-的原理" class="headerlink" title="Annotation 的原理"></a>Annotation 的原理</h3><ul><li>Annotation 是一种接口。通过Java<strong>反射机制</strong>中的相关API来访问Annotation 信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。</li><li>Annotation 不会影响程序代码的执行。</li><li>Java语言解释器在工作时会忽略这些Annotation ，因此在JVM中这些Annotation 是“不起作用”的，只能通过配套的工具才能对这些Annotation 类型的信息进行访问和处理。Annotation 的工具统称<strong>APT</strong>。</li></ul><h3 id="常见的标准-Annotation"><a href="#常见的标准-Annotation" class="headerlink" title="常见的标准 Annotation"></a>常见的标准 Annotation</h3><ul><li><u>@Override</u>：用来指定方法重写，覆盖父类的方法。</li><li><u>@Deprecated</u>：用于表示某个程序元素（类、方法等）已过时。</li><li><u>@SuppressWarnings</u>：用于取消显示指定的编译器警告。</li></ul><h3 id="自定义-Annotation"><a href="#自定义-Annotation" class="headerlink" title="自定义 Annotation"></a>自定义 Annotation</h3><ul><li><p>自定义语法如下：</p><blockquote><p>访问修饰符 @interface Annotation名称 {</p><p>​ 返回类型 方法名() [default 默认值] ;</p><p>​ …</p><p>}</p></blockquote></li><li><p>特点：</p><ol><li>Annotation 类型使用的关键字<strong>@interface</strong> 不是interface。</li><li>Annotation 类型的方法必须声明为<strong>无参</strong>，<strong>无异常抛出</strong>的。</li><li>方法返回值类型必须为<strong>primitive类型</strong>、<strong>String类型</strong>、<strong>Class类型</strong>、<strong>枚举类型</strong>、<strong>annotation类</strong>型或前面类型之一作为元素的<strong>一维数组</strong>。</li><li>方法的后面可以使用default和一个默认数值来声明成员的默认值，<strong>null</strong>不能作为成员的默认值。</li><li>在定义Annotation 型态时，不能继承其他的Annotation 型态或是接口。</li></ol></li></ul><h2 id="Meta-Annotation-元注解"><a href="#Meta-Annotation-元注解" class="headerlink" title="Meta Annotation 元注解"></a>Meta Annotation 元注解</h2><ul><li><p>可以对Annotation 进行注解的注解。</p></li><li><p>标准Meta Annotation 有：@Retention、@Target、@Documented、@Inherited</p></li><li><p>@Retention ：</p><ul><li><p>作用：控制被@Retention注释的Annotation信息的<strong>保留时间长短</strong>。</p></li><li><p>语法结构：<code>@Retention(SOURCE/CLASS/RUNTIME)</code></p><ul><li>SOURCE：Annotation信息在编译阶段被丢弃，仅保留在Java源文件中。</li><li>CLASS：Annotation信息在编译阶段被保留，保留在class文件中，但运行阶段不存在。</li><li>RUNTIME：Annotation信息一直保留到运行阶段，直到退出虚拟机才被丢弃。</li></ul></li></ul></li><li><p>@Target:</p><ul><li><p>作用：表示的是一个Annotation的<strong>适用范围</strong>。</p></li><li><p>语法结构：<code>@Target({TYPE,METHOD,FIELD,···})</code></p><ul><li>TYPE：只能在类或接口或枚举上使用</li><li>FIELD：在成员变量上使用</li><li>METHOD：在方法中使用</li><li>PARAMETER：在参数上使用</li><li>CONSTRUCTOR：在构造中使用</li><li>LOCAL_VARIABLE：局部变量上使用</li><li>ANNOTATION_TYPE：只能在Annotation中使用</li><li>PACKAGE：只能在包中使用</li></ul></li></ul></li><li><p>@Documented：</p><ul><li>作用：制作JavaDoc文件的同时，也一并将Annotation的讯息加入到API文件中。</li></ul></li><li><p>@Inherited：</p><ul><li>作用：表示igeAnnotation是否允许被其子类继承下来。</li></ul></li></ul><h2 id="反射与-Annotation"><a href="#反射与-Annotation" class="headerlink" title="反射与 Annotation"></a>反射与 Annotation</h2><ul><li>一个Annotation真正起作用，必须结合反射机制，在<code>java.lang.reflect</code> 反射包中提供<code>AccessibleObject类</code>来对 Annotation 进行操作。</li><li>常用方法：<ul><li><strong>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotation)</strong>：判断是否使用指定的Annotation。</li><li><strong>getAnotations()</strong>：得到全部的Annotation。</li></ul></li><li>无反射，不注解。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法；这种&lt;strong&gt;动态获取&lt;/strong&gt;信息以及&lt;strong&gt;动态调用&lt;/strong&gt;对象的方法的功能称为java语言的反射机制。
    
    </summary>
    
    
      <category term="java" scheme="http://blog.xiongchang.vip/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.xiongchang.vip/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架配置步骤</title>
    <link href="http://blog.xiongchang.vip/SSM%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4.html"/>
    <id>http://blog.xiongchang.vip/SSM框架配置步骤.html</id>
    <published>2019-10-28T13:01:40.000Z</published>
    <updated>2019-11-15T06:32:40.868Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h1 id="使用-Maven-配置-SSM-框架"><a href="#使用-Maven-配置-SSM-框架" class="headerlink" title="使用 Maven 配置 SSM 框架"></a>使用 Maven 配置 SSM 框架</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li><p>平台：</p><p>Eclipse Mars.2、Windows 10、JDK 1.8、Tomcat 8.0、Maven 3.6、Navicat Premium 12（MySQL）</p></li><li><p>Eclipse配置：<a id="more"></a></p><ol><li>配置编码格式 —– UTF-8；</li><li>配置JDK；</li><li>配置Maven；</li><li>配置Tomcat。</li></ol></li><li><p>项目框架配置：</p><ol><li><p>新建Maven项目；</p></li><li><p>配置Project Facets：</p><ul><li><p>Dynamic Web Module 2.5</p><p>设置Runtimes –&gt; Tomcat</p></li><li><p>java 1.8</p></li><li><p>javaScript 1.0</p></li></ul></li><li><p>build path配置：</p><p><code>source</code> –&gt; 添加<code>src/main/java</code>（源代码）、<code>src/main/resources</code>（配置文件）、<code>src/test/java</code>（测试代码）</p></li><li><p>目录结构：</p><p><img src="http://imgs.xiongchang.vip/img_15.png" width="70%"></p></li></ol></li><li><p>pom.xml配置：</p><p>添加所需要的jar包。添加jar包的代码段参考 <a href="https://mvnrepository.com/" target="_blank" rel="external">这里</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 </span></div><div class="line">http://maven.apache.org/maven-v4_0_0.xsd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>SSM_demo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SSM_demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>发布配置：</p><p>项目属性 –&gt; Deployment Assembly –&gt; Add –&gt; Maven…</p></li></ul><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> Navicat Premium Data Transfer</div><div class="line"></div><div class="line"> Source Server         : root</div><div class="line"> Source Server Type    : MySQL</div><div class="line"> Source Server Version : 50721</div><div class="line"> Source Host           : localhost:3306</div><div class="line"> Source Schema         : ssmdemo</div><div class="line"></div><div class="line"> Target Server Type    : MySQL</div><div class="line"> Target Server Version : 50721</div><div class="line"> File Encoding         : 65001</div><div class="line"></div><div class="line"> Date: 28/06/2019 15:24:40</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for tb_type</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`tb_type`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_type`</span>  (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`typeName`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">4</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of tb_type</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_type`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'普通用户'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_type`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'高级用户'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_type`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'管理员'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for tb_user</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`tb_user`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user`</span>  (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`typeid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE,</div><div class="line">  <span class="keyword">INDEX</span> <span class="string">`fk_user_type_id`</span>(<span class="string">`typeid`</span>) <span class="keyword">USING</span> BTREE,</div><div class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_user_type_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`typeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`tb_type`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">5</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of tb_user</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'张三'</span>, <span class="string">'1999-01-01'</span>, <span class="number">20</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_user`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'李四'</span>, <span class="string">'1998-01-01'</span>, <span class="number">21</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_user`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'王五'</span>, <span class="string">'1997-01-01'</span>, <span class="number">22</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_user`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'赵六'</span>, <span class="string">'1996-01-01'</span>, <span class="number">23</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</div></pre></td></tr></table></figure><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><ol><li>配置编码过滤器CharacterEncodingFilter；</li><li>配置MVC核心控制器dispatcherServlet；</li><li>配置ContextLoaderListener；</li><li>配置contextConfigLocation指定Spring配置文件路径。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring_SpringMVC_Mybatis<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 乱码过滤器：解决post请求乱码问题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- SpringMVC前端控制器配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 配置ContextLoaderListener --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>启动spring容器<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 配置contextConfigLocation指定Spring配置文件路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="配置spring-mvc-xml"><a href="#配置spring-mvc-xml" class="headerlink" title="配置spring-mvc.xml"></a>配置spring-mvc.xml</h2><ol><li>启动自动扫描；</li><li>注册MVC注解驱动；</li><li>静态资源可访问的设置方式；</li><li>配置视图解析器。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/p</div><div class="line">        http://www.springframework.org/schema/p/spring-p.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 启动自动扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.controller"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 注册MVC注解驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 静态资源可访问的设置方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line"><span class="comment">&lt;!-- 配置jsp路径的前缀 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span> </div><div class="line"><span class="comment">&lt;!-- 配置jsp路径的后缀 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 解决@ResponseBody乱码 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;mvc:annotation-driven&gt;</span></div><div class="line">&lt;mvc:message-converters&gt;</div><div class="line">&lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;</div><div class="line">&lt;constructor-arg value="UTF-8" /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;/mvc:message-converters&gt;</div><div class="line">&lt;/mvc:annotation-driven&gt; --&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="配置db-properties"><a href="#配置db-properties" class="headerlink" title="配置db.properties"></a>配置db.properties</h2><ul><li>连接数据库的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmdemo?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=123456</div></pre></td></tr></table></figure><h2 id="配置applicationContext-xml"><a href="#配置applicationContext-xml" class="headerlink" title="配置applicationContext.xml"></a>配置applicationContext.xml</h2><ul><li>配置需要扫描的包；</li><li>加载数据库参数文件并配置数据源；</li><li>注册sqlSessionFactoryBean；</li><li>配置Mapper扫描器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 使用注解的方法,扫描javaBean  eg：service  dao  @service --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 数据源，使用C3P0连接池 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;</span></div><div class="line">        &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="user" value="$&#123;jdbc.username&#125;"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="password" value="$&#123;jdbc.password&#125;"&gt;&lt;/property&gt;</div><div class="line">        &lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数据源，使用dbcp --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></div><div class="line"><span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 注册sqlSessionFactoryBean --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mappers.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/ssm/mapper/*.xml"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- mybatis总配置文件路径 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- Mapper扫描器 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Mapper接口所在的包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ssm.mapper"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 打开aop注解 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt; --&gt;</span></div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="配置log4j-properties"><a href="#配置log4j-properties" class="headerlink" title="配置log4j.properties"></a>配置log4j.properties</h2><ul><li>配置日志文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#在开发环境下日志级别要设置成DEBUG，生产环境设置成info或error</div><div class="line">log4j.rootLogger=DEBUG, Console</div><div class="line"></div><div class="line"># Console output...</div><div class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n</div><div class="line"></div><div class="line">log4j.logger.java.sql.ResultSet=INFO</div><div class="line">log4j.logger.org.apache=INFO</div><div class="line">log4j.logger.java.sql.Connection=DEBUG</div><div class="line">log4j.logger.java.sql.Statement=DEBUG</div><div class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</div></pre></td></tr></table></figure><h2 id="配置mybatis-config-xml"><a href="#配置mybatis-config-xml" class="headerlink" title="配置mybatis-config.xml"></a>配置mybatis-config.xml</h2><ul><li>设置日志以log4j进行显示;</li><li>定义别名.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 设置日志以log4j进行显示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 定义别名 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.ssm.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"u"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.ssm.pojo.UserType"</span> <span class="attr">alias</span>=<span class="string">"ut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="开始业务代码"><a href="#开始业务代码" class="headerlink" title="开始业务代码"></a>开始业务代码</h2><h3 id="pojo-类"><a href="#pojo-类" class="headerlink" title="pojo 类"></a>pojo 类</h3><ul><li>实现Serializable 接口（序列化接口）；</li><li>getter/setter方法；</li><li>构造方法（有参/无参）。</li></ul><h3 id="mapper-类"><a href="#mapper-类" class="headerlink" title="mapper 类"></a>mapper 类</h3><ul><li><p>mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"userMapper"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</div><div class="line">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ssm.mapper.UserMapper"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"u"</span>&gt;</span></div><div class="line"> select * from tb_user</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="service-类"><a href="#service-类" class="headerlink" title="service 类"></a>service 类</h3><ul><li><p>service 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>service 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//@Autowired</span></div><div class="line"><span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line"><span class="meta">@Resource</span>(name=<span class="string">"userMapper"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.userMapper = userMapper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> userMapper.getAllUsers();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="controller-类"><a href="#controller-类" class="headerlink" title="controller 类"></a>controller 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line"><span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.userService = userService;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">String name=request.getParameter(<span class="string">"name"</span>);</div><div class="line">String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="string">"xiong"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"redirect:showUser.action"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"redirect:login.jsp"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/showUser"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showUser</span><span class="params">()</span></span>&#123;</div><div class="line">ModelAndView mv=<span class="keyword">new</span> ModelAndView();</div><div class="line">ArrayList&lt;User&gt; list=userService.getAllUsers();</div><div class="line">mv.addObject(<span class="string">"user"</span>, list);</div><div class="line">mv.setViewName(<span class="string">"show"</span>);</div><div class="line"><span class="keyword">return</span> mv;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="jsp-页面"><a href="#jsp-页面" class="headerlink" title="jsp 页面"></a>jsp 页面</h3><ul><li><p>登录页面 login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;登录&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action="login.action" method="post"&gt;</div><div class="line">&lt;table&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;用户名：&lt;/td&gt;</div><div class="line">&lt;td&gt;&lt;input type="text" name="name" /&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;密码：&lt;/td&gt;</div><div class="line">&lt;td&gt;&lt;input type="password" name="password" /&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td colspan="2"&gt;&lt;input type="submit"/&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li><li><p>数据显示页面 show.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;用户信息&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;!-- &lt;form action="getAllUsers"&gt; --&gt;</div><div class="line">&lt;table&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;编号&lt;/td&gt;</div><div class="line">&lt;td&gt;用户名&lt;/td&gt;</div><div class="line">&lt;td&gt;生日&lt;/td&gt;</div><div class="line">&lt;td&gt;年龄&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;c:forEach var="user" items="$&#123;user &#125;"&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;$&#123;user.id &#125;&lt;/td&gt;</div><div class="line">&lt;td&gt;$&#123;user.name &#125;&lt;/td&gt;</div><div class="line">&lt;td&gt;$&#123;user.birthday &#125;&lt;/td&gt;</div><div class="line">&lt;td&gt;$&#123;user.age &#125;&lt;/td&gt;</div><div class="line"></div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">&lt;!-- &lt;/form&gt; --&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;使用-Maven-配置-SSM-框架&quot;&gt;&lt;a href=&quot;#使用-Maven-配置-SSM-框架&quot; class=&quot;headerlink&quot; title=&quot;使用 Maven 配置 SSM 框架&quot;&gt;&lt;/a&gt;使用 Maven 配置 SSM 框架&lt;/h1&gt;&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;平台：&lt;/p&gt;&lt;p&gt;Eclipse Mars.2、Windows 10、JDK 1.8、Tomcat 8.0、Maven 3.6、Navicat Premium 12（MySQL）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Eclipse配置：
    
    </summary>
    
    
      <category term="SSM" scheme="http://blog.xiongchang.vip/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://blog.xiongchang.vip/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师（中级）知识点</title>
    <link href="http://blog.xiongchang.vip/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <id>http://blog.xiongchang.vip/软件设计师（中级）知识点.html</id>
    <published>2019-10-21T09:13:55.000Z</published>
    <updated>2019-11-15T06:31:12.995Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>设计模式分类：<a id="more"></a></li></ul><table><thead><tr><th>&nbsp;</th><th style="text-align:left">创建型</th><th style="text-align:left">结构型</th><th style="text-align:left">行为型</th></tr></thead><tbody><tr><td>类</td><td style="text-align:left">Factory Method</td><td style="text-align:left">Adapter（类）</td><td style="text-align:left">Interpreter、<br>Template Method</td></tr><tr><td>对象</td><td style="text-align:left">Abstract Factory、<br>Builder、<br>Prototype、<br>Singleton</td><td style="text-align:left">Adapter（对象）、<br>Bridge、<br>Composite、<br>Decorator、<br>Façade、<br>Flyweight、<br>Proxy</td><td style="text-align:left">Chain of Responsibility、<br>Command、<br>Iterator、<br>Mediator、<br>Memento、<br>Observer、<br>State、<br>Strategy、<br>Visitor</td></tr></tbody></table><ul><li>创建型：</li></ul><table><thead><tr><th>&nbsp;</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><strong>抽象工厂</strong>（Abstract Factory）</td><td style="text-align:left">提供一个创建一些列相关或相互依赖对象的接口，而无需指定他们具体的类。</td></tr><tr><td>建造模式（Builder）</td><td style="text-align:left">将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示。</td></tr><tr><td><strong>工厂方法</strong>（Factory Method）</td><td style="text-align:left">定义一个用于创建对象的接口，让子类决定实例化哪一个类。</td></tr><tr><td>原型（Prototype）</td><td style="text-align:left">用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</td></tr><tr><td><strong>单例</strong>（Singleton）</td><td style="text-align:left">保证一个类仅有一个实例，并提供一个访问它的全局访问点。</td></tr></tbody></table><ul><li>结构型：</li></ul><table><thead><tr><th>&nbsp;</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><strong>适配器</strong>（Adapter）</td><td style="text-align:left">将一个类的接口转换成客户希望的另一个接口。</td></tr><tr><td>桥接（Bridge）</td><td style="text-align:left">将抽象部分与其实现部分分离，使他们都可以独立的变化。</td></tr><tr><td><strong>组合</strong>（Composite）</td><td style="text-align:left">将对象组合成树型结构以表示“部分-整体”的层次结构。</td></tr><tr><td>装饰（Decorator）</td><td style="text-align:left">动态的给一个对象添加一些额外的职责（功能）。</td></tr><tr><td>外观（Façade）</td><td style="text-align:left">为子系统中的一组接口提供一个一致的界面，外观模型定义了一个高层接口，这个接口使得这一子系统更加容易使用。</td></tr><tr><td>享元（Flyweight）</td><td style="text-align:left">运用共享技术有效地支持大量细粒度的对象。</td></tr><tr><td>代理（Proxy）</td><td style="text-align:left">为其他对象提供一种代理以控制对这个对象的访问。</td></tr></tbody></table><ul><li>行为型：</li></ul><table><thead><tr><th>&nbsp;</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>责任链（Chain of Responsibility）</td><td style="text-align:left">使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</td></tr><tr><td>命令（Command）</td><td style="text-align:left">将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</td></tr><tr><td>解释器（Interpreter）</td><td style="text-align:left">给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解析器使用该表示来解释语言中的句子。</td></tr><tr><td>迭代器（Iterator）</td><td style="text-align:left">提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示。</td></tr><tr><td>中介者（Mediator）</td><td style="text-align:left">用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互访问，从而实现耦合松散，而且可以独立的改变它们之间的交互。</td></tr><tr><td>备忘录（Memento）</td><td style="text-align:left">在不破坏封装性的前提下捕获哟个对象的内部状态，并在对象之外保存这个状态。</td></tr><tr><td><strong>观察者</strong>（Observer）</td><td style="text-align:left">定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</td></tr><tr><td>状态（State）</td><td style="text-align:left">允许一个对象在其内部状态改变时改变它的行为。</td></tr><tr><td>策略（Strategy）</td><td style="text-align:left">定义一些列的算法，把它们一个个封装起来，并且使它们可以相互转换。</td></tr><tr><td>模板方法（Template Method）</td><td style="text-align:left">定义一个操作中的算法骨架，而将一些步骤延迟到子类中。</td></tr><tr><td>访问者（Visitor）</td><td style="text-align:left">表示一个作用于某对象结构中的各元素的操作。它允许在不改变各元素的类的前提下定义作用于这些元素的新操作。</td></tr></tbody></table><h2 id="内聚-耦合度排序"><a href="#内聚-耦合度排序" class="headerlink" title="内聚/耦合度排序"></a>内聚/耦合度排序</h2><ul><li>内聚度由高到低：</li></ul><table><thead><tr><th>内聚类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>功能内聚</td><td style="text-align:left">完成一个单一功能，各个部分协同工作，缺一不可</td></tr><tr><td>顺序内聚</td><td style="text-align:left">处理元素相关，而且必须顺序执行</td></tr><tr><td>通信内聚</td><td style="text-align:left">所有处理元素集中在一个数据结构的区域上</td></tr><tr><td>过程内聚</td><td style="text-align:left">处理元素相关，而且必须按特定的次序执行</td></tr><tr><td>瞬时内聚</td><td style="text-align:left">所包含的任务必须在同一时间间隔内执行（如初始化模块）</td></tr><tr><td>逻辑内聚</td><td style="text-align:left">完成逻辑上相关的一组任务</td></tr><tr><td>偶然内聚</td><td style="text-align:left">完成一组没有关系或松散关系的任务</td></tr></tbody></table><ul><li>耦合度由低到高：</li></ul><table><thead><tr><th>耦合类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>非直接耦合</td><td style="text-align:left">没有直接联系，互相不依赖对方</td></tr><tr><td>数据耦合</td><td style="text-align:left">借助参数表传递简单数据</td></tr><tr><td>标记耦合</td><td style="text-align:left">一个数据结构的一部分借助于模块接口被传递</td></tr><tr><td>控制耦合</td><td style="text-align:left">模块间传递的信息中包含用于控制模块内部逻辑的信息</td></tr><tr><td>外部耦合</td><td style="text-align:left">与软件以外的环境有关</td></tr><tr><td>公共耦合</td><td style="text-align:left">多个模块引用同一个全局数据区</td></tr><tr><td>内容耦合</td><td style="text-align:left">一个模块访问另一个模块的内部数据；<br>一个模块不能通过正常入口转到另一模块的内部；<br>两个模块有一部分程序代码重叠；<br>一个模块有多个入口</td></tr></tbody></table><h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><ul><li>白盒测试中的逻辑覆盖：</li></ul><ol><li>语句覆盖：被测试程序的每个语句至少执行一次。是一种很弱的覆盖标准。</li><li>判定覆盖：不仅每个语句至少执行一次，而且每个判定的每种可能的结果都至少执行一次。</li><li>条件覆盖：不仅每个语句至少执行一次，而且使判定表达式中的每个条件都取到各种可能的结果。条件覆盖不一定包含判定覆盖，判定覆盖也不一定包含条件覆盖。</li><li>判定/条件覆盖：同时满足判定覆盖和条件覆盖。</li><li>条件组合覆盖：使得每个判定表达式中条件结果的所有可能组合至少出现一次。</li><li>路径覆盖：使得程序中每条可能执行到的路径都至少经过一次。</li></ol><h2 id="ISO-IEC9126软件质量模型"><a href="#ISO-IEC9126软件质量模型" class="headerlink" title="ISO/IEC9126软件质量模型"></a>ISO/IEC9126软件质量模型</h2><table><thead><tr><th>特性</th><th style="text-align:left">内容</th><th>子特性</th></tr></thead><tbody><tr><td>功能性</td><td style="text-align:left">指与软件所具有的各项功能及其规定性质有关的一组属性。</td><td>适合性、准确性、互操作性、依从性、安全性</td></tr><tr><td>可靠性</td><td style="text-align:left">指在规定运行条件下和规定时间周期内，与软件维护其性能级别的能力有关的一组属性。</td><td>成熟性、容错性、可恢复性</td></tr><tr><td>可用性</td><td style="text-align:left">指根据规定用户或隐含用户的评估所作出的与使用软件所需要的努力程度有关的一组属性。</td><td>可理解性、易学性、可操作性</td></tr><tr><td>效率</td><td style="text-align:left">指在规定条件下，与软件性能级别和所用资源总量之间的关系的一组属性。</td><td>时间特性、资源特性</td></tr><tr><td>可维护性</td><td style="text-align:left">指与软件进行修改的难易程度有关的一组属性。</td><td>可分析性、可改变性、稳定性、可测试性</td></tr><tr><td>可移植性</td><td style="text-align:left">指与一个软件从一个环境转移到另一个环境运行的能力有关的一组属性。</td><td>适应性、可安装性、一致性、可替换性</td></tr></tbody></table><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><table><thead><tr><th>名称</th><th style="text-align:left">内容</th></tr></thead><tbody><tr><td>类图</td><td style="text-align:left">描述一组类、接口、协作和它们之间的关系。对系统静态结构的描述。</td></tr><tr><td>对象图</td><td style="text-align:left">描述一组对象及它们之间的关系。</td></tr><tr><td>构件图</td><td style="text-align:left">描述一个封装的类和它们的接口、端口，以及有内嵌的构件和连接件构成的内部结构。</td></tr><tr><td>用例图</td><td style="text-align:left">描述一组用例、参与者以及它们之间的关系。定义的是系统的功能需求。</td></tr><tr><td>顺序图（序列图）</td><td style="text-align:left">强调消息的时间次序的交互图。反映对象之间已发送消息的先后次序。</td></tr><tr><td>通信图（协作图）</td><td style="text-align:left">强调收发消息的对象或参与者的结构组织。强调上下文相关。</td></tr><tr><td>状态图</td><td style="text-align:left">描述一个状态机，由状态、转移、事件和活动组成。强调事件导致的对象行为，有助于对反应式系统建模。</td></tr><tr><td>活动图</td><td style="text-align:left">将进程或其他计算结构展示为计算内部一步步的控制流和数据流。对系统的功能建模和业务流程建模特别重要，并强调对象间的控制流程。</td></tr><tr><td>部署图</td><td style="text-align:left">描述对运行时的处理结点及在其中生存的构件的配置。显示系统中软/硬件的物理架构。</td></tr><tr><td>包图</td><td style="text-align:left">描述由模型本身分解而成的组织单元，以及他们之间的依赖关系。</td></tr></tbody></table><h2 id="析构函数和构造函数"><a href="#析构函数和构造函数" class="headerlink" title="析构函数和构造函数"></a>析构函数和构造函数</h2><p><strong>构造函数</strong>：函数名与类名相同；没有返回值；被声明定义为共有函数；建立对象时由系统自动调用。<br><strong>析构函数</strong>：没有任何参数，不能被重载，但可以是虚函数，一个类只有一个析构函数；没有返回值；函数名与类名相同，但需要在前面加<kbd>~</kbd>符号；一般由用户自己定义，在对象消失时由系统自动调用，若没有定义，系统生成默认析构函数。</p><h2 id="极限编程XP"><a href="#极限编程XP" class="headerlink" title="极限编程XP"></a>极限编程XP</h2><table><thead><tr><th>&nbsp;</th><th style="text-align:left">内容</th></tr></thead><tbody><tr><td>四大价值观</td><td style="text-align:left">沟通、简单、反馈、勇气</td></tr><tr><td>五大原则</td><td style="text-align:left">快速反馈、简单性假设、逐步修改、提倡更改、优质工作</td></tr><tr><td>十二个最佳实践</td><td style="text-align:left">计划游戏、小型发布、隐喻、简单设计、测试先行、重构、集体代码所有制、结对编程、每周工作40小时、持续集成、编码标准、现场客户</td></tr></tbody></table><h2 id="域名解析流程"><a href="#域名解析流程" class="headerlink" title="域名解析流程"></a>域名解析流程</h2><ol><li>客户机提出域名解析请求，并将该请求发送给本地的域名服务器；</li><li>当本地的域名服务器收到请求后，就先查询本地的缓存，如果有该记录项，则本地的域名服务器就直接把查询的结果返回；</li><li>如果本地的缓存中没有该记录，则本地域名服务器就直接把请求发给根域名服务器，然后根域名服务器再返回给本地域名服务器一个所查询域（根的子域）的主域名服务器的地址；</li><li>本地服务器再向上一步返回的域名服务器发送请求，然后接受请求的服务器查询自己的缓存，如果没有该记录，则返回相关的下级的域名服务器的地址；</li><li>重复第四步，直到找到正确的记录；</li><li>本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时还将结果返回给客户机。</li></ol><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>&emsp;&emsp;<strong>数据字典</strong>是指对数据的数据项、数据结构、数据流、数据存储、处理逻辑、外部实体等进行<strong>定义</strong>和<strong>描述</strong>，其目的是对数据流图中的各个元素做出<strong>详细的说明</strong>，使用数据字典为简单的建模项目。<em>数据字典的条目有：数据项、数据流、数据存储、基本加工等。</em></p><p>&emsp;&emsp;<strong>对象</strong>的状态包括这个对象的<strong>所有属性</strong>（通常是静态的）以及每个属性当前的<strong>值</strong>（通常是动态的）；<strong>行为</strong>是对象根据它的状态改变和消息传递所采取的<strong>行动</strong>和所作出的<strong>反应</strong>；对象的<strong>行为</strong>代表了其外部可见的活动；<strong>操作</strong>代表了一个类提供给它的对象的一种服务。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>&emsp;&emsp;数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。若相同，则说明收到的信息完整；否则信息被修改过。因此数字签名能够验证信息的完整性。<br>&emsp;&emsp;<strong>数字签名</strong>是个加密的过程，<strong>数字签名验证</strong>是个解密的过程。保证信息传输的完整性、发送者的身份认证、防止交易中的抵赖发生。</p><h2 id="函数依赖及蕴含"><a href="#函数依赖及蕴含" class="headerlink" title="函数依赖及蕴含"></a>函数依赖及蕴含</h2><p><img src="http://imgs.xiongchang.vip/img_9.png"></p><h2 id="TCP和UDP区别"><a href="#TCP和UDP区别" class="headerlink" title="TCP和UDP区别"></a>TCP和UDP区别</h2><ol><li>TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接。</li><li>TCP提供可靠的服务（通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达）；UDP尽最大努力交付。</li><li>TCP面向字节流，把数据看成一连串无结构的字节流；UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）。</li><li>每一条TCP连接只能是点到点的；UDP支持一对一、一对多、多对一、多对多的交互通信。</li><li>TCP首部开销20字节；UDP的首部开销8字节。</li><li>TCP的逻辑通信信道是全双工的可靠信道；UDP则是不可靠信道，整体来看UDP开销较小。</li></ol><h2 id="分布式数据库（分片-复制-位置-逻辑透明等基本概念）"><a href="#分布式数据库（分片-复制-位置-逻辑透明等基本概念）" class="headerlink" title="分布式数据库（分片/复制/位置/逻辑透明等基本概念）"></a>分布式数据库（分片/复制/位置/逻辑透明等基本概念）</h2><table><thead><tr><th>&nbsp;</th><th>基本概念</th></tr></thead><tbody><tr><td>分片透明</td><td>是指用户或应用程序不需要知道逻辑上访问的表具体是如何分块存储的。</td></tr><tr><td>复制透明</td><td>采用复制技术的分布方法，用户不需知道数据是复制到哪个节点，如何复制。</td></tr><tr><td>位置透明</td><td>是指用户无需知道数据存放的物理位置。</td></tr><tr><td>逻辑透明</td><td>是指局部数据模型透明，即用户或应用程序无需知道局部使用的是哪种数据模型。</td></tr></tbody></table><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>&emsp;&emsp;<strong>绑定</strong>是一个把过程调用和响应调用所需要执行的代码加以结合的过程。静态绑定在<strong>编译时</strong>进行的；动态绑定在<strong>运行时</strong>进行的。</p><h2 id="I-O设备管理"><a href="#I-O设备管理" class="headerlink" title="I/O设备管理"></a>I/O设备管理</h2><p>I/O设备管理软件一般分为4层：中断处理程序、设备驱动程序、与设备无关的系统软件、用户级软件。</p><p><img src="http://imgs.xiongchang.vip/img_10.png"></p><h2 id="算法策略"><a href="#算法策略" class="headerlink" title="算法策略"></a>算法策略</h2><table><thead><tr><th>算法策略</th><th>设计思想</th><th>经典实例</th></tr></thead><tbody><tr><td>分治法</td><td>将一个难以直接解决的大问题分解成一些规模较小的相同问题，以便各个击破，分而治之。</td><td>归并排序、最大子段和问题</td></tr><tr><td>动态规划</td><td>用到了分治法思想，不同的是存储了子问题的解而避免计算重复的子问题。常用于求最优解。</td><td>0-1背包问题、最长公共子序列（LCS）</td></tr><tr><td>贪心法</td><td>与动态规划法类似，常用于求最优解。不同的是，贪心法是局部最优。</td><td>活动选择问题、背包问题</td></tr><tr><td>回溯法</td><td>从跟节点出发，以深度优先的方式搜索整个解空间。从一条路往前走，能进则进，不进则退，换条路走。</td><td>0-1背包问题、n皇后问题</td></tr></tbody></table><p><strong>分治法</strong>和<strong>动态规划</strong>都用到<strong>回溯</strong>，回溯一般用到递归。<strong>贪心法</strong>一般不考虑整体情况，所以不会用到回溯。</p><h2 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h2><h3 id="对称加密技术"><a href="#对称加密技术" class="headerlink" title="对称加密技术"></a>对称加密技术</h3><table><thead><tr><th>加密算法</th><th>内容</th></tr></thead><tbody><tr><td>DES</td><td>运算速度快，密钥容易产生，适用于当前大多计算机</td></tr><tr><td>3DES</td><td>将密钥长度加倍</td></tr><tr><td>RC-5</td><td>RSA数据安全公司的很多产品都使用RC-5，适合明文加密</td></tr><tr><td>IDEA</td><td>基于DES，类似于DES，IDEA也是一种数据块加密算法</td></tr><tr><td>AES</td><td>基于排列和置换运算；AES是一个迭代的，对称密钥分组的密码</td></tr></tbody></table><h3 id="非对称加密技术"><a href="#非对称加密技术" class="headerlink" title="非对称加密技术"></a>非对称加密技术</h3><p><kbd>RSA</kbd><br>优点：保密性比较好；消除了最终用户交换密钥的需要；只适用于对少量数据进行加密<br>缺点：加密和解密花费的时间长、速度慢、不适合于对文件加密</p><h3 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h3><p>PKI是利用公钥理论和技术建立的提供安全服务的基础设施。<br>PKI的基础技术包括：加密、数字签名、数据完整性机制、数字信封、双重数字签名等。</p><h3 id="信息摘要算法"><a href="#信息摘要算法" class="headerlink" title="信息摘要算法"></a>信息摘要算法</h3><p>MD5：信息摘要算法。专门用于加密处理的并广泛使用的Hash函数。<br>SHA-1：信息摘要算法。MD5和SHA-1均不能用来加密数据</p><h2 id="共享锁（S）和排他锁（X）"><a href="#共享锁（S）和排他锁（X）" class="headerlink" title="共享锁（S）和排他锁（X）"></a>共享锁（S）和排他锁（X）</h2><p>共享锁（S锁/读锁）：若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。<br>排他锁（X锁/写锁）：若事务T对数据对象A加上X锁，其他事务不能再对Ajia任何锁，直到T释放A上的S锁。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;设计模式分类：
    
    </summary>
    
    
      <category term="软考" scheme="http://blog.xiongchang.vip/categories/%E8%BD%AF%E8%80%83/"/>
    
    
      <category term="软件设计师" scheme="http://blog.xiongchang.vip/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令（一）</title>
    <link href="http://blog.xiongchang.vip/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://blog.xiongchang.vip/Linux常用命令（一）.html</id>
    <published>2019-10-20T11:32:22.000Z</published>
    <updated>2019-11-15T06:32:05.984Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h1 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h1><h2 id="命令基本格式"><a href="#命令基本格式" class="headerlink" title="命令基本格式"></a>命令基本格式</h2><ul><li><code>ls [选项] [文件/目录]</code><br>选项：<br><kbd>-a</kbd>：显示所有文件，包括隐藏文件；<br><kbd>-l</kbd>：显示详细信息；<a id="more"></a><br><kbd>-d</kbd>：查看目录属性；<br><kbd>-h</kbd>：人性化显示文件大小；<br><kbd>-i</kbd>：显示inode；<br><kbd>-lh</kbd>：人性化显示详细信息；<br><kbd>-ld</kbd>：查看目录属性详细信息。</li><li>附：权限默认10位（eg：<code>-rw-r--r--</code>）<br>第一位：表示文件类型，<kbd>-</kbd>：表示文件；<kbd>d</kbd>：表示目录；<kbd>l</kbd>：表示软连接文件。特殊文件还有四种：块设备文件、字符设备文件、套接字文件、管道文件。<br>后面九位按照每三位为一组：<code>前三位</code>是所有者权限；<code>中间三位</code>是所有组权限；<code>后三位</code>是其他人权限。其中用<kbd>r</kbd>：表示读；<kbd>w</kbd>：表示写；<kbd>x</kbd>：表示执行。</li></ul><h2 id="目录处理命令-1"><a href="#目录处理命令-1" class="headerlink" title="目录处理命令"></a>目录处理命令</h2><ul><li><code>mkdir [-p] [目录名]</code> 创建目录，<kbd>-p</kbd>：表示递归创建。</li><li><code>cd [目录]</code> 切换所在目录。<kbd>cd ~</kbd>和<kbd>cd</kbd>：表示进入当前用户的家目录；<kbd>cd -</kbd>：表示进入上次目录；<kbd>cd ..</kbd>：表示进入上一级目录；<kbd>cd .</kbd>：表示进入当前目录。</li><li><code>pwd</code> 查看当前所在目录位置。</li><li><code>rmdir [目录名]</code> 删除<kbd>空</kbd>目录。</li><li><code>rm -rf [文件/目录]</code> 删除目录或文件。<kbd>-r</kbd>：表示删除目录；<kbd>-f</kbd>：表示强制执行。慎用<code>rm -rf /</code>，在Linux中万物皆文件，什么都可以删除，包括系统核心文件。</li><li><code>cp [选项] [原文件或目录] [目标目录]</code> 复制文件<br>选项：<br><kbd>-r</kbd>：复制目录；<br><kbd>-p</kbd>：连带文件属性复制；<br><kbd>-d</kbd>：若是链接文件，则复制链接属性；<br><kbd>-a</kbd>：相当于<kbd>-rpd</kbd></li><li><code>mv [原文件或目录] [目标目录]</code> 剪切和重命名。</li></ul><h2 id="常见目录的作用"><a href="#常见目录的作用" class="headerlink" title="常见目录的作用"></a>常见目录的作用</h2><p>用跟目录下的<code>bin</code>和<code>sbin</code>和usr目录下的<code>bin</code>和<code>sbin</code>来保存系统命令。</p><p><code>boot</code>：启动目录；<code>dev</code>：特殊文件目录（设备文件）；<br><code>etc</code>：配置文件目录；<code>home</code>：普通用户家目录；<br><code>root</code>：特殊用户家目录；<code>lib</code>：Linux下的函数库；<br><code>media、mnt、misc</code>：默认是空目录，分别用来外接光盘、U盘、磁盘。<code>tmp</code>：临时目录；<br><code>proc、sys</code>：两个目录不能直接操作，保存的是内存过载点，直接写入内存的；<br><code>usr</code>：系统软件资源目录；<code>var</code>：系统相关可见文档目录。</p><p>在<code>root、home、tmp</code>目录下可以随便放内容，其他目录尽可能不需改动。</p><h2 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h2><ul><li><code>ln -s [原文件] [目标文件]</code> 生成链接文件。原文件需要写绝对路径，<kbd>-s</kbd>：表示创建软连接。</li><li>硬链接特征：<ol><li>拥有相同的<code>i</code>节点和存储block块，可看作是同一个文件；</li><li>可通过i节点识别；</li><li>不能跨分区；</li><li>不能针对目录使用；</li><li>删除原文件，不影响硬链接的使用；</li><li>不推荐使用。</li></ol></li><li>软链接特征：<ol><li>类似于Windows里面的快捷方式；</li><li>软链接拥有自己的i节点和block块，但数据块中只保存原文件的文件名和i节点名，并没有实际的文件数据；</li><li>软链接的权限都是<code>lrwxrwxrwx</code>;</li><li>修改任意一文件，另一个文件随之变化；</li><li>删除原文件，软链接也不能使用。</li></ol></li></ul><h1 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h1><ol><li>文件搜索命令<kbd>locate</kbd>；</li><li>命令搜索命令<kbd>whereis</kbd>和<kbd>which</kbd>；</li><li>文件搜索命令<kbd>find</kbd>；</li><li>字符串搜索命令<kbd>grep</kbd>；</li></ol><p>其中locate的搜索速度比find。</p><h2 id="文件搜索命令locate"><a href="#文件搜索命令locate" class="headerlink" title="文件搜索命令locate"></a>文件搜索命令locate</h2><ul><li><code>locate 文件名</code> 在后台数据库（目录为：/var/lib/mlocate）中按文件名搜索，速度快。</li><li><code>updatedb</code> 更新数据库。<br>更新后依然有可能搜索不到，比如在tmp目录下创建的文件，搜索不到是因为遵循了<code>/etc/updatedb.conf</code> 配置文件的规则：<kbd>PRUNE_BIND_MOUNTS=”yes“</kbd>开启搜索限制；<kbd>PRUNENAMES=</kbd>不搜索的文件类型；<kbd>PRUNEFS=</kbd>不搜索的文件系统；<kbd>PRUNEPATHS=</kbd>不搜索的路径。</li></ul><h2 id="命令搜索命令whereis和which"><a href="#命令搜索命令whereis和which" class="headerlink" title="命令搜索命令whereis和which"></a>命令搜索命令whereis和which</h2><ul><li><code>whereis [选项] 命令名</code> 搜索命令所在路径及帮助文档所在位置。<kbd>-b</kbd>表示只查找可执行文件；<kbd>-m</kbd>表示只查找帮助文件。</li><li><code>which 命令名</code> 搜索命令所在路径及别名。</li><li><code>echo $PATH</code> 查看环境变量。</li></ul><h2 id="文件搜索命令find"><a href="#文件搜索命令find" class="headerlink" title="文件搜索命令find"></a>文件搜索命令find</h2><ul><li><code>find [搜索范围] [搜索条件]</code> 搜索文件。</li><li><code>find / -name install.log</code> 在跟目录下搜索名为install.log的文件。（绝对查询）<ol><li>避免大范围搜索，非常的耗费系统资源；</li><li>find是在系统中搜索符合条件的文件名。如需要匹配，得通过<kbd>通配符</kbd>来完成，通配符是完全匹配。</li><li>通配符：<br><kbd>*</kbd>：表示匹配任意内容；<br><kbd>?</kbd>：表示匹配任意一个字符；<br><kbd>[]</kbd>表示匹配任意一个[ ]内的字符。</li></ol></li><li><code>find /root -iname install.log</code> 不区分大小写在/root下搜索install.log文件。</li><li><code>find /root -user root</code> 按照所有者搜索。</li><li><code>find /root -nouser</code> 查找没有所有者的文件。<ul><li>没有所有者的文件为垃圾文件，可手动删除。</li><li>但有两种情况除外：</li></ul><ol><li>内核文件。在proc和sys目录下有可能存在没有所有者文件；</li><li>外来文件。光盘、U盘等。</li></ol></li><li><code>find /var/log/ -mtime +10</code> 查找十天前修改的文件。<ul><li><kbd>+10</kbd>表示10天内；<kbd>10</kbd>表示第10天；<kbd>-10</kbd>表示10天后；</li><li><kbd>-atime</kbd>文件访问时间；<kbd>-ctime</kbd>改变文件属性时间；<kbd>-mtime</kbd>修修改文件内容时间。</li></ul></li><li><code>find . -size 25k</code> 查找当前目录文件大小为25k的文件。<ul><li><kbd>.</kbd>表示当前目录；</li><li><kbd>+25k</kbd>表示大于25k；</li><li><kbd>25k</kbd>表示等于25k；</li><li><kbd>-25k</kbd>表示小于25k。</li></ul></li><li><code>find . -inum 262422</code> 查找当前目录i节点是<code>262422</code>的文件。</li><li><code>find /etc -size +20k -a -size -50k</code> 查找/etc目录下，大于20k小于50k的文件。<ul><li><kbd>-a</kbd>：表示逻辑与（and）；</li><li><kbd>-o</kbd>：表示逻辑或（or）。</li></ul></li><li><code>find /etc -size +20k -a -size -50k -exec ls -lh {} \</code> 查找/etc目录下，大于20k小于50k的文件，并显示详细信息。<ul><li><code>-exec/-ok 命令 {} \</code> 对搜索结果执行操作。</li><li><code>命令A -exec 命令B {} \</code> 将命令A的结果交给命令B进行处理。</li></ul></li></ul><h2 id="字符串搜索命令grep"><a href="#字符串搜索命令grep" class="headerlink" title="字符串搜索命令grep"></a>字符串搜索命令grep</h2><ul><li><code>grep [选项] 字符串 文件名</code> 在文件中查找符合条件的字符串。<ul><li><kbd>-i</kbd>：表示忽略大小写；</li><li><kbd>-v</kbd>：表示取反，排除指定字符串。</li></ul></li></ul><h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><h2 id="帮助命令man"><a href="#帮助命令man" class="headerlink" title="帮助命令man"></a>帮助命令man</h2><ul><li><code>man 命令</code> 获取指定命令的帮助；<br>例如<code>man ls</code> 查看ls命令的帮助。</li><li>man的级别（<code>man man</code>）<ol><li>查看命令的帮助；</li><li>查看和被内核调用的函数的帮助；</li><li>查看函数和函数库的帮助；</li><li>查看特殊文件的帮助（主要是<kbd>/dev</kbd>目录下的文件）；</li><li>查看配置文件的帮助；</li><li>查看游戏帮助；</li><li>查看其他杂项的帮助；</li><li>查看系统管理员可用命令的帮助；</li><li>查看和内核相关文件的帮助。</li></ol></li><li><code>man -f 命令</code> 查看命令拥有哪个级别的帮助。<ul><li>相当于<code>whatis 命令</code> 。</li></ul></li><li><code>man -k 命令</code> 查看和命令相关的所有帮助（相当于模糊查找命令）<ul><li>相当于<code>apropos 命令</code></li><li>例如：<code>apropos passwd = man -k passwd</code> .</li></ul></li></ul><h2 id="其他帮助命令"><a href="#其他帮助命令" class="headerlink" title="其他帮助命令"></a>其他帮助命令</h2><ul><li><code>命令 --help</code> 获取命令选项的帮助；</li><li><code>help shell内部命令</code> 只能获取shell内部命令的帮助；<ul><li>判断是否是shell内部命令<code>whereis 命令</code> ：<br>若存在该命令目录，则不是shell内部命令；<br>若不存在该命令目录，则是shell内部命令。</li></ul></li><li><code>info 命令</code> 详细命令帮助。<ul><li><kbd>回车</kbd>：进入子帮助页面（带有<kbd>*</kbd>号标记）；</li><li><kbd>u</kbd>：进入上层页面；</li><li><kbd>n</kbd>：进入下一个帮助小节；</li><li><kbd>p</kbd>：进入上一个帮助小节；</li><li><kbd>q</kbd>：退出。</li></ul></li></ul><h1 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h1><p>常用的压缩格式有：.zip、.gz、.bz2、.tar.gz、.tar.bz2 …</p><h2 id="zip格式压缩"><a href="#zip格式压缩" class="headerlink" title=".zip格式压缩"></a>.zip格式压缩</h2><ul><li><code>zip 压缩文件名 源文件</code> 压缩文件；</li><li><code>zip -r 压缩文件名 源文件</code> 压缩目录；</li><li><code>unzip 压缩文件名</code> 解压缩.zip文件；</li></ul><h2 id="gz格式压缩"><a href="#gz格式压缩" class="headerlink" title=".gz格式压缩"></a>.gz格式压缩</h2><ul><li><code>gzip 源文件</code> 压缩为.gz格式的压缩文件，原文件会消失；</li><li><code>gzip -c 源文件 &gt; 压缩文件</code> 压缩为.gz格式，原文件保留；</li><li><code>gzip -d 压缩文件名</code>和<code>gunzip 压缩文件名</code> 解压缩，不保留原文件；</li><li><code>gzip -r 目录</code> 压缩目录下所有的子文件，但是不能压缩目录；</li><li><code>gunzip -r 压缩文件名</code> 解压缩目录。</li></ul><h2 id="bz2格式压缩"><a href="#bz2格式压缩" class="headerlink" title=".bz2格式压缩"></a>.bz2格式压缩</h2><ul><li><code>bzip2 源文件</code> 压缩为.bz2 格式的压缩文件，原文件会消失；</li><li><code>bzip2 -k 源文件</code> 压缩为.bz2格式，原文件保留；</li><li><code>bzip2 -d 压缩文件名</code> 和 <code>bunzip2 压缩文件名</code> 解压缩，<kbd>-k</kbd>保留原文件；</li></ul><h2 id="文件打包及压缩成-tar-gz和-tar-bz2格式"><a href="#文件打包及压缩成-tar-gz和-tar-bz2格式" class="headerlink" title="文件打包及压缩成.tar.gz和.tar.bz2格式"></a>文件打包及压缩成.tar.gz和.tar.bz2格式</h2><p>由于<kbd>gzip</kbd>和<kbd>bzip</kbd>不能直接压缩目录，则可以先打包，然后压缩。</p><ul><li><code>tar -cvf 打包文件名 源文件</code> 文件打包<br>选项：<br><kbd>-c</kbd>：打包；<br><kbd>-v</kbd>：显示过程；<br><kbd>-f</kbd>：指定打包后的文件名；<br><kbd>-t</kbd>：查看压缩包但不解压。</li><li><code>tar -xvf 打包文件名</code> 解打包。<kbd>-x</kbd>：表示解打包。</li><li><code>tar -zcvf 压缩包名.tar.gz 源文件</code> 压缩为.tar.gz格式。<kbd>-z</kbd>：表示压缩成.tar.gz格式。</li><li><code>tar -zxvf 压缩包名.tar.gz</code> 解压缩.tar.gz格式。</li><li><code>tar -jcvf 压缩包名.tar.bz2 源文件</code> 压缩为.tar.bz2格式。<kbd>-j</kbd>：表示压缩成.tar.bz2格式。</li><li><code>tar -jxvf 压缩包名.tar.bz2</code> 解压缩.tar.bz2格式。</li><li><code>tar -jxvf 压缩包名.tar.bz2 -C 路径A</code> 解压到路径A；（.tar.gz格式同理）</li><li><code>tar -jcvf 路径B/压缩包名.tar.bz2 源文件</code> 压缩到路径B；（.tar.gz格式同理）</li><li><code>tar -jtvf 压缩包名.tar.bz2</code> 查看压缩文件。（.tar.gz格式同理）</li></ul><h1 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机/重启命令"></a>关机/重启命令</h1><ul><li><code>shutdown [选项] 时间</code><br>选项：<br><kbd>-c</kbd>：取消前一个关机命令；<br><kbd>-h</kbd>：关机；<br><kbd>-r</kbd>：重启。</li><li>其他关机命令还有：<kbd>halt</kbd>、<kbd>poweroff</kbd>、<kbd>init 0</kbd>但是不推荐使用。</li><li>其他重启命令还有：<kbd>reboot</kbd>、<kbd>init 6</kbd>不推荐使用。</li><li>系统运行级别（init X）：</li></ul><table><thead><tr><th>编号 X</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>0</td><td style="text-align:left">关机</td></tr><tr><td>1</td><td style="text-align:left">单用户（进行系统修复）</td></tr><tr><td>2</td><td style="text-align:left">不完全多用户，不含NFS服务</td></tr><tr><td>3</td><td style="text-align:left">完全多用户</td></tr><tr><td>4</td><td style="text-align:left">未分配</td></tr><tr><td>5</td><td style="text-align:left">图形界面</td></tr><tr><td>6</td><td style="text-align:left">重启</td></tr></tbody></table><ul><li><code>cat /etc/inittab</code> 该文件可以修改系统默认运行级别；</li><li><code>runlevel</code> 查询系统运行级别；</li><li><code>logout</code> 退出当前用户登录。</li></ul><h1 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h1><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><ul><li><code>mount</code> 查询系统中已经挂在的设备；</li><li><code>mount -a</code> 依据配置文件<code>/etc/fstab</code> 的内容自动挂载；</li><li><code>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</code> 挂载命令格式；<ul><li><code>-t 文件系统</code> 加入文件系统类型来指定挂载的类型，可以<kbd>ext3</kbd>、<kbd>ext4</kbd>、<kbd>iso9660</kbd>等文件系统</li><li><code>-o 特殊选项</code> 可以指定挂载的额外选项：<br><img src="http://imgs.xiongchang.vip/img_1.png" width="100%"><br>尽量不用做修改，若修改了，记得改回来。</li><li>手动挂载不具有永久性，重启后会失效，可以配置<code>/etc/fstab</code> 文件自动挂载。但是光盘、U盘等外接设备不推荐自动挂载。</li></ul></li><li><code>umount 设备文件名或挂载点</code> 卸载挂载点</li></ul><h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><ol><li><code>mkdir /mnt/cdrom/</code> 建立挂载点</li><li><code>mount -t iso9660 /dev/sr0 /mnt/cdrom</code> 挂载光盘。其中<kbd>-t iso9660</kbd> 可以省略，因为默认就是<kbd>-t iso9660</kbd>。</li><li><code>umount /mnt/sr0</code> 卸载光盘</li></ol><h2 id="挂载U盘（不常见）"><a href="#挂载U盘（不常见）" class="headerlink" title="挂载U盘（不常见）"></a>挂载U盘（不常见）</h2><ol><li><code>fdisk -l</code> 查看U盘设备文件名</li><li><code>mount -t vfat /dev/sdb1 /mnt/usb/</code> 挂载U盘。其中<code>/dev/sdb1</code> 视情况而定。</li><li>Linux默认是不支持NTFS文件系统的。</li></ol><h2 id="用户登录查看命令"><a href="#用户登录查看命令" class="headerlink" title="用户登录查看命令"></a>用户登录查看命令</h2><ul><li><code>w</code> 查看登录用户信息<br><img src="http://imgs.xiongchang.vip/img_2.png" width="70%"></li><li><code>who</code> 查看登录用户信息<ul><li>命令输出显示：用户名、登录终端、登录时间（登录来源ip地址）<hr></li></ul></li><li><code>last</code> 查询当前登录和过去登录的用户信息<ul><li><kbd>last</kbd>命令默认是读取<code>/var/log/wtmp</code> 文件数据</li><li>命令输出：用户名、登录终端、登录IP、登录时间、退出时间（在线时间）</li></ul></li><li><code>lastlog</code> 查看所有用户的最后一次登录时间<ul><li><kbd>lastlog</kbd>命令默认是读取<code>/var/log/lastlog</code> 文件内容</li><li>命令输出：用户名、登录终端、登录IP、最后一次登录时间</li></ul></li></ul><h1 id="脚本执行命令"><a href="#脚本执行命令" class="headerlink" title="脚本执行命令"></a>脚本执行命令</h1><h2 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h2><ul><li><code>echo [选项] [输出的内容]</code> 输出指定内容<ul><li>选项：<kbd>-e</kbd>：反斜杠控制转换。<br><img src="http://imgs.xiongchang.vip/img_3.png" width="80%"></li><li>例如：<code>echo -e &quot;\e[1;31m 输出的内容 \e[0m&quot;</code> 其中<kbd>\e[1;31m</kbd>表示开启颜色显示；<kbd>\e[0m</kbd>表示取消颜色。<kbd>\e[1;31m</kbd>和<kbd>\e[0m</kbd>必须成对出现。<ul><li><kbd>30m</kbd>：黑色；<kbd>31m</kbd>：红色；<kbd>32m</kbd>：绿色；<kbd>33m</kbd>：黄色；</li><li><kbd>34m</kbd>：蓝色；<kbd>35m</kbd>：洋红；<kbd>36m</kbd>：青色；<kbd>37m</kbd>：白色。</li></ul></li></ul></li></ul><h3 id="写一个简单的脚本"><a href="#写一个简单的脚本" class="headerlink" title="写一个简单的脚本"></a>写一个简单的脚本</h3><blockquote><ol><li><code>vim xiong.sh</code> # 创建并进入xiong.sh文件</li><li><code>#!/bin/bash</code> # 这一行不能删除<br><code>echo -e &quot;\e[1;31m 输出的内容 \e[0m&quot;</code> # 脚本代码</li><li><code>:wq</code> # 写入并退出</li><li><code>chmod 755 xiong.sh</code> # 赋予执行权限</li><li><code>./xiong.sh</code> # 执行，还可以通过<code>bash xiong.sh</code> 直接调用脚本</li></ol></blockquote><h2 id="别名与快捷键"><a href="#别名与快捷键" class="headerlink" title="别名与快捷键"></a>别名与快捷键</h2><ul><li><code>alias</code> 查看系统中所有的命名别名</li><li><code>alias 别名=‘原命令’</code> 设定命令别名，在该用户下临时生效</li><li>在<code>~/.bashrc</code> 环境变量配置文件中写入<code>alias 别名=‘原命令’</code> 方可永久生效。注意：需要调用一遍<code>source .bashrc</code> ，否则需要重新登录才会生效。</li><li><code>unalias 别名</code> 删除别名（临时生效的别名）</li><li><p>命令生效的顺序：</p><ol><li>执行用绝对路径或相对路径执行的命令；</li><li>执行别名；</li><li>执行bash的内部命令；</li><li>执行按照<code>$PATH</code>环境变量定义的目录查找顺序找到的第一个命令。</li></ol></li><li><p>常用快捷键：</p><ol><li><kbd>ctrl</kbd>+<kbd>C</kbd>：强制终止当前命令；</li><li><kbd>ctrl</kbd>+<kbd>L</kbd>：清屏；</li><li><kbd>ctrl</kbd>+<kbd>A</kbd>：光标移动到命令行首；</li><li><kbd>ctrl</kbd>+<kbd>E</kbd>：光标移动到命令行尾；</li><li><kbd>ctrl</kbd>+<kbd>U</kbd>：从光标所在位置删除到行首；</li><li><kbd>ctrl</kbd>+<kbd>Z</kbd>： 把命令放入后台；</li><li><kbd>ctrl</kbd>+<kbd>R</kbd>：在历史命令中搜索。</li></ol></li></ul><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><ul><li><code>history [选项] [历史命令保存文件]</code> 查看历史命令<br>选项：<br><kbd>-c</kbd>：清空历史命令<br><kbd>-w</kbd>：把缓存中的历史命令写入</li><li>历史命令保存在<code>~/.bash_history</code> 文件中。默认会保存1000条，可以在环境变量配置文件<code>/etc/profile</code> 中进行修改<code>HISTSIZE=1000</code> 的值。</li><li>历史命令的调用：<br><kbd>上下键</kbd>：调用以前的历史命令；<br><kbd>!n</kbd>：重读执行第n条历史命令<br><kbd>!!</kbd>：重复执行上一条历史命令<br><kbd>!字符串</kbd>：重复执行最后一条以该字串开头的命令。</li></ul><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p><img src="http://imgs.xiongchang.vip/img_4.png" width="80%"></p><p>注意<kbd>标准输出重定向</kbd>中<kbd>&gt;</kbd>和<kbd>&gt;&gt;</kbd>后面有空格，<kbd>标准错误输出重定向</kbd>中<kbd>2&gt;</kbd>和<kbd>2&gt;&gt;</kbd>后面没有空格。</p><p></p><hr><br><img src="http://imgs.xiongchang.vip/img_7.png" width="80%"><p></p><p>同样注意是否存在空格。</p><p></p><hr><p></p><ul><li>输入重定向：<br><code>wc [选项] [文件名]</code> 输出行数，单词数，字节数<br><kbd>-c</kbd>：统计字节数；<br><kbd>-w</kbd>：统计单词数；<br><kbd>-l</kbd>：统计行数。</li></ul><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><ul><li><p>多命令顺序执行：<br><img src="http://imgs.xiongchang.vip/img_5.png" width="80%"><br>例如：<code>ls &amp;&amp; echo yes || echo no</code> 判断输入ls是否正确。</p></li><li><p>管道符：<br><code>命令1 | 命令2</code> 命令1的正确输出作为命令2的操作对象，输出最终命令2结果。<br>注意与<kbd>;</kbd>区分开，<kbd>;</kbd>会输出每条命令。</p></li></ul><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p><img src="http://imgs.xiongchang.vip/img_6.png" width="80%"><br><img src="http://imgs.xiongchang.vip/img_8.png" width="80%"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;目录处理命令&quot;&gt;&lt;a href=&quot;#目录处理命令&quot; class=&quot;headerlink&quot; title=&quot;目录处理命令&quot;&gt;&lt;/a&gt;目录处理命令&lt;/h1&gt;&lt;h2 id=&quot;命令基本格式&quot;&gt;&lt;a href=&quot;#命令基本格式&quot; class=&quot;headerlink&quot; title=&quot;命令基本格式&quot;&gt;&lt;/a&gt;命令基本格式&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ls [选项] [文件/目录]&lt;/code&gt;&lt;br&gt;选项：&lt;br&gt;&lt;kbd&gt;-a&lt;/kbd&gt;：显示所有文件，包括隐藏文件；&lt;br&gt;&lt;kbd&gt;-l&lt;/kbd&gt;：显示详细信息；
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.xiongchang.vip/tags/Linux/"/>
    
      <category term="常用命令" scheme="http://blog.xiongchang.vip/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数据定义语言DDL</title>
    <link href="http://blog.xiongchang.vip/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL.html"/>
    <id>http://blog.xiongchang.vip/数据定义语言DDL.html</id>
    <published>2019-10-16T12:33:19.000Z</published>
    <updated>2019-10-17T08:15:54.313Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><code>create table 表名()</code></p><h3 id="创建表中字段的属性"><a href="#创建表中字段的属性" class="headerlink" title="创建表中字段的属性"></a>创建表中字段的属性</h3><p>（都是写在 <code>&quot;字段名 类型 是否空&quot;</code>后面）：<a id="more"></a></p><ul><li>引用其他表字段：<code>references 引用的表名（字段）</code></li><li>设置字段中默认值：<code>defauct ‘’</code></li><li>自增列：<code>auto_increment</code></li><li>约束字段（域）：<code>check()</code></li><li>主键：<code>primart key</code></li></ul><h3 id="查看表的基本结构"><a href="#查看表的基本结构" class="headerlink" title="查看表的基本结构"></a>查看表的基本结构</h3><ul><li>语法：<code>desc 表名</code></li><li>结果：</li></ul><p><code>Field</code>：字段名</p><p><code>Type</code>：字段类型</p><p><code>NULL</code>：是否可以为空</p><p><code>Key</code>：是否编制索引</p><p><code>Default</code>：默认值</p><p><code>Extra</code>：附加信息，如自增列（自动增长列一般为主键）</p><h3 id="查看表的详细结构"><a href="#查看表的详细结构" class="headerlink" title="查看表的详细结构"></a>查看表的详细结构</h3><ul><li>查看：<code>show create table 表名</code></li><li>格式化：<code>show create table 表名\G</code></li></ul><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p><code>alter table 旧表名 rename to 新表名</code></p><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h3><p><code>alter table 表名 change 旧字段名 新字段名 新类型</code></p><h3 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h3><p><code>alter table 表名 modify 字段名 新类型</code></p><h3 id="添加和删除字段"><a href="#添加和删除字段" class="headerlink" title="添加和删除字段"></a>添加和删除字段</h3><ul><li>添加： <code>alter table 表名 add 新字段 新类型</code></li><li>删除： <code>alter table 表名 drop 字段</code></li></ul><h3 id="增补约束"><a href="#增补约束" class="headerlink" title="增补约束"></a>增补约束</h3><ul><li>添加主键：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称             //约束名称一般为，PK_表名_主键字段</div><div class="line">primary key(主键目标列)</div></pre></td></tr></table></figure><ul><li>添加外键约束：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称//约束名称一般为，FK_引用表_被引用表</div><div class="line">foreign key(列) references 被引用表（列）</div></pre></td></tr></table></figure><ul><li>添加检查约束：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名</div><div class="line">add constraint 约束的名称//约束名称一般为，CK_表名</div><div class="line">check(约束条件)</div></pre></td></tr></table></figure><ul><li>添加默认值语法：<br><code>alter table 表名 alter 目标列 set default 默认值</code></li><li>添加自动增长语法：<br><code>alter table 表名 modify column 自增列 类型 是否为空 auto_increment</code></li></ul><h3 id="删除无关联数据表"><a href="#删除无关联数据表" class="headerlink" title="删除无关联数据表"></a>删除无关联数据表</h3><p><code>drop table 表1，表2</code>；（可删多个，注意：无关联）</p><h3 id="删除有关联数据表"><a href="#删除有关联数据表" class="headerlink" title="删除有关联数据表"></a>删除有关联数据表</h3><p>先解除关联关系（删除外键约束）：<code>alter table 从表名称 drop 外键约束 名称</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h3&gt;&lt;p&gt;&lt;code&gt;create table 表名()&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;创建表中字段的属性&quot;&gt;&lt;a href=&quot;#创建表中字段的属性&quot; class=&quot;headerlink&quot; title=&quot;创建表中字段的属性&quot;&gt;&lt;/a&gt;创建表中字段的属性&lt;/h3&gt;&lt;p&gt;（都是写在 &lt;code&gt;&amp;quot;字段名 类型 是否空&amp;quot;&lt;/code&gt;后面）：
    
    </summary>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>数据库常用函数</title>
    <link href="http://blog.xiongchang.vip/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://blog.xiongchang.vip/数据库常用函数.html</id>
    <published>2019-10-16T12:31:42.000Z</published>
    <updated>2019-10-17T08:08:59.614Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --><h1 id="前序："><a href="#前序：" class="headerlink" title="前序："></a>前序：</h1><p>增删改查简称CRUD<br>数据定义语言（DDL）：create、drop、alter、show<br>数据操纵语言（DML）：insert、delete、update<br>数据查询语言（DQL）：select<a id="more"></a><br>数据控制语言（DCL）：grant（分配）、revoke（回收）、deny（拒绝）等。</p><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><ul><li>整数：tingint（1字节）、smallint（2字节）、int（4字节）、bigint（8字节）</li><li>定点数：decimal（p,s）（字节数为 p+2）</li><li>文本： char（固定长度文本）、varchar（字符串，类似于String）、Text</li></ul><h2 id="数据库概述："><a href="#数据库概述：" class="headerlink" title="数据库概述："></a>数据库概述：</h2><h3 id="数据库特点："><a href="#数据库特点：" class="headerlink" title="数据库特点："></a>数据库特点：</h3><ul><li>数据结构化；</li><li>数据共享性高，冗余度低，易扩充</li><li>数据的独立性高</li><li>数据由DBMS统一管理和控制</li></ul><h3 id="DBMS必须提供以下数据控制功能："><a href="#DBMS必须提供以下数据控制功能：" class="headerlink" title="DBMS必须提供以下数据控制功能："></a>DBMS必须提供以下数据控制功能：</h3><ul><li>数据的安全性（Security）保护</li><li>数据的完整性（Integrity）检查</li><li>并发（Concurrency）控制</li><li>数据库恢复（Recovery）</li></ul><h1 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h1><ul><li>函数的概念：按指定格式输入参数，返回正确结果的运算单元</li><li>返回当前日期：<br><code>curdate()</code>、<code>current_date()</code> //两种函数返回是完全一样的<br><code>curdate()+0</code> //可以将当前日期值转换为数值型</li><li>返回当前时间：<br><code>curtime()</code>、<code>current_time()</code> //两种函数返回是完全一样的<br><code>curtime()+0</code> //可以将当前时间值转换为数值型</li><li>返回当前日期和时间：<br><code>current_timestamp()</code>、<code>localtime()</code>、<code>now()</code>、<code>sysdate()</code> //四个函数结果相同</li><li>获取月份：<br><code>month(date)</code> //指定时间参数，获取数字<br><code>monthname(date)</code> //返回月份英文</li><li>获取星期：<br><code>dayname(date)</code> //返回星期英文<br><code>dayofweek(date)</code> //将星期天作为一周第1天（1–7）<br><code>weekday(date)</code> //将星期一作为一周第0天（0–6）<br><code>week(date)</code> //一年第几个星期（以0为起始）<br><code>weekofyear(date)</code> //一年第几个星期（以1为起始）</li><li>获取天数：<br><code>dayofyear(date)</code> //该天是该年的第几天<br><code>dayofmonth(date)</code> //该天是该月的第几天</li><li>获取年份、季度、小时、分钟、秒：<br><code>year(date)</code>、<code>quarter(date)</code>、<code>hour(time)</code>、<code>minute(time)</code>、<code>second(time)</code></li></ul><h1 id="数学函数："><a href="#数学函数：" class="headerlink" title="数学函数："></a>数学函数：</h1><ul><li>绝对值函数：<code>abs(x)</code></li><li>符号函数：<code>sign(x)</code> //判断数字是正数（返回1）还是负数（返回-1）还是0（返回0）</li><li>获取随机数函数：<br><code>rand()</code> //生成小于1的随机数<br><code>rand(x)</code> //生成固定数</li><li>获取整数的函数：<br><code>ceil(x)</code>或<code>ceiling(x)</code> //大于x的最小整数<br><code>floor(x)</code> //小于x的最大整数</li><li>四舍五入：<br><code>round(x)</code> //四舍五入<br><code>round(x，y)</code> //四舍五入,x为目标数，y为保留位数<br><code>truncate(x，y)</code> //截取，x为目标数，y为截取位数</li><li>求模（余数）函数：<code>mod(x，y)</code> //x为被除数，y为除数</li><li>幂运算函数：<br><code>pow(x，y)</code>或<code>power(x，y)</code> //求x的y次幂<br><code>exp(x)</code> //e的x次幂（e=2.7…）<br><code>sqrt(x)</code> //x的平方根</li><li>角度弧度互换函数：<br><code>radians(x)</code> //角度转换成弧度<br><code>degrees(x)</code> //弧度转换成角度</li><li>圆周率函数：<code>pi()</code></li><li>三角函数：<code>sin(x)</code>、<code>asin(x)</code>、<code>cos(x)</code>、<code>acos(x)</code>、<code>tan(x)</code>、<code>atan(x)</code>、<code>cot(x)</code></li></ul><h1 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h1><ul><li>计算字符数和字符串长度的函数：<br><code>char_length(s)</code> //字符串有多少个字符<br><code>length(s)</code> //字符串占用多少个字节（utf-8中一个汉字3字节）</li><li>合并字符串函数：<br><code>concat(s1，s2，...)</code><br><code>concat_ws(连接符，s1，s2，...)</code> //连接符出现在字符串之间进行连接</li><li>替换字符串函数：<br><code>insert(s1，X，len，s2)</code> //从s1字符串第X位置len长度替换成s2（从1开始数）<br><code>repla(S，S1，S2)</code> //将原字符串S中的子字符串S1替换成S2</li><li>截取字符串函数：<br><code>left(S，N)</code> //从字符串S左边截取N个字符<br><code>right(S，N)</code> //从字符串S右边截取N个字符</li><li>重复生成字符串函数：<code>repeat(S，N)</code> //将字符串S重复显示N遍</li><li>大小写转换函数：<br><code>lower(x)或</code>lcase(x) //全部变成小写<br><code>upper(x)</code>或<code>ucase(x)</code> //全部变成大写</li><li>填充字符串函数：<br><code>lpad(S1，len，S2)</code> //从字符串S1左边开始填充长度为len的S2<br><code>rpad(S1，len，S2)</code> //从字符串S1右边开始填充长度为len的S2</li><li>删除空格函数：<br><code>ltrim(s)</code>或<code>rtrim(s)</code> //删除左/右边的空格<br><code>trim</code> //只能去掉两边的空格，中间空格删不掉</li><li>删除指定字符串：<br><code>trim(S1 from S)</code> //删除字符串S中靠边的字符串S1</li><li>获取子字符串：<br><code>substring(S，N，len)</code> //从字符串S中从第N个位置截取len长度的字符串（从1开始数）<br><code>mid(S，N，len)</code> //同上，效果相同</li><li>返回指定位置字符串函数：<br><code>elt(N，S1，S2，...)</code> //找到并返回S1，S2，… 中的第N个字符串（从1开始数）</li><li>返回指定字符串位置：<br><code>field(S，S1，S2，...)</code> //在S1，S2，…中找到与字符串S相同的字符串，返回首次出现该字符串位置</li></ul><h1 id="系统函数："><a href="#系统函数：" class="headerlink" title="系统函数："></a>系统函数：</h1><ul><li>获取mySQL版本号的函数：<code>version()</code></li><li>查看当前用户的连接数：<code>connection_id()</code></li><li>查看当前所用数据库函数：<br><code>database()</code> //返回当前数据库名<br><code>schema()</code> //两个函数返回相同</li><li>获取用户名函数：<code>user()</code>、<code>current_user()</code>、<code>system_user()</code>、<code>session_user()</code></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:56 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;前序：&quot;&gt;&lt;a href=&quot;#前序：&quot; class=&quot;headerlink&quot; title=&quot;前序：&quot;&gt;&lt;/a&gt;前序：&lt;/h1&gt;&lt;p&gt;增删改查简称CRUD&lt;br&gt;数据定义语言（DDL）：create、drop、alter、show&lt;br&gt;数据操纵语言（DML）：insert、delete、update&lt;br&gt;数据查询语言（DQL）：select
    
    </summary>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://blog.xiongchang.vip/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Git教程及常用命令</title>
    <link href="http://blog.xiongchang.vip/Git%E6%95%99%E7%A8%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://blog.xiongchang.vip/Git教程及常用命令.html</id>
    <published>2019-10-15T14:34:58.000Z</published>
    <updated>2019-10-17T08:09:11.980Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --><h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><h2 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h2><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git </div><div class="line">The program <span class="string">'git'</span> is currently not installed. You can install it</div><div class="line">by typing: sudo apt-get install git</div></pre></td></tr></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><h2 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h2><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODY5MTc0MzEzNi8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><h2 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h2><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODcxODM2MzQyNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h1 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h1><h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><p>配置使用者身份<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --golbal user.name <span class="string">'yourname'</span></div><div class="line">$ git config --golbal user.email <span class="string">'email@example.com'</span></div></pre></td></tr></table></figure><p></p><p>查看当前身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name</div><div class="line">git config user.email</div></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>1、新建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir newFiles<span class="comment"># 创建文件夹</span></div><div class="line">$ <span class="built_in">cd</span> newFiles<span class="comment"># 进入newFiles目录</span></div><div class="line">$ <span class="built_in">pwd</span><span class="comment"># 显示当前目录</span></div></pre></td></tr></table></figure><p>2、初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure><h2 id="添加文件到git仓库"><a href="#添加文件到git仓库" class="headerlink" title="添加文件到git仓库"></a>添加文件到git仓库</h2><p>向git仓库添加文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div></pre></td></tr></table></figure><p></p><p>可以用<code>*.txt</code>表示添加<code>txt</code>一类的文件；<code>.</code>表示添加所有文件；添加多个文件时用<code>空格</code>隔开。</p><h2 id="查看添加状态"><a href="#查看添加状态" class="headerlink" title="查看添加状态"></a>查看添加状态</h2><p>查看仓库的状态：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure><p></p><p>有时文件较多，并且有些文件是不需要显示时，可以用以下方法将其忽略：<br>1.创建<code>.gitignore</code>文件<br>2.在<code>.gitignore</code>文件中添加需要忽略的文件或路径（相对路径）</p><h2 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'里面是注释的内容'</span></div></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure><p>使用此命令仅仅是删除文件管理器的文件，在git中并没有删除掉，若误删可以使用<code>$ git checkout -- test.txt</code> 恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div></pre></td></tr></table></figure><p>此时会将文件管理器和git中同时删除，不可恢复。</p><h2 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>1、查看所有提交历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span><span class="comment"># 列出日志详细信息</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=online<span class="comment"># 列出日志简述</span></div></pre></td></tr></table></figure><p>2、版本回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard head^<span class="comment"># 回退到上一个版本</span></div><div class="line">$ git reset --hard head~100<span class="comment"># 回退到上一百个版本</span></div></pre></td></tr></table></figure><p>3、撤回回退版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 56ea1f<span class="comment"># 需要知道版本号，且窗口没有关闭</span></div></pre></td></tr></table></figure><p>若不幸将窗口关闭，找不到版本号，可以使用<code>$ git reflog</code>来查找版本历史记录，从而找到版本号。</p><p>总而言之：<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，<code>git reset --hard head^</code>，不过前提是没有推送到远程库。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><ul><li>创建SSH key<br>在用户主目录下，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有i<code>d_rsa和id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ul><li><p>将公钥添加到GitHub<br>首先登录GitHub，然后点击右上角头像中的<code>setting</code>，选择<code>SSH and GPG keys</code>。接着选择<code>New SSH key</code>，分别输入<code>Title</code>和<code>id_rsa.pub</code><br>这样添加公钥就成功了。</p></li><li><p>添加远程库<br>依次选择右上角的<code>+</code> -&gt; <code>New repository</code> -&gt; <code>Repository name</code> -&gt; 确定<br>在本地仓库目录下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:michaelliao/learngit.git<span class="comment">#注意将地址改成自己的</span></div></pre></td></tr></table></figure><p>记得把地址改成自己的哦！<br>接着可以将本地仓库推送的GitHub中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure><p>第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (xx.xx.xx.xx)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) to the list of known hosts.</div></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/en/articles/githubs-ssh-key-fingerprints" target="_blank" rel="external">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><p>点击<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="external">这里</a>可以了解更详细。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>创建并切换到dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branck dev<span class="comment">#创建</span></div><div class="line">$ git checkout dev<span class="comment">#切换</span></div></pre></td></tr></table></figure><p>可以将以上两条命令合并为<code>$git checkout -b dev</code>.</p><ol><li>查看当前分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure><ol><li>合并dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev<span class="comment"># 合并dev分支到当前分支</span></div></pre></td></tr></table></figure><ol><li>删除dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branck <span class="_">-d</span> dev</div></pre></td></tr></table></figure><ol><li>switch<br>创建并切换：<code>$ git switch -c dev</code><br>切换已有分支：<code>$ git switch dev</code><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2>当使用<code>$ git merge dev</code>和<code>$ git status</code>发现是否有冲突<br>若存在冲突则：1、查看文件；2、写改成统一文件保存，解决冲突；3、<code>add</code>并<code>commit</code>到git仓库。<br>使用<code>$ git log --graph --pretty=oneline --abbrev-commit</code>可看到分支的合并情况。<br>使用<code>$ git log --graph</code>可看到分支合并图。<br><code>Fast forward模式</code><br>有冲突时：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAwMDQyMzA0MC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>解决冲突后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAzMTgzMTEwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2>合并：<code>$ git merge --no-ff -m &quot;描述信息&quot; dev</code><br>合并后可以看到历史分支，而<code>Fast forward模式</code>合并看不出曾做过合并。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzIyNTE0MjMwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2>在修复bug时，在bug的分支上再创建分支，进行修复，然后合并，最后修复bug。</li></ol><p>当工作没有完成时，先<code>$ git stash</code>保存现场，然后修复bug，修复之后接着<code>$ git stash pop</code>恢复没有完成的工作，同时删除之前保存的现场。<br><code>$ git stash pop</code>命令也可拆解为恢复<code>$ git stash apply</code>和删除<code>$ git stash deop</code><br><code>$ git stash list</code>可查看保存现场。</p><p>若正在工作的分支上存在之前修复的同样的bug，可以用<code>$ git cherry -pick 4c80502</code>来避免重复劳动。<code>4c80502</code>是在其他分支提交修复bug后的提交<code>id</code></p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>开发一个新功能时，最好新建一个分支，在该分支上开发，合并，最后删除。</p><p>若开发完成，在合并前，因某些原因要求销毁，使用<code>$ git branch -D feature</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li><p>查看远程库<code>$ git remote</code>或<code>$ git remote -v</code>(看详细内容)；<br>添加远程库<code>$ git remote add &lt;远程库名称&gt; &lt;远程库地址&gt;</code>；<br>删除远程库<code>$ git remote rm &lt;远程库名称&gt;</code>。<br>可以同时添加多个远程库（例如：GitHub、码云等）。</p></li><li><p>推送分支<code>$ git push origin &lt;分支&gt;</code><br>一般<code>master</code>主分支；<code>dev</code>开发分支与远程同步；<code>bug</code>分支用于在本地修复bug，没必要远程同步；<code>feature</code>分支是否推送，取决于合作伙伴。</p></li><li><p>抓取分支<code>$ git checkout -b dev origin/dev</code>(在本地创建和远程分支对应的分支)。</p></li></ul><p>多人协作的工作模式步骤通常：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><p><code>$ git rebase</code>把本地没有push的分叉提交历史整理成直线，使查看历史时更加直观容易。</p><h1 id="标题管理"><a href="#标题管理" class="headerlink" title="标题管理"></a>标题管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li><code>$ git tag v1.0</code>在最新提交上打标签；</li><li><code>$ git tag v0.9 f52c633</code>给指定提交上打标签，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag -a v1.0 -m &#39;注释内容&#39; f52c633</code>给指定提交上打标签并备注信息，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag</code>查看标签；</li><li><code>$ git show v0.9</code>查看指定标签详细信息。<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2></li><li><code>$ git tag -d v1.0</code>删除标签；</li><li><code>$ git push origin v1.0</code>推送v1.0标签到远程；</li><li><code>$ git push origin --tags</code>一次性推送所有未推送到远程的本地标签；</li></ul><p>删除远程标签：<br>1、先从本地删除：<code>$ git tag -d v0.9</code><br>2、然后远程删除：<code>$ git push origin :refs/tags/v0.9</code></p><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><p>参与一个开源项目：</p><ol><li>访问项目主页；</li><li><code>Fork</code>克隆仓库到自己的远程仓库；</li><li>从自己的远程仓库<code>clone</code>到本地；</li><li>工作完成后，<code>push</code>到自己的远程库；</li><li>在GitHub上发起<code>pull request</code>到开源项目上；</li><li>是否接受取决于他人。<h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2></li><li>新建<code>.gitignore</code>文件；</li><li>在<code>.gitignore</code>文件中加入需要忽略的文件和目录；</li><li>提交到git：<code>$ git add -f &lt;文件&gt;</code>，<code>-f</code>表示强制添加到git；<code>$ git check-ignore -v &lt;文件&gt;</code>，可检查是否时<code>.gitignore</code>规则问题。</li></ol><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p><code>$ git config --global alias.st status</code>将<code>status</code>别名改成<code>st</code></p><p><code>--global</code>是全局参数，可以此电脑所有git仓库使用，否则仅对当前仓库起作用。</p><p>每个仓库的git配置文件都放在<code>.git/config</code>文件中，可以使用<code>$ cat .git/config</code>查看（相对路径）。当前用户的git配置文件放在用户主目录下<code>.gitconfig</code>文件中。</p><p>详细可查看<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="external">git教程_廖雪峰</a>.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Nov 20 2019 15:08:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h1&gt;&lt;h2 id=&quot;在Linux上安装Git&quot;&gt;&lt;a href=&quot;#在Linux上安装Git&quot; class=&quot;headerlink&quot; title=&quot;在Linux上安装Git&quot;&gt;&lt;/a&gt;在Linux上安装Git&lt;/h2&gt;&lt;p&gt;首先，你可以试着输入&lt;code&gt;git&lt;/code&gt;，看看系统有没有安装Git：
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.xiongchang.vip/categories/Git/"/>
    
    
      <category term="Git" scheme="http://blog.xiongchang.vip/tags/Git/"/>
    
  </entry>
  
</feed>
