<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只不掉毛的程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/xbrownbear/"/>
  <updated>2019-10-16T12:41:27.012Z</updated>
  <id>http://github.com/xbrownbear/</id>
  
  <author>
    <name>Mr.xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据定义语言DDL</title>
    <link href="http://github.com/xbrownbear/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL.html"/>
    <id>http://github.com/xbrownbear/数据定义语言DDL.html</id>
    <published>2019-10-16T12:33:19.000Z</published>
    <updated>2019-10-16T12:41:27.012Z</updated>
    
    <content type="html"><![CDATA[<p>创建表：create table 表名（）<br>创建表中字段的属性（都是写在 “字段名 类型 是否空” 后面）：<br>    引用其他表字段：references 引用的表名（字段）<br>    设置字段中默认值：defauct ‘’<br>    自增列：<code>auto_increment</code><br>    约束字段（域）：check（）<br>    主键：primart key<br>查看表的基本结构：<a id="more"></a><br>    语法：desc 表名<br>    结果：    Field：字段名<br>        Type：字段类型<br>        NULL：是否可以为空<br>        Key：是否编制索引<br>        Default：默认值<br>        Extra：附加信息，如自增列（自动增长列一般为主键）<br>查看表的详细结构：<br>    查看：show create table 表名<br>    格式化：show create table 表名\G<br>修改表名：alter table 旧表名 rename to 新表名<br>修改字段名：    alter table 表名 change 旧字段名 新字段名 新类型<br>修改字段数据类型：alter table 表名 modify 字段名 新类型<br>添加和删除字段：<br>    添加：    alter table 表名 add 新字段 新类型<br>    删除：    alter table 表名 drop 字段<br>增补约束：<br>    添加主键：    alter table 表名<br>            add constraint 约束的名称    //约束名称一般为，PK<em>表名</em>主键字段<br>            primary key（主键目标列）<br>    添加外键约束：    alter table 表名<br>            add constraint 约束的名称    //约束名称一般为，FK<em>引用表</em>被引用表<br>            foreign key（列）references 被引用表（列）<br>    添加检查约束：    alter table 表名<br>            add constraint 约束的名称    //约束名称一般为，CK_表名<br>            check（约束条件）<br>    添加默认值语法：<br>            alter table 表名 alter 目标列 set default 默认值<br>    添加自动增长语法：<br>            alter table 表名 modify column 自增列 类型 是否为空 auto_increment<br>删除无关联数据表：<br>    drop table 表1，表2；（可删多个，注意：无关联）<br>删除有关联数据表：<br>    先解除关联关系（删除外键约束）：alter table 从表名称 drop 外键约束 名称</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建表：create table 表名（）&lt;br&gt;创建表中字段的属性（都是写在 “字段名 类型 是否空” 后面）：&lt;br&gt;    引用其他表字段：references 引用的表名（字段）&lt;br&gt;    设置字段中默认值：defauct ‘’&lt;br&gt;    自增列：&lt;code&gt;auto_increment&lt;/code&gt;&lt;br&gt;    约束字段（域）：check（）&lt;br&gt;    主键：primart key&lt;br&gt;查看表的基本结构：
    
    </summary>
    
    
      <category term="SQL" scheme="http://github.com/xbrownbear/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://github.com/xbrownbear/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>数据库常用函数</title>
    <link href="http://github.com/xbrownbear/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://github.com/xbrownbear/数据库常用函数.html</id>
    <published>2019-10-16T12:31:42.000Z</published>
    <updated>2019-10-16T14:09:18.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前序："><a href="#前序：" class="headerlink" title="前序："></a>前序：</h1><p>增删改查简称CRUD<br>数据定义语言（DDL）：create、drop、alter、show<br>数据操纵语言（DML）：insert、delete、update<br>数据查询语言（DQL）：select<br>数据控制语言（DCL）：grant（分配）、revoke（回收）、deny（拒绝）等</p><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><ul><li>整数：tingint（1字节）、smallint（2字节）、int（4字节）、bigint（8字节）</li><li>定点数：decimal（p,s）（字节数为 p+2）</li><li>文本：    char（固定长度文本）、varchar（字符串，类似于String）、Text</li></ul><h2 id="数据库概述："><a href="#数据库概述：" class="headerlink" title="数据库概述："></a>数据库概述：</h2><h3 id="数据库特点："><a href="#数据库特点：" class="headerlink" title="数据库特点："></a>数据库特点：</h3><ul><li>数据结构化；</li><li>数据共享性高，冗余度低，易扩充</li><li>数据的独立性高</li><li>数据由DBMS统一管理和控制</li></ul><h3 id="DBMS必须提供以下数据控制功能："><a href="#DBMS必须提供以下数据控制功能：" class="headerlink" title="DBMS必须提供以下数据控制功能："></a>DBMS必须提供以下数据控制功能：</h3><ul><li>数据的安全性（Security）保护</li><li>数据的完整性（Integrity）检查</li><li>并发（Concurrency）控制</li><li>数据库恢复（Recovery）</li></ul><h1 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h1><ul><li>函数的概念：按指定格式输入参数，返回正确结果的运算单元</li><li>返回当前日期：<br>  <code>curdate()</code>、<code>current_date()</code>    //两种函数返回是完全一样的<br>  <code>curdate()+0</code>            //可以将当前日期值转换为数值型</li><li>返回当前时间：<br>  <code>curtime()</code>、<code>current_time()</code>    //两种函数返回是完全一样的<br>  <code>curtime()+0</code>                //可以将当前时间值转换为数值型</li><li>返回当前日期和时间：<br>  <code>current_timestamp()</code>、<code>localtime()</code>、<code>now()</code>、<code>sysdate()</code>  //四个函数结果相同</li><li>获取月份：<br>  <code>month(date)</code>    //指定时间参数，获取数字<br>  <code>monthname(date)</code>    //返回月份英文</li><li>获取星期：<br>  <code>dayname(date)</code>    //返回星期英文<br>  <code>dayofweek(date)</code> //将星期天作为一周第1天（1–7）<br>  <code>weekday(date)</code>    //将星期一作为一周第0天（0–6）<br>  <code>week(date)</code>        //一年第几个星期（以0为起始）<br>  <code>weekofyear(date)</code>    //一年第几个星期（以1为起始）</li><li>获取天数：<br>  <code>dayofyear(date)</code>    //该天是该年的第几天<br>  <code>dayofmonth(date)</code>    //该天是该月的第几天</li><li>获取年份、季度、小时、分钟、秒：<br>  <code>year(date)</code>、<code>quarter(date)</code>、<code>hour(time)</code>、<code>minute(time)</code>、<code>second(time)</code></li></ul><h1 id="数学函数："><a href="#数学函数：" class="headerlink" title="数学函数："></a>数学函数：</h1><ul><li>绝对值函数：<code>abs(x)</code></li><li>符号函数：<code>sign(x)</code>    //判断数字是正数（返回1）还是负数（返回-1）还是0（返回0）</li><li>获取随机数函数：<br>  <code>rand()</code>    //生成小于1的随机数<br>  <code>rand(x)</code> //生成固定数</li><li>获取整数的函数：<br>  <code>ceil(x)</code>或<code>ceiling(x)</code>    //大于x的最小整数<br>  <code>floor(x)</code>        //小于x的最大整数</li><li>四舍五入：<br>  <code>round(x)</code>        //四舍五入<br>  <code>round(x，y)</code>        //四舍五入,x为目标数，y为保留位数<br>  <code>truncate(x，y)</code>    //截取，x为目标数，y为截取位数</li><li>求模（余数）函数：<code>mod(x，y)</code>    //x为被除数，y为除数</li><li>幂运算函数：<br>  <code>pow(x，y)</code>或<code>power(x，y)</code>    //求x的y次幂<br>  <code>exp(x)</code>            //e的x次幂（e=2.7…）<br>  <code>sqrt(x)</code>            //x的平方根</li><li>角度弧度互换函数：<br>  <code>radians(x)</code>        //角度转换成弧度<br>  <code>degrees(x)</code>        //弧度转换成角度</li><li>圆周率函数：<code>pi()</code></li><li>三角函数：<code>sin(x)</code>、<code>asin(x)</code>、<code>cos(x)</code>、<code>acos(x)</code>、<code>tan(x)</code>、<code>atan(x)</code>、<code>cot(x)</code></li></ul><h1 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h1><ul><li>计算字符数和字符串长度的函数：<br>  <code>char_length(s)</code>     //字符串有多少个字符<br>  <code>length(s)</code>        //字符串占用多少个字节（utf-8中一个汉字3字节）</li><li>合并字符串函数：<br>  <code>concat(s1，s2，...)</code><br>  <code>concat_ws(连接符，s1，s2，...)</code>  //连接符出现在字符串之间进行连接</li><li>替换字符串函数：<br>  <code>insert(s1，X，len，s2)</code>    //从s1字符串第X位置len长度替换成s2（从1开始数）<br>  <code>repla(S，S1，S2)</code>        //将原字符串S中的子字符串S1替换成S2</li><li>截取字符串函数：<br>  <code>left(S，N)</code>        //从字符串S左边截取N个字符<br>  <code>right(S，N)</code>        //从字符串S右边截取N个字符</li><li>重复生成字符串函数：<code>repeat(S，N)</code> //将字符串S重复显示N遍</li><li>大小写转换函数：<br>  <code>lower(x)或</code>lcase(x)    //全部变成小写<br>  <code>upper(x)</code>或<code>ucase(x)</code>    //全部变成大写</li><li>填充字符串函数：<br>  <code>lpad(S1，len，S2)</code>    //从字符串S1左边开始填充长度为len的S2<br>  <code>rpad(S1，len，S2)</code>    //从字符串S1右边开始填充长度为len的S2</li><li>删除空格函数：<br>  <code>ltrim(s)</code>或<code>rtrim(s)</code>    //删除左/右边的空格<br>  <code>trim</code>            //只能去掉两边的空格，中间空格删不掉</li><li>删除指定字符串：<br>  <code>trim(S1 from S)</code>    //删除字符串S中靠边的字符串S1</li><li>获取子字符串：<br>  <code>substring(S，N，len)</code>    //从字符串S中从第N个位置截取len长度的字符串（从1开始数）<br>  <code>mid(S，N，len)</code>        //同上，效果相同</li><li>返回指定位置字符串函数：<br>  <code>elt(N，S1，S2，...)</code>        //找到并返回S1，S2，… 中的第N个字符串（从1开始数）</li><li>返回指定字符串位置：<br>  <code>field(S，S1，S2，...)</code>    //在S1，S2，…中找到与字符串S相同的字符串，返回首次出现该字符串位置</li></ul><h1 id="系统函数："><a href="#系统函数：" class="headerlink" title="系统函数："></a>系统函数：</h1><ul><li>获取mySQL版本号的函数：<code>version()</code></li><li>查看当前用户的连接数：<code>connection_id()</code></li><li>查看当前所用数据库函数：<br>  <code>database()</code>     //返回当前数据库名<br>  <code>schema()</code>    //两个函数返回相同</li><li>获取用户名函数：<code>user()</code>、<code>current_user()</code>、<code>system_user()</code>、<code>session_user()</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前序：&quot;&gt;&lt;a href=&quot;#前序：&quot; class=&quot;headerlink&quot; title=&quot;前序：&quot;&gt;&lt;/a&gt;前序：&lt;/h1&gt;&lt;p&gt;增删改查简称CRUD&lt;br&gt;数据定义语言（DDL）：create、drop、alter、show&lt;br&gt;数据操纵语言（DML）：in
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://github.com/xbrownbear/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://github.com/xbrownbear/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Git教程及常用命令</title>
    <link href="http://github.com/xbrownbear/Git%E6%95%99%E7%A8%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://github.com/xbrownbear/Git教程及常用命令.html</id>
    <published>2019-10-15T14:34:58.000Z</published>
    <updated>2019-10-16T12:41:42.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><h2 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h2><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git </div><div class="line">The program <span class="string">'git'</span> is currently not installed. You can install it</div><div class="line">by typing: sudo apt-get install git</div></pre></td></tr></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。<a id="more"></a></p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><h2 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h2><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODY5MTc0MzEzNi8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><h2 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h2><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAxODcxODM2MzQyNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h1 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h1><h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><p>配置使用者身份<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --golbal user.name <span class="string">'yourname'</span></div><div class="line">$ git config --golbal user.email <span class="string">'email@example.com'</span></div></pre></td></tr></table></figure></p><p>查看当前身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name</div><div class="line">git config user.email</div></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>1、新建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir newFiles<span class="comment"># 创建文件夹</span></div><div class="line">$ <span class="built_in">cd</span> newFiles<span class="comment"># 进入newFiles目录</span></div><div class="line">$ <span class="built_in">pwd</span><span class="comment"># 显示当前目录</span></div></pre></td></tr></table></figure><p>2、初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure><h2 id="添加文件到git仓库"><a href="#添加文件到git仓库" class="headerlink" title="添加文件到git仓库"></a>添加文件到git仓库</h2><p>向git仓库添加文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div></pre></td></tr></table></figure></p><p>可以用<code>*.txt</code>表示添加<code>txt</code>一类的文件；<code>.</code>表示添加所有文件；添加多个文件时用<code>空格</code>隔开。</p><h2 id="查看添加状态"><a href="#查看添加状态" class="headerlink" title="查看添加状态"></a>查看添加状态</h2><p>查看仓库的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure></p><p>有时文件较多，并且有些文件是不需要显示时，可以用以下方法将其忽略：<br>1.创建<code>.gitignore</code>文件<br>2.在<code>.gitignore</code>文件中添加需要忽略的文件或路径（相对路径）</p><h2 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'里面是注释的内容'</span></div></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure><p>使用此命令仅仅是删除文件管理器的文件，在git中并没有删除掉，若误删可以使用<code>$ git checkout -- test.txt</code> 恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div></pre></td></tr></table></figure><p>此时会将文件管理器和git中同时删除，不可恢复。</p><h2 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>1、查看所有提交历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span><span class="comment"># 列出日志详细信息</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=online<span class="comment"># 列出日志简述</span></div></pre></td></tr></table></figure><p>2、版本回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard head^<span class="comment"># 回退到上一个版本</span></div><div class="line">$ git reset --hard head~100<span class="comment"># 回退到上一百个版本</span></div></pre></td></tr></table></figure><p>3、撤回回退版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 56ea1f<span class="comment"># 需要知道版本号，且窗口没有关闭</span></div></pre></td></tr></table></figure><p>若不幸将窗口关闭，找不到版本号，可以使用<code>$ git reflog</code>来查找版本历史记录，从而找到版本号。</p><p>总而言之：<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，<code>git reset --hard head^</code>，不过前提是没有推送到远程库。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><ul><li>创建SSH key<br>在用户主目录下，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有i<code>d_rsa和id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ul><li><p>将公钥添加到GitHub<br>首先登录GitHub，然后点击右上角头像中的<code>setting</code>，选择<code>SSH and GPG keys</code>。接着选择<code>New SSH key</code>，分别输入<code>Title</code>和<code>id_rsa.pub</code><br>这样添加公钥就成功了。</p></li><li><p>添加远程库<br>依次选择右上角的<code>+</code> -&gt; <code>New repository</code> -&gt; <code>Repository name</code> -&gt; 确定<br>在本地仓库目录下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:michaelliao/learngit.git<span class="comment">#注意将地址改成自己的</span></div></pre></td></tr></table></figure><p>记得把地址改成自己的哦！<br>接着可以将本地仓库推送的GitHub中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure><p>第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (xx.xx.xx.xx)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) to the list of known hosts.</div></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/en/articles/githubs-ssh-key-fingerprints" target="_blank" rel="external">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><p>点击<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="external">这里</a>可以了解更详细。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>创建并切换到dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branck dev<span class="comment">#创建</span></div><div class="line">$ git checkout dev<span class="comment">#切换</span></div></pre></td></tr></table></figure><p>可以将以上两条命令合并为<code>$git checkout -b dev</code>.</p><ol><li>查看当前分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure><ol><li>合并dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev<span class="comment"># 合并dev分支到当前分支</span></div></pre></td></tr></table></figure><ol><li>删除dev分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branck <span class="_">-d</span> dev</div></pre></td></tr></table></figure><ol><li>switch<br>创建并切换：<code>$ git switch -c dev</code><br>切换已有分支：<code>$ git switch dev</code><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2>当使用<code>$ git merge dev</code>和<code>$ git status</code>发现是否有冲突<br>若存在冲突则：1、查看文件；2、写改成统一文件保存，解决冲突；3、<code>add</code>并<code>commit</code>到git仓库。<br>使用<code>$ git log --graph --pretty=oneline --abbrev-commit</code>可看到分支的合并情况。<br>使用<code>$ git log --graph</code>可看到分支合并图。<br><code>Fast forward模式</code><br>有冲突时：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAwMDQyMzA0MC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>解决冲突后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzAzMTgzMTEwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2>合并：<code>$ git merge --no-ff -m &quot;描述信息&quot; dev</code><br>合并后可以看到历史分支，而<code>Fast forward模式</code>合并看不出曾做过合并。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxOTAyMzIyNTE0MjMwNC8w?x-oss-process=image/format,png" alt="在这里插入图片描述"><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2>在修复bug时，在bug的分支上再创建分支，进行修复，然后合并，最后修复bug。</li></ol><p>当工作没有完成时，先<code>$ git stash</code>保存现场，然后修复bug，修复之后接着<code>$ git stash pop</code>恢复没有完成的工作，同时删除之前保存的现场。<br><code>$ git stash pop</code>命令也可拆解为恢复<code>$ git stash apply</code>和删除<code>$ git stash deop</code><br><code>$ git stash list</code>可查看保存现场。</p><p>若正在工作的分支上存在之前修复的同样的bug，可以用<code>$ git cherry -pick 4c80502</code>来避免重复劳动。<code>4c80502</code>是在其他分支提交修复bug后的提交<code>id</code></p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>开发一个新功能时，最好新建一个分支，在该分支上开发，合并，最后删除。</p><p>若开发完成，在合并前，因某些原因要求销毁，使用<code>$ git branch -D feature</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li><p>查看远程库<code>$ git remote</code>或<code>$ git remote -v</code>(看详细内容)；<br>添加远程库<code>$ git remote add &lt;远程库名称&gt; &lt;远程库地址&gt;</code>；<br>删除远程库<code>$ git remote rm &lt;远程库名称&gt;</code>。<br>可以同时添加多个远程库（例如：GitHub、码云等）。</p></li><li><p>推送分支<code>$ git push origin &lt;分支&gt;</code><br>一般<code>master</code>主分支；<code>dev</code>开发分支与远程同步；<code>bug</code>分支用于在本地修复bug，没必要远程同步；<code>feature</code>分支是否推送，取决于合作伙伴。</p></li><li><p>抓取分支<code>$ git checkout -b dev origin/dev</code>(在本地创建和远程分支对应的分支)。</p></li></ul><p>多人协作的工作模式步骤通常：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><p><code>$ git rebase</code>把本地没有push的分叉提交历史整理成直线，使查看历史时更加直观容易。</p><h1 id="标题管理"><a href="#标题管理" class="headerlink" title="标题管理"></a>标题管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li><code>$ git tag v1.0</code>在最新提交上打标签；</li><li><code>$ git tag v0.9 f52c633</code>给指定提交上打标签，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag -a v1.0 -m &#39;注释内容&#39; f52c633</code>给指定提交上打标签并备注信息，<code>f52c633</code>时提交的<code>id</code>号;</li><li><code>$ git tag</code>查看标签；</li><li><code>$ git show v0.9</code>查看指定标签详细信息。<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2></li><li><code>$ git tag -d v1.0</code>删除标签；</li><li><code>$ git push origin v1.0</code>推送v1.0标签到远程；</li><li><code>$ git push origin --tags</code>一次性推送所有未推送到远程的本地标签；</li></ul><p>删除远程标签：<br>1、先从本地删除：<code>$ git tag -d v0.9</code><br>2、然后远程删除：<code>$ git push origin :refs/tags/v0.9</code></p><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><p>参与一个开源项目：</p><ol><li>访问项目主页；</li><li><code>Fork</code>克隆仓库到自己的远程仓库；</li><li>从自己的远程仓库<code>clone</code>到本地；</li><li>工作完成后，<code>push</code>到自己的远程库；</li><li>在GitHub上发起<code>pull request</code>到开源项目上；</li><li>是否接受取决于他人。<h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2></li><li>新建<code>.gitignore</code>文件；</li><li>在<code>.gitignore</code>文件中加入需要忽略的文件和目录；</li><li>提交到git：<code>$ git add -f &lt;文件&gt;</code>，<code>-f</code>表示强制添加到git；<code>$ git check-ignore -v &lt;文件&gt;</code>，可检查是否时<code>.gitignore</code>规则问题。</li></ol><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p><code>$ git config --global alias.st status</code>将<code>status</code>别名改成<code>st</code></p><p><code>--global</code>是全局参数，可以此电脑所有git仓库使用，否则仅对当前仓库起作用。</p><p>每个仓库的git配置文件都放在<code>.git/config</code>文件中，可以使用<code>$ cat .git/config</code>查看（相对路径）。当前用户的git配置文件放在用户主目录下<code>.gitconfig</code>文件中。</p><p>详细可查看<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="external">git教程_廖雪峰</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h1&gt;&lt;h2 id=&quot;在Linux上安装Git&quot;&gt;&lt;a href=&quot;#在Linux上安装Git&quot; class=&quot;headerlink&quot; title=&quot;在Linux上安装Git&quot;&gt;&lt;/a&gt;在Linux上安装Git&lt;/h2&gt;&lt;p&gt;首先，你可以试着输入&lt;code&gt;git&lt;/code&gt;，看看系统有没有安装Git：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The program &lt;span class=&quot;string&quot;&gt;&#39;git&#39;&lt;/span&gt; is currently not installed. You can install it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;by typing: sudo apt-get install git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。
    
    </summary>
    
    
      <category term="Git" scheme="http://github.com/xbrownbear/categories/Git/"/>
    
    
      <category term="Git" scheme="http://github.com/xbrownbear/tags/Git/"/>
    
  </entry>
  
</feed>
